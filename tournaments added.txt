<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FinalScore - Premium Pick'em Experience</title>
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Poppins:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    
<style>
/* PREMIUM VISUAL REDESIGN - COMPLETE UI TRANSFORMATION */

:root {
    /* Premium Color Palette */
    --primary-purple: #8B5CF6;
    --primary-orange: #F97316;
    --primary-yellow: #FCD34D;
    --primary-teal: #06B6D4;
    --primary-pink: #EC4899;
    --primary-green: #10B981;
    
    /* Gradients */
    --gradient-primary: linear-gradient(135deg, #8B5CF6 0%, #EC4899 100%);
    --gradient-secondary: linear-gradient(135deg, #F97316 0%, #FCD34D 100%);
    --gradient-success: linear-gradient(135deg, #10B981 0%, #06B6D4 100%);
    --gradient-warning: linear-gradient(135deg, #F59E0B 0%, #F97316 100%);
    --gradient-dark: linear-gradient(135deg, #1F2937 0%, #374151 100%);
    
    /* Backgrounds */
    --bg-main: linear-gradient(135deg, #0F0F23 0%, #1A1A2E 50%, #16213E 100%);
    --bg-card: rgba(255, 255, 255, 0.03);
    --bg-card-hover: rgba(255, 255, 255, 0.08);
    --bg-glass: rgba(255, 255, 255, 0.1);
    
    /* Shadows & Glows */
    --shadow-small: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    --shadow-medium: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    --shadow-large: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    --glow-purple: 0 0 30px rgba(139, 92, 246, 0.3);
    --glow-orange: 0 0 30px rgba(249, 115, 22, 0.3);
    --glow-yellow: 0 0 30px rgba(252, 211, 77, 0.3);
    --glow-teal: 0 0 30px rgba(6, 182, 212, 0.3);
    
    /* Typography */
    --font-primary: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    --font-display: 'Poppins', -apple-system, BlinkMacSystemFont, sans-serif;
    
    /* Spacing */
    --space-xs: 0.5rem;
    --space-sm: 0.75rem;
    --space-md: 1rem;
    --space-lg: 1.5rem;
    --space-xl: 2rem;
    --space-2xl: 3rem;
    --space-3xl: 4rem;
    
    /* Border Radius */
    --radius-sm: 0.5rem;
    --radius-md: 0.75rem;
    --radius-lg: 1rem;
    --radius-xl: 1.5rem;
    --radius-2xl: 2rem;
    --radius-full: 9999px;
}

/* Reset & Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: var(--font-primary);
    background: var(--bg-main);
    color: white;
    line-height: 1.6;
    overflow-x: hidden;
}

/* Scrollbar Styling */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-full);
}

::-webkit-scrollbar-thumb {
    background: var(--gradient-primary);
    border-radius: var(--radius-full);
}

::-webkit-scrollbar-thumb:hover {
    background: var(--gradient-secondary);
}

/* Background Animation */
body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: 
        radial-gradient(circle at 20% 50%, rgba(139, 92, 246, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(249, 115, 22, 0.1) 0%, transparent 50%),
        radial-gradient(circle at 40% 80%, rgba(6, 182, 212, 0.1) 0%, transparent 50%);
    z-index: -1;
    animation: backgroundShift 20s ease-in-out infinite;
}

@keyframes backgroundShift {
    0%, 100% { transform: scale(1) rotate(0deg); }
    50% { transform: scale(1.1) rotate(5deg); }
}

/* Header */
.header {
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(20px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    padding: var(--space-lg) var(--space-xl);
    position: sticky;
    top: 0;
    z-index: 100;
}

.header-content {
    max-width: 1400px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: var(--space-lg);
}

.logo {
    font-family: var(--font-display);
    font-size: 2rem;
    font-weight: 800;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: var(--glow-purple);
}

.header-actions {
    display: flex;
    gap: var(--space-md);
    align-items: center;
    flex-wrap: wrap;
}

/* Premium Button System */
.btn {
    font-family: var(--font-primary);
    font-weight: 600;
    padding: var(--space-sm) var(--space-lg);
    border-radius: var(--radius-full);
    border: none;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    font-size: 0.95rem;
    letter-spacing: 0.5px;
}

.btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
}

.btn:hover::before {
    left: 100%;
}

.btn-primary {
    background: var(--gradient-primary);
    color: white;
    box-shadow: var(--glow-purple);
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: var(--glow-purple), var(--shadow-large);
}

.btn-secondary {
    background: var(--gradient-secondary);
    color: white;
    box-shadow: var(--glow-orange);
}

.btn-secondary:hover {
    transform: translateY(-2px);
    box-shadow: var(--glow-orange), var(--shadow-large);
}

.btn-success {
    background: var(--gradient-success);
    color: white;
    box-shadow: var(--glow-teal);
}

.btn-success:hover {
    transform: translateY(-2px);
    box-shadow: var(--glow-teal), var(--shadow-large);
}

.btn-glass {
    background: var(--bg-glass);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
}

.btn-glass:hover {
    background: var(--bg-card-hover);
    transform: translateY(-2px);
}

/* Main Content */
.main-content {
    max-width: 1400px;
    margin: 0 auto;
    padding: var(--space-2xl) var(--space-xl);
}

/* Premium Card System */
.card {
    background: var(--bg-card);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-xl);
    padding: var(--space-2xl);
    margin-bottom: var(--space-2xl);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 1px;
    background: var(--gradient-primary);
    opacity: 0.5;
}

.card:hover {
    background: var(--bg-card-hover);
    transform: translateY(-5px);
    box-shadow: var(--shadow-large);
}

.card-premium {
    background: var(--bg-glass);
    border: 1px solid rgba(139, 92, 246, 0.3);
    box-shadow: var(--glow-purple);
}

.card-tournament {
    background: var(--bg-glass);
    border: 1px solid rgba(249, 115, 22, 0.3);
    box-shadow: var(--glow-orange);
}

.card-success {
    background: var(--bg-glass);
    border: 1px solid rgba(16, 185, 129, 0.3);
    box-shadow: var(--glow-teal);
}

/* Typography */
.heading-xl {
    font-family: var(--font-display);
    font-size: 3rem;
    font-weight: 800;
    margin-bottom: var(--space-lg);
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    line-height: 1.2;
}

.heading-lg {
    font-family: var(--font-display);
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: var(--space-md);
    color: white;
}

.heading-md {
    font-family: var(--font-display);
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: var(--space-sm);
    color: white;
}

.text-gradient {
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.text-muted {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.95rem;
}

/* User Stats Grid */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-lg);
    margin-bottom: var(--space-2xl);
}

.stat-card {
    background: var(--bg-glass);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-lg);
    padding: var(--space-xl);
    text-align: center;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--gradient-primary);
}

.stat-card:nth-child(2)::before { background: var(--gradient-secondary); }
.stat-card:nth-child(3)::before { background: var(--gradient-success); }
.stat-card:nth-child(4)::before { background: var(--gradient-warning); }

.stat-card:hover {
    transform: translateY(-5px);
    background: var(--bg-card-hover);
    box-shadow: var(--shadow-medium);
}

.stat-value {
    font-family: var(--font-display);
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: var(--space-xs);
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.stat-card:nth-child(2) .stat-value { background: var(--gradient-secondary); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
.stat-card:nth-child(3) .stat-value { background: var(--gradient-success); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }
.stat-card:nth-child(4) .stat-value { background: var(--gradient-warning); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }

.stat-label {
    font-weight: 600;
    color: rgba(255, 255, 255, 0.8);
    text-transform: uppercase;
    letter-spacing: 1px;
    font-size: 0.85rem;
}

/* Tournament Banner */
.tournament-banner {
    background: var(--gradient-secondary);
    border-radius: var(--radius-xl);
    padding: var(--space-2xl);
    margin-bottom: var(--space-2xl);
    text-align: center;
    position: relative;
    overflow: hidden;
    box-shadow: var(--glow-orange);
    animation: tournamentPulse 3s infinite ease-in-out;
}

.tournament-banner::before {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: conic-gradient(transparent, rgba(255, 255, 255, 0.1), transparent);
    animation: rotate 10s linear infinite;
    pointer-events: none;
}

@keyframes tournamentPulse {
    0%, 100% { transform: scale(1); box-shadow: var(--glow-orange); }
    50% { transform: scale(1.02); box-shadow: 0 0 50px rgba(249, 115, 22, 0.5); }
}

@keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

.tournament-title {
    font-family: var(--font-display);
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: var(--space-lg);
    color: white;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    position: relative;
    z-index: 1;
}

.tournament-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: var(--space-lg);
    margin: var(--space-lg) 0;
    position: relative;
    z-index: 1;
}

.tournament-stat {
    background: rgba(255, 255, 255, 0.15);
    border-radius: var(--radius-md);
    padding: var(--space-lg);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
}

.tournament-stat-label {
    font-size: 0.85rem;
    opacity: 0.9;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: var(--space-xs);
}

.tournament-stat-value {
    font-family: var(--font-display);
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
}

.tournament-actions {
    display: flex;
    gap: var(--space-md);
    justify-content: center;
    flex-wrap: wrap;
    margin-top: var(--space-lg);
    position: relative;
    z-index: 1;
}

/* Games Section */
.games-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-xl);
    flex-wrap: wrap;
    gap: var(--space-md);
}

.games-controls {
    display: flex;
    gap: var(--space-sm);
    align-items: center;
    flex-wrap: wrap;
}

.pick-status {
    background: var(--bg-glass);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-full);
    padding: var(--space-sm) var(--space-lg);
    font-weight: 600;
    color: white;
    backdrop-filter: blur(10px);
}

/* Game Cards */
.game-card {
    background: var(--bg-glass);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-xl);
    padding: var(--space-xl);
    margin-bottom: var(--space-lg);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.game-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 2px;
    background: var(--gradient-primary);
    opacity: 0.5;
}

.game-card:hover {
    background: var(--bg-card-hover);
    transform: translateY(-3px);
    box-shadow: var(--shadow-medium);
}

.game-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-lg);
    flex-wrap: wrap;
    gap: var(--space-md);
}

.game-title {
    font-family: var(--font-display);
    font-size: 1.4rem;
    font-weight: 700;
    color: white;
}

.game-meta {
    display: flex;
    gap: var(--space-sm);
    align-items: center;
    flex-wrap: wrap;
}

.league-badge {
    background: var(--gradient-primary);
    color: white;
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.countdown-badge {
    background: var(--gradient-success);
    color: white;
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    font-size: 0.8rem;
    font-weight: 600;
    min-width: 80px;
    text-align: center;
}

.countdown-badge.live {
    background: var(--gradient-warning);
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.8; }
}

/* Pick Sections */
.pick-section {
    margin-bottom: var(--space-lg);
}

.pick-section:last-child {
    margin-bottom: 0;
}

.pick-header {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
    margin-bottom: var(--space-md);
}

.pick-indicator {
    width: 4px;
    height: 20px;
    background: var(--gradient-primary);
    border-radius: var(--radius-full);
}

.pick-section:nth-child(2) .pick-indicator { background: var(--gradient-secondary); }
.pick-section:nth-child(3) .pick-indicator { background: var(--gradient-success); }

.pick-title {
    font-weight: 600;
    color: white;
    font-size: 1rem;
}

.pick-options {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-sm);
}

.pick-button {
    background: var(--bg-glass);
    border: 2px solid rgba(255, 255, 255, 0.2);
    color: white;
    padding: var(--space-md);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
    backdrop-filter: blur(10px);
    position: relative;
    overflow: hidden;
}

.pick-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: left 0.5s;
}

.pick-button:hover::before {
    left: 100%;
}

.pick-button:hover {
    border-color: rgba(139, 92, 246, 0.5);
    background: rgba(139, 92, 246, 0.1);
    transform: translateY(-2px);
}

.pick-button.selected {
    background: var(--gradient-success);
    border-color: var(--primary-green);
    box-shadow: var(--glow-teal);
}

.pick-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: rgba(255, 255, 255, 0.05);
}

/* Enhanced Leaderboard */
.leaderboard-container {
    background: var(--bg-glass);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-xl);
    padding: var(--space-2xl);
    margin-bottom: var(--space-2xl);
    backdrop-filter: blur(20px);
    position: relative;
    overflow: hidden;
}

.leaderboard-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    background: var(--gradient-primary);
}

.leaderboard-header {
    text-align: center;
    margin-bottom: var(--space-xl);
}

.leaderboard-title {
    font-family: var(--font-display);
    font-size: 2.5rem;
    font-weight: 800;
    margin-bottom: var(--space-md);
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.leaderboard-tabs {
    display: flex;
    justify-content: center;
    gap: var(--space-sm);
    margin-bottom: var(--space-xl);
    flex-wrap: wrap;
}

.leaderboard-tab {
    background: var(--bg-glass);
    border: 2px solid rgba(255, 255, 255, 0.2);
    color: white;
    padding: var(--space-sm) var(--space-lg);
    border-radius: var(--radius-full);
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 600;
    backdrop-filter: blur(10px);
    position: relative;
    overflow: hidden;
}

.leaderboard-tab::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transition: left 0.5s;
}

.leaderboard-tab:hover::before {
    left: 100%;
}

.leaderboard-tab:hover {
    border-color: rgba(139, 92, 246, 0.5);
    transform: translateY(-2px);
}

.leaderboard-tab.active {
    background: var(--gradient-primary);
    border-color: var(--primary-purple);
    box-shadow: var(--glow-purple);
}

.leaderboard-entry {
    display: flex;
    align-items: center;
    padding: var(--space-lg);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    transition: all 0.3s ease;
    border-radius: var(--radius-md);
    margin-bottom: var(--space-xs);
}

.leaderboard-entry:hover {
    background: var(--bg-card-hover);
    transform: translateX(5px);
}

.leaderboard-entry.current-user {
    background: var(--gradient-secondary);
    box-shadow: var(--glow-orange);
    border: none;
    animation: userGlow 3s infinite ease-in-out;
}

@keyframes userGlow {
    0%, 100% { box-shadow: var(--glow-orange); }
    50% { box-shadow: 0 0 40px rgba(249, 115, 22, 0.6); }
}

.rank-badge {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 800;
    font-size: 1.2rem;
    margin-right: var(--space-lg);
    flex-shrink: 0;
    font-family: var(--font-display);
}

.rank-badge.gold {
    background: var(--gradient-secondary);
    color: white;
    box-shadow: var(--glow-yellow);
}

.rank-badge.silver {
    background: linear-gradient(135deg, #E5E7EB 0%, #9CA3AF 100%);
    color: #374151;
    box-shadow: 0 0 20px rgba(156, 163, 175, 0.3);
}

.rank-badge.bronze {
    background: linear-gradient(135deg, #CD7F32 0%, #A0522D 100%);
    color: white;
    box-shadow: 0 0 20px rgba(205, 127, 50, 0.3);
}

.rank-badge.regular {
    background: var(--bg-glass);
    color: white;
    border: 2px solid rgba(255, 255, 255, 0.3);
}

/* Responsive Design */
@media (max-width: 1200px) {
    .main-content {
        padding: var(--space-xl) var(--space-lg);
    }
}

@media (max-width: 768px) {
    .header-content {
        flex-direction: column;
        text-align: center;
    }
    
    .main-content {
        padding: var(--space-lg) var(--space-md);
    }
    
    .heading-xl {
        font-size: 2.5rem;
    }
    
    .heading-lg {
        font-size: 1.75rem;
    }
    
    .tournament-title {
        font-size: 2rem;
    }
    
    .stats-grid {
        grid-template-columns: 1fr 1fr;
        gap: var(--space-md);
    }
    
    .tournament-stats {
        grid-template-columns: 1fr 1fr;
        gap: var(--space-md);
    }
    
    .games-header {
        flex-direction: column;
        align-items: stretch;
    }
    
    .leaderboard-tabs {
        justify-content: flex-start;
        overflow-x: auto;
        padding-bottom: var(--space-xs);
    }
    
    .leaderboard-tab {
        flex-shrink: 0;
    }
}

@media (max-width: 480px) {
    .card {
        padding: var(--space-lg);
        margin-bottom: var(--space-lg);
    }
    
    .tournament-banner {
        padding: var(--space-lg);
    }
    
    .game-card {
        padding: var(--space-lg);
    }
    
    .leaderboard-entry {
        padding: var(--space-md);
    }
}

/* Notification System */
.notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--bg-glass);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-lg);
    padding: var(--space-lg);
    backdrop-filter: blur(20px);
    color: white;
    font-weight: 600;
    transform: translateY(-100px);
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 1000;
    max-width: 350px;
    border-left: 4px solid var(--primary-purple);
}

.notification.show {
    transform: translateY(0);
    opacity: 1;
}

.notification.success {
    border-left-color: var(--primary-green);
    box-shadow: var(--glow-teal);
}

.notification.warning {
    border-left-color: var(--primary-orange);
    box-shadow: var(--glow-orange);
}

.notification.error {
    border-left-color: #EF4444;
    box-shadow: 0 0 30px rgba(239, 68, 68, 0.3);
}

/* Loading States */
.loading-skeleton {
    background: linear-gradient(90deg, rgba(255, 255, 255, 0.1) 25%, rgba(255, 255, 255, 0.2) 50%, rgba(255, 255, 255, 0.1) 75%);
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
    border-radius: var(--radius-md);
}

@keyframes skeleton-loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}

/* Achievement Badges */
.achievement-badge {
    background: var(--gradient-primary);
    color: white;
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    font-size: 0.8rem;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    margin: var(--space-xs);
    box-shadow: var(--glow-purple);
    animation: badgeGlow 2s infinite ease-in-out;
}

@keyframes badgeGlow {
    0%, 100% { box-shadow: var(--glow-purple); }
    50% { box-shadow: 0 0 40px rgba(139, 92, 246, 0.6); }
}

.achievement-badge.champion { background: var(--gradient-secondary); box-shadow: var(--glow-orange); }
.achievement-badge.elite { background: var(--gradient-success); box-shadow: var(--glow-teal); }
.achievement-badge.streak { background: var(--gradient-warning); box-shadow: var(--glow-yellow); }

/* Modal System */
.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(10px);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal.show {
    opacity: 1;
    visibility: visible;
}

.modal-content {
    background: var(--bg-glass);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-xl);
    padding: var(--space-2xl);
    max-width: 500px;
    width: 90%;
    backdrop-filter: blur(20px);
    position: relative;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.modal.show .modal-content {
    transform: scale(1);
}

.modal-header {
    margin-bottom: var(--space-lg);
    text-align: center;
}

.modal-title {
    font-family: var(--font-display);
    font-size: 1.8rem;
    font-weight: 700;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: var(--space-sm);
}

.modal-close {
    position: absolute;
    top: var(--space-lg);
    right: var(--space-lg);
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.3);
    color: #EF4444;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: bold;
    font-size: 1.2rem;
}

.modal-close:hover {
    background: rgba(239, 68, 68, 0.2);
    transform: scale(1.1);
}

/* Form Elements */
.form-group {
    margin-bottom: var(--space-lg);
}

.form-label {
    display: block;
    margin-bottom: var(--space-xs);
    font-weight: 600;
    color: white;
    font-size: 0.95rem;
}

.form-input {
    width: 100%;
    padding: var(--space-md);
    background: var(--bg-glass);
    border: 2px solid rgba(255, 255, 255, 0.2);
    border-radius: var(--radius-md);
    color: white;
    font-size: 1rem;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
}

.form-input:focus {
    outline: none;
    border-color: var(--primary-purple);
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
}

.form-input::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

/* Enhanced Animations */
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeInLeft {
    from {
        opacity: 0;
        transform: translateX(-30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

@keyframes fadeInRight {
    from {
        opacity: 0;
        transform: translateX(30px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

.animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out;
}

.animate-fade-in-left {
    animation: fadeInLeft 0.6s ease-out;
}

.animate-fade-in-right {
    animation: fadeInRight 0.6s ease-out;
}

/* Stagger animations for lists */
.animate-stagger > * {
    opacity: 0;
    animation: fadeInUp 0.6s ease-out forwards;
}

.animate-stagger > *:nth-child(1) { animation-delay: 0.1s; }
.animate-stagger > *:nth-child(2) { animation-delay: 0.2s; }
.animate-stagger > *:nth-child(3) { animation-delay: 0.3s; }
.animate-stagger > *:nth-child(4) { animation-delay: 0.4s; }
.animate-stagger > *:nth-child(5) { animation-delay: 0.5s; }

/* Floating Action Button */
.fab {
    position: fixed;
    bottom: 30px;
    right: 30px;
    width: 60px;
    height: 60px;
    background: var(--gradient-primary);
    border: none;
    border-radius: 50%;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    box-shadow: var(--glow-purple);
    transition: all 0.3s ease;
    z-index: 100;
}

.fab:hover {
    transform: scale(1.1);
    box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);
}

/* Enhanced Status Indicators */
.status-indicator {
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-full);
    font-size: 0.85rem;
    font-weight: 600;
}

.status-indicator.live {
    background: rgba(239, 68, 68, 0.1);
    color: #EF4444;
    border: 1px solid rgba(239, 68, 68, 0.3);
}

.status-indicator.live::before {
    content: '';
    width: 8px;
    height: 8px;
    background: #EF4444;
    border-radius: 50%;
    animation: pulse 1s infinite;
}

.status-indicator.upcoming {
    background: rgba(16, 185, 129, 0.1);
    color: var(--primary-green);
    border: 1px solid rgba(16, 185, 129, 0.3);
}

.status-indicator.closed {
    background: rgba(156, 163, 175, 0.1);
    color: #9CA3AF;
    border: 1px solid rgba(156, 163, 175, 0.3);
}

/* Premium Progress Bars */
.progress-bar {
    width: 100%;
    height: 8px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--radius-full);
    overflow: hidden;
    position: relative;
}

.progress-fill {
    height: 100%;
    background: var(--gradient-primary);
    border-radius: var(--radius-full);
    transition: width 0.3s ease;
    position: relative;
}

.progress-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    animation: shimmer 2s infinite;
}

@keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
}

/* Coin Display */
.coin-display {
    display: inline-flex;
    align-items: center;
    gap: var(--space-xs);
    background: var(--gradient-secondary);
    color: white;
    padding: var(--space-xs) var(--space-md);
    border-radius: var(--radius-full);
    font-weight: 700;
    box-shadow: var(--glow-orange);
    animation: coinGlow 3s infinite ease-in-out;
}

@keyframes coinGlow {
    0%, 100% { box-shadow: var(--glow-orange); }
    50% { box-shadow: 0 0 30px rgba(249, 115, 22, 0.6); }
}

.coin-icon {
    font-size: 1.2rem;
    animation: coinSpin 4s infinite linear;
}

@keyframes coinSpin {
    from { transform: rotateY(0deg); }
    to { transport: rotateY(360deg); }
}

/* Utility Classes */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }

.mb-0 { margin-bottom: 0; }
.mb-1 { margin-bottom: var(--space-xs); }
.mb-2 { margin-bottom: var(--space-sm); }
.mb-3 { margin-bottom: var(--space-md); }
.mb-4 { margin-bottom: var(--space-lg); }
.mb-5 { margin-bottom: var(--space-xl); }

.mt-0 { margin-top: 0; }
.mt-1 { margin-top: var(--space-xs); }
.mt-2 { margin-top: var(--space-sm); }
.mt-3 { margin-top: var(--space-md); }
.mt-4 { margin-top: var(--space-lg); }
.mt-5 { margin-top: var(--space-xl); }

.flex { display: flex; }
.flex-col { flex-direction: column; }
.items-center { align-items: center; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.gap-2 { gap: var(--space-sm); }
.gap-3 { gap: var(--space-md); }
.gap-4 { gap: var(--space-lg); }

.hidden { display: none; }
.block { display: block; }
.inline-block { display: inline-block; }

/* Hover Effects */
.hover-lift {
    transition: transform 0.3s ease;
}

.hover-lift:hover {
    transform: translateY(-5px);
}

.hover-glow {
    transition: all 0.3s ease;
}

.hover-glow:hover {
    box-shadow: var(--glow-purple);
}

/* Focus States */
*:focus {
    outline: 2px solid var(--primary-purple);
    outline-offset: 2px;
}

/* Selection */
::selection {
    background: rgba(139, 92, 246, 0.3);
    color: white;
}

/* Print Styles */
@media print {
    body {
        background: white;
        color: black;
    }
    
    .card {
        border: 1px solid #ddd;
        background: white;
    }
}

/* Dark Mode Support (for future) */
@media (prefers-color-scheme: dark) {
    /* Already optimized for dark theme */
}

/* Reduced Motion Support */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* High Contrast Support */
@media (prefers-contrast: high) {
    .card {
        border: 2px solid white;
    }
    
    .btn {
        border: 2px solid currentColor;
    }
}


</style> 

</head>
<!-- PREMIUM HTML STRUCTURE - COMPLETE PAGE LAYOUT -->
<!-- Replace your entire HTML body content with this premium version -->

<body>
    <!-- Header -->
    <header class="header">
        <div class="header-content">
            <div>
                <h1 class="logo">✨ FinalScore</h1>
                <p class="text-muted">Premium Sports Prediction Platform</p>
            </div>
            
            <div class="header-actions">
                <button id="achievementsBtn" class="btn btn-glass hover-lift" onclick="showAchievements()" style="display: none;">
                    🏆 Achievements
                </button>
                
                <!-- Account Dropdown -->
                <div id="accountDropdown" style="position: relative; display: none;">
                    <button id="accountBtn" class="btn btn-primary hover-lift" onclick="toggleAccountMenu()">
                        👤 Account <span style="font-size: 12px;">▼</span>
                    </button>
                    
                    <div id="accountMenu" class="modal-content" style="
                        position: absolute;
                        top: 100%;
                        right: 0;
                        margin-top: 10px;
                        min-width: 250px;
                        display: none;
                        z-index: 1000;
                        padding: var(--space-lg);
                    ">
                        <!-- User Info -->
                        <div style="margin-bottom: var(--space-md); text-align: center;">
                            <div class="heading-md" id="accountUsername">Username</div>
                            <div class="coin-display">
                                <span class="coin-icon">🪙</span>
                                <span id="accountCoins">0</span> coins
                            </div>
                        </div>
                        
                        <!-- Menu Options -->
                        <div style="display: flex; flex-direction: column; gap: var(--space-xs);">
                            <button onclick="showProfile()" class="btn btn-glass" style="width: 100%; justify-content: flex-start;">
                                📊 View Profile
                            </button>
                            <button onclick="showSettings()" class="btn btn-glass" style="width: 100%; justify-content: flex-start;">
                                ⚙️ Settings
                            </button>
                            <hr style="border: 1px solid rgba(255, 255, 255, 0.1); margin: var(--space-sm) 0;">
                            <button onclick="logout(); hideAccountMenu();" class="btn" style="
                                width: 100%; 
                                justify-content: flex-start;
                                background: rgba(239, 68, 68, 0.1);
                                color: #EF4444;
                                border: 1px solid rgba(239, 68, 68, 0.3);
                            ">
                                🚪 Logout
                            </button>
                        </div>
                    </div>
                </div>
                
                <button id="loginBtn" class="btn btn-secondary hover-lift" onclick="showLogin()">
                    🚀 Get Started
                </button>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        
        <!-- User Stats Section -->
        <div id="userStatsSection" class="animate-fade-in-up" style="display: none;">
            <div class="text-center mb-4">
                <h2 class="heading-lg">
                    Welcome back, <span class="text-gradient" id="welcomeUsername"></span>! 🎯
                </h2>
                <p class="text-muted">Your performance dashboard</p>
            </div>
            
            <div class="stats-grid animate-stagger">
                <div class="stat-card hover-lift">
                    <div class="stat-value" id="userScore">0</div>
                    <div class="stat-label">Total Score</div>
                </div>
                
                <div class="stat-card hover-lift">
                    <div class="stat-value" id="userAccuracy">0%</div>
                    <div class="stat-label">Accuracy</div>
                </div>
                
                <div class="stat-card hover-lift">
                    <div class="stat-value" id="userStreak">0</div>
                    <div class="stat-label">Win Streak</div>
                </div>
                
                <div class="stat-card hover-lift" onclick="showCommunity()" style="cursor: pointer;">
                    <div class="stat-value">💬</div>
                    <div class="stat-label">Community</div>
                    <div class="text-muted" style="font-size: 0.8rem; margin-top: var(--space-xs);">
                        Share & discuss picks
                    </div>
                </div>
            </div>
        </div>

        <!-- Tournament Banner -->
        <div id="tournamentBanner" class="tournament-banner animate-fade-in-up" style="display: none;">
            <h2 class="tournament-title">
                🏆 <span id="tournamentName">Weekend Warrior #1</span> - LIVE!
            </h2>
            
            <div class="tournament-stats">
                <div class="tournament-stat">
                    <div class="tournament-stat-label">Prize Pool</div>
                    <div class="tournament-stat-value" id="tournamentPrizePool">500 coins</div>
                </div>
                <div class="tournament-stat">
                    <div class="tournament-stat-label">Participants</div>
                    <div class="tournament-stat-value" id="tournamentParticipants">0 / 1000</div>
                </div>
                <div class="tournament-stat">
                    <div class="tournament-stat-label">Time Left</div>
                    <div class="tournament-stat-value" id="tournamentTimeLeft">2 days 15h</div>
                </div>
                <div class="tournament-stat">
                    <div class="tournament-stat-label">Your Rank</div>
                    <div class="tournament-stat-value" id="tournamentUserRank">Not Joined</div>
                </div>
            </div>
            
            <div class="tournament-actions">
                <button id="joinTournamentBtn" class="btn btn-secondary hover-lift" onclick="joinTournament()">
                    🚀 Join Tournament (FREE!)
                </button>
                <button class="btn btn-glass hover-lift" onclick="toggleTournamentLeaderboard()">
                    📊 View Leaderboard
                </button>
            </div>
        </div>

        <!-- Mini Tournament Leaderboard -->
        <div id="miniTournamentLeaderboard" class="card animate-fade-in-up" style="display: none;">
            <h3 class="heading-md">🏆 Tournament Leaderboard</h3>
            <div id="tournamentRankings">
                <!-- Rankings will be populated by JavaScript -->
            </div>
        </div>

        <!-- Games Section -->
        <div class="card card-premium animate-fade-in-up">
            <div class="games-header">
                <div>
                    <h2 class="heading-lg">Today's Games 🎯</h2>
                    <p class="text-muted">Make your predictions and share your insights</p>
                </div>
                
                <div class="games-controls">
                    <div id="pickStatus" class="pick-status">0 picks made</div>
                    
                    <button onclick="quickFillRandom()" class="btn btn-glass hover-lift">
                        ⚡ Quick Fill
                    </button>
                    
                    <button onclick="clearAllPicks()" class="btn" style="
                        background: rgba(239, 68, 68, 0.1);
                        color: #EF4444;
                        border: 1px solid rgba(239, 68, 68, 0.3);
                    " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                        🗑️ Clear All
                    </button>
                    
                    <button onclick="resetSubmittedGames()" class="btn btn-primary hover-lift">
                        🔄 Reset Submitted
                    </button>
                </div>
            </div>
            
            <div id="gamesContainer" class="animate-stagger">
                <!-- Games will be loaded here -->
            </div>
            
            <button id="submitPicksBtn" onclick="submitAllPicks()" class="btn hover-lift" style="
                width: 100%;
                padding: var(--space-lg);
                margin-top: var(--space-xl);
                background: rgba(156, 163, 175, 0.1);
                color: #9CA3AF;
                border: 1px solid rgba(156, 163, 175, 0.3);
                cursor: not-allowed;
                font-size: 1.1rem;
            " disabled>
                Submit All Picks
            </button>
        </div>

        <!-- Enhanced Leaderboard -->
        <div class="leaderboard-container animate-fade-in-up">
            <div class="leaderboard-header">
                <h2 class="leaderboard-title">🏆 Champions Hall</h2>
                
                <!-- Period Info -->
                <div id="leaderboardPeriodInfo" class="card" style="
                    background: rgba(255, 255, 255, 0.05);
                    padding: var(--space-lg);
                    margin-bottom: var(--space-lg);
                ">
                    <div style="font-weight: 600; margin-bottom: var(--space-xs);">
                        Monthly Reset: <span class="text-gradient" id="monthlyCountdown">23d 15h 42m</span>
                    </div>
                    <div class="text-muted">🏆 Top 3 win coins! 🥇500 🥈300 🥉200</div>
                </div>
                
                <!-- Leaderboard Tabs -->
                <div class="leaderboard-tabs">
                    <button class="leaderboard-tab active hover-lift" onclick="switchLeaderboard('alltime')">
                        👑 All-Time
                    </button>
                    <button class="leaderboard-tab hover-lift" onclick="switchLeaderboard('monthly')">
                        📅 Monthly
                    </button>
                    <button class="leaderboard-tab hover-lift" onclick="switchLeaderboard('weekly')">
                        ⚡ Weekly
                    </button>
                    <button class="leaderboard-tab hover-lift" onclick="switchLeaderboard('tournament')">
                        🏆 Tournament
                    </button>
                </div>
            </div>
            
            <!-- Leaderboard Content -->
            <div id="leaderboardContent" class="animate-stagger">
                <div style="text-align: center; padding: var(--space-2xl);">
                    <div class="loading-skeleton" style="height: 50px; margin-bottom: var(--space-md);"></div>
                    <div style="color: rgba(255, 255, 255, 0.7);">Loading champions...</div>
                </div>
            </div>
        </div>

        <!-- Debug Tools Section (Enhanced) -->
        <div class="card" style="
            background: rgba(249, 115, 22, 0.05);
            border: 1px solid rgba(249, 115, 22, 0.2);
            border-left: 4px solid var(--primary-orange);
        ">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--space-lg); flex-wrap: wrap; gap: var(--space-md);">
                <div>
                    <h4 class="heading-md">🔧 Scoring System Debug Tools</h4>
                    <p class="text-muted">Test and debug the automatic scoring system</p>
                </div>
                <div id="debugStatus" class="status-indicator">
                    Ready for testing
                </div>
            </div>
            
            <div style="display: flex; gap: var(--space-sm); flex-wrap: wrap;">
                <button onclick="stepByStepTest()" class="btn hover-lift" style="
                    background: rgba(220, 38, 38, 0.1);
                    color: #DC2626;
                    border: 1px solid rgba(220, 38, 38, 0.3);
                ">
                    🎯 Full Debug Test
                </button>
                
                <button onclick="forceProcessing()" class="btn hover-lift" style="
                    background: rgba(124, 58, 237, 0.1);
                    color: #7C3AED;
                    border: 1px solid rgba(124, 58, 237, 0.3);
                ">
                    🚀 Force Processing
                </button>
                
                <button onclick="debugScoringSystem()" class="btn hover-lift" style="
                    background: rgba(5, 150, 105, 0.1);
                    color: #059669;
                    border: 1px solid rgba(5, 150, 105, 0.3);
                ">
                    🔍 Debug Only
                </button>
                
                <button onclick="checkMyResults()" class="btn hover-lift" style="
                    background: rgba(234, 88, 12, 0.1);
                    color: #EA580C;
                    border: 1px solid rgba(234, 88, 12, 0.3);
                ">
                    📋 Check My Results
                </button>
            </div>
        </div>

    </main>

    <!-- Modals -->
    
    <!-- Login Modal -->
    <div id="loginModal" class="modal">
        <div class="modal-content">
            <button onclick="hideLogin()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title">Join FinalScore ✨</h2>
                <p class="text-muted">Start your prediction journey</p>
            <div id="messageArea" class="notification" style="position: relative; display: none; margin-bottom: var(--space-lg);"></div>
            
            <!-- Tab System -->
            <div style="display: flex; margin-bottom: var(--space-lg); background: rgba(255, 255, 255, 0.05); border-radius: var(--radius-md); padding: var(--space-xs);">
                <button id="loginTab" class="btn btn-primary" style="flex: 1; margin: 0;" onclick="switchToLogin()">Login</button>
                <button id="registerTab" class="btn btn-glass" style="flex: 1; margin: 0;" onclick="switchToRegister()">Register</button>
            </div>
            
            <!-- Login Form -->
            <div id="loginForm">
                <div class="form-group">
                    <label class="form-label">Username:</label>
                    <input type="text" id="loginUsername" class="form-input" placeholder="Enter your username" />
                </div>
                <div class="form-group">
                    <label class="form-label">Password:</label>
                    <input type="password" id="loginPassword" class="form-input" placeholder="Enter your password" />
                </div>
                <button id="loginButton" onclick="attemptLogin()" class="btn btn-primary hover-lift" style="width: 100%;">
                    🚀 Login
                </button>
            </div>
            
            <!-- Register Form -->
            <div id="registerForm" style="display: none;">
                <div class="form-group">
                    <label class="form-label">Username:</label>
                    <input type="text" id="registerUsername" class="form-input" placeholder="Choose a username" />
                </div>
                <div class="form-group">
                    <label class="form-label">Email:</label>
                    <input type="email" id="registerEmail" class="form-input" placeholder="Enter your email" />
                </div>
                <div class="form-group">
                    <label class="form-label">Password:</label>
                    <input type="password" id="registerPassword" class="form-input" placeholder="Create a password" />
                </div>
                <button id="registerButton" onclick="attemptRegister()" class="btn btn-secondary hover-lift" style="width: 100%;">
                    ✨ Create Account
                </button>
            </div>
            
            <!-- Test Accounts Info -->
            <div class="card" style="margin-top: var(--space-lg); background: rgba(6, 182, 212, 0.05); border: 1px solid rgba(6, 182, 212, 0.2);">
                <div style="font-weight: 600; margin-bottom: var(--space-xs); color: var(--primary-teal);">🧪 Test Accounts:</div>
                <div style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.8);">
                    <strong>demo</strong> / demo123<br>
                    <strong>test</strong> / test123
                </div>
            </div>
        </div>
    </div>

    <!-- Pick Details Modal -->
    <div id="pickDetailsModal" class="modal">
        <div class="modal-content">
            <button onclick="hidePickDetails()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title" id="pickDetailsTitle">Share Your Prediction</h2>
                <p class="text-muted">Add confidence and reasoning to your pick</p>
            </div>
            
            <!-- Selected Pick Display -->
            <div class="form-group">
                <label class="form-label">Your Pick:</label>
                <div id="selectedPickDisplay" class="card" style="
                    background: rgba(16, 185, 129, 0.1);
                    border: 2px solid rgba(16, 185, 129, 0.3);
                    color: var(--primary-green);
                    font-weight: 600;
                    text-align: center;
                    padding: var(--space-lg);
                "></div>
            </div>
            
            <!-- Confidence Level -->
            <div class="form-group">
                <label class="form-label">Confidence Level:</label>
                <div id="confidenceStars" style="display: flex; gap: var(--space-xs); margin-bottom: var(--space-sm); justify-content: center;">
                    <span onclick="setConfidence(1)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(2)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(3)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(4)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(5)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                </div>
                <div id="confidenceLabel" class="text-muted text-center">Click stars to set confidence</div>
            </div>
            
            <!-- Reasoning -->
            <div class="form-group">
                <label class="form-label">Share Your Reasoning (Optional):</label>
                <textarea id="pickReasoning" class="form-input" style="height: 120px; resize: vertical;" placeholder="Why are you confident in this pick? Share your analysis..."></textarea>
                <div class="text-muted" style="font-size: 0.85rem; margin-top: var(--space-xs);">
                    💰 Earn 5 coins for sharing detailed reasoning!
                </div>
            </div>
            
            <!-- Actions -->
            <div style="display: flex; gap: var(--space-md);">
                <button onclick="confirmPick()" class="btn btn-success hover-lift" style="flex: 1;">
                    ✅ Confirm Pick
                </button>
                <button onclick="hidePickDetails()" class="btn btn-glass hover-lift">
                    ❌ Cancel
                </button>
            </div>
        </div>
    </div>

    <!-- Community Modal -->
    <div id="communityModal" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <button onclick="hideCommunity()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title">💬 Community Predictions</h2>
                <p class="text-muted">See what other players are thinking</p>
            </div>
            <div id="communityContent" style="max-height: 500px; overflow-y: auto;">
                <!-- Community content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Achievements Modal -->
    <div id="achievementsModal" class="modal">
        <div class="modal-content" style="max-width: 700px;">
            <button onclick="hideAchievements()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title">🏆 Your Achievements</h2>
                <p class="text-muted">Track your progress and unlock rewards</p>
            </div>
            <div id="achievementsGrid" style="
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                gap: var(--space-lg);
                max-height: 500px;
                overflow-y: auto;
            ">
                <!-- Achievements will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Floating Action Button -->
    <button class="fab hover-lift" onclick="showCommunity()" title="Community">
        💬
    </button>

    <!-- Notification Container -->
    <div id="notificationContainer" style="
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
        max-width: 350px;
    "></div>

    <!-- Enhanced JavaScript Integration -->
    <script>
        // Premium UI Enhancement Functions
        
        // Enhanced notification system
        function showNotification(message, type = 'info', duration = 4000) {
            const container = document.getElementById('notificationContainer');
            
            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `
                <div style="display: flex; align-items: center; gap: var(--space-sm);">
                    <div style="font-size: 1.2rem;">
                        ${type === 'success' ? '✅' : type === 'warning' ? '⚠️' : type === 'error' ? '❌' : 'ℹ️'}
                    </div>
                    <div style="flex: 1;">${message}</div>
                    <button onclick="this.parentElement.parentElement.remove()" style="
                        background: none;
                        border: none;
                        color: currentColor;
                        cursor: pointer;
                        font-size: 1.2rem;
                        opacity: 0.7;
                        transition: opacity 0.3s ease;
                    " onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0.7'">×</button>
                </div>
            `;
            
            container.appendChild(notification);
            
            // Animate in
            setTimeout(() => notification.classList.add('show'), 100);
            
            // Auto remove
            const timeoutId = setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, duration);
            
            // Click to dismiss
            notification.onclick = () => {
                clearTimeout(timeoutId);
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            };
        }

        // Enhanced game card rendering
        function createGameCard(game) {
            const { countdown, status, isExpired } = getGameCountdownDetailed(game.StartTime);
            const isPickingDisabled = isExpired || status === 'live' || status === 'starting-soon';
            
            return `
                <div class="game-card hover-lift animate-fade-in-up" style="${isPickingDisabled ? 'opacity: 0.8;' : ''}">
                    ${isPickingDisabled ? `
                        <div class="status-indicator ${status}" style="position: absolute; top: var(--space-lg); left: var(--space-lg); z-index: 10;">
                            ${status === 'live' ? '🔴 LIVE' : status === 'starting-soon' ? '⏰ STARTING' : '🔒 CLOSED'}
                        </div>
                    ` : ''}
                    
                    <div class="game-header">
                        <h3 class="game-title">${game.TeamA} vs ${game.TeamB}</h3>
                        <div class="game-meta">
                            <span class="league-badge">${game.League}</span>
                            <span class="countdown-badge ${status === 'live' ? 'live' : ''}" id="countdown_${game.id}">
                                ${countdown}
                            </span>
                        </div>
                    </div>
                    
                    ${game.StartTime ? `
                        <div class="card" style="
                            background: rgba(6, 182, 212, 0.05);
                            border: 1px solid rgba(6, 182, 212, 0.2);
                            border-left: 4px solid var(--primary-teal);
                            padding: var(--space-md);
                            margin-bottom: var(--space-lg);
                        ">
                            <div style="font-size: 0.85rem; color: var(--primary-teal); font-weight: 600;">
                                🕐 Game Time: ${formatGameTime(game.StartTime)}
                            </div>
                        </div>
                    ` : `
                        <div class="card" style="
                            background: rgba(249, 115, 22, 0.05);
                            border: 1px solid rgba(249, 115, 22, 0.2);
                            border-left: 4px solid var(--primary-orange);
                            padding: var(--space-md);
                            margin-bottom: var(--space-lg);
                        ">
                            <div style="font-size: 0.85rem; color: var(--primary-orange); font-weight: 600;">
                                ⏰ Game Time: To Be Determined
                            </div>
                        </div>
                    `}
                    
                    <!-- Winner Pick Section -->
                    <div class="pick-section">
                        <div class="pick-header">
                            <div class="pick-indicator"></div>
                            <div class="pick-title">Pick the Winner</div>
                            ${isPickingDisabled ? '<span class="status-indicator closed">🔒 Picks Closed</span>' : ''}
                        </div>
                        <div class="pick-options">
                            <button onclick="selectPick(${game.id}, 'winner', '${game.TeamA}')" 
                                    id="pick_${game.id}_winner_${game.TeamA}" 
                                    class="pick-button hover-lift" 
                                    ${isPickingDisabled ? 'disabled' : ''}>
                                ${game.TeamA}
                            </button>
                            <button onclick="selectPick(${game.id}, 'winner', '${game.TeamB}')" 
                                    id="pick_${game.id}_winner_${game.TeamB}" 
                                    class="pick-button hover-lift" 
                                    ${isPickingDisabled ? 'disabled' : ''}>
                                ${game.TeamB}
                            </button>
                        </div>
                    </div>
                    
                    <!-- Total Points Pick Section -->
                    <div class="pick-section">
                        <div class="pick-header">
                            <div class="pick-indicator"></div>
                            <div class="pick-title">Total Points (${game.TotalLine || '220.5'})</div>
                            ${isPickingDisabled ? '<span class="status-indicator closed">🔒 Picks Closed</span>' : ''}
                        </div>
                        <div class="pick-options">
                            <button onclick="selectPick(${game.id}, 'total', 'Over')" 
                                    id="pick_${game.id}_total_Over" 
                                    class="pick-button hover-lift" 
                                    ${isPickingDisabled ? 'disabled' : ''}>
                                Over ${game.TotalLine || '220.5'}
                            </button>
                            <button onclick="selectPick(${game.id}, 'total', 'Under')" 
                                    id="pick_${game.id}_total_Under" 
                                    class="pick-button hover-lift" 
                                    ${isPickingDisabled ? 'disabled' : ''}>
                                Under ${game.TotalLine || '220.5'}
                            </button>
                        </div>
                    </div>
                    
                    ${(game.SpreadA && game.SpreadA !== '' && game.SpreadA !== '-3.5') ? `
                    <!-- Spread Pick Section -->
                    <div class="pick-section">
                        <div class="pick-header">
                            <div class="pick-indicator"></div>
                            <div class="pick-title">Point Spread</div>
                            ${isPickingDisabled ? '<span class="status-indicator closed">🔒 Picks Closed</span>' : ''}
                        </div>
                        <div class="pick-options">
                            <button onclick="selectPick(${game.id}, 'spread', '${game.TeamA} ${game.SpreadA}')" 
                                    id="pick_${game.id}_spread_${game.TeamA}" 
                                    class="pick-button hover-lift" 
                                    ${isPickingDisabled ? 'disabled' : ''}>
                                ${game.TeamA} ${game.SpreadA}
                            </button>
                            <button onclick="selectPick(${game.id}, 'spread', '${game.TeamB} ${game.SpreadB}')" 
                                    id="pick_${game.id}_spread_${game.TeamB}" 
                                    class="pick-button hover-lift" 
                                    ${isPickingDisabled ? 'disabled' : ''}>
                                ${game.TeamB} ${game.SpreadB}
                            </button>
                        </div>
                    </div>
                    ` : ''}
                </div>
            `;
        }

        // Enhanced pick visual update
        function updatePickVisual(gameId, pickType, selection) {
            const allButtons = document.querySelectorAll(`[id^="pick_${gameId}_${pickType}_"]`);
            allButtons.forEach(btn => {
                btn.classList.remove('selected');
                btn.style.background = '';
                btn.style.borderColor = '';
                btn.style.boxShadow = '';
            });
            
            const selectedButton = document.getElementById(`pick_${gameId}_${pickType}_${selection}`);
            if (selectedButton) {
                selectedButton.classList.add('selected');
            }
        }

        // Enhanced submit button update
        function updateSubmitButton() {
            const totalMadePicks = Object.values(userPicks || {}).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            const submitBtn = document.getElementById('submitPicksBtn');
            
            if (!submitBtn) return;
            
            submitBtn.disabled = totalMadePicks === 0;
            submitBtn.textContent = `Submit ${totalMadePicks > 0 ? totalMadePicks : 'All'} Pick${totalMadePicks !== 1 ? 's' : ''}`;
            
            if (totalMadePicks > 0) {
                submitBtn.style.background = 'var(--gradient-success)';
                submitBtn.style.borderColor = 'var(--primary-green)';
                submitBtn.style.color = 'white';
                submitBtn.style.cursor = 'pointer';
                submitBtn.style.boxShadow = 'var(--glow-teal)';
                submitBtn.classList.add('hover-lift');
            } else {
                submitBtn.style.background = 'rgba(156, 163, 175, 0.1)';
                submitBtn.style.borderColor = 'rgba(156, 163, 175, 0.3)';
                submitBtn.style.color = '#9CA3AF';
                submitBtn.style.cursor = 'not-allowed';
                submitBtn.style.boxShadow = 'none';
                submitBtn.classList.remove('hover-lift');
            }
        }

        // Enhanced pick status update
        function updatePickStatus() {
            const totalPossiblePicks = (todaysGames || []).length * 2;
            const totalMadePicks = Object.values(userPicks || {}).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            
            const pickStatus = document.getElementById('pickStatus');
            if (!pickStatus) return;
            
            pickStatus.textContent = `${totalMadePicks}/${totalPossiblePicks} picks made`;
            
            const percentage = totalPossiblePicks > 0 ? totalMadePicks / totalPossiblePicks : 0;
            
            if (percentage === 0) {
                pickStatus.style.background = 'rgba(156, 163, 175, 0.1)';
                pickStatus.style.borderColor = 'rgba(156, 163, 175, 0.3)';
                pickStatus.style.color = '#9CA3AF';
            } else if (percentage < 0.5) {
                pickStatus.style.background = 'rgba(249, 115, 22, 0.1)';
                pickStatus.style.borderColor = 'rgba(249, 115, 22, 0.3)';
                pickStatus.style.color = 'var(--primary-orange)';
            } else if (percentage < 1) {
                pickStatus.style.background = 'rgba(6, 182, 212, 0.1)';
                pickStatus.style.borderColor = 'rgba(6, 182, 212, 0.3)';
                pickStatus.style.color = 'var(--primary-teal)';
            } else {
                pickStatus.style.background = 'rgba(16, 185, 129, 0.1)';
                pickStatus.style.borderColor = 'rgba(16, 185, 129, 0.3)';
                pickStatus.style.color = 'var(--primary-green)';
            }
        }

        // Initialize premium UI on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Add stagger animation to elements as they load
            const animateElements = document.querySelectorAll('.animate-stagger > *');
            animateElements.forEach((el, index) => {
                el.style.animationDelay = `${0.1 * (index + 1)}s`;
            });
            
            // Initialize tooltips and enhanced interactions
            console.log('🎨 Premium UI System Initialized!');
            console.log('✨ Enhanced animations, interactions, and styling active!');
        });

        console.log('🚀 Premium FinalScore Platform - Complete Visual Experience Ready!');
    </script>

</body>
</html>
        
<!-- MISSING HTML MODALS - COMPLETE MODAL STRUCTURES -->
<!-- Insert this AFTER </main> and BEFORE your existing <script> tags -->

    <!-- Login Modal -->
    <div id="loginModal" class="modal">
        <div class="modal-content">
            <button onclick="hideLogin()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title">Join FinalScore ✨</h2>
                <p class="text-muted">Start your prediction journey</p>
            </div>
            
            <div id="messageArea" class="notification" style="position: relative; display: none; margin-bottom: var(--space-lg);"></div>
            
            <!-- Tab System -->
            <div style="display: flex; margin-bottom: var(--space-lg); background: rgba(255, 255, 255, 0.05); border-radius: var(--radius-md); padding: var(--space-xs);">
                <button id="loginTab" class="btn btn-primary" style="flex: 1; margin: 0;" onclick="switchToLogin()">Login</button>
                <button id="registerTab" class="btn btn-glass" style="flex: 1; margin: 0;" onclick="switchToRegister()">Register</button>
            </div>
            
            <!-- Login Form -->
            <div id="loginForm">
                <div class="form-group">
                    <label class="form-label">Username:</label>
                    <input type="text" id="loginUsername" class="form-input" placeholder="Enter your username" />
                </div>
                <div class="form-group">
                    <label class="form-label">Password:</label>
                    <input type="password" id="loginPassword" class="form-input" placeholder="Enter your password" />
                </div>
                <button id="loginButton" onclick="attemptLogin()" class="btn btn-primary hover-lift" style="width: 100%;">
                    🚀 Login
                </button>
            </div>
            
            <!-- Register Form -->
            <div id="registerForm" style="display: none;">
                <div class="form-group">
                    <label class="form-label">Username:</label>
                    <input type="text" id="registerUsername" class="form-input" placeholder="Choose a username" />
                </div>
                <div class="form-group">
                    <label class="form-label">Email:</label>
                    <input type="email" id="registerEmail" class="form-input" placeholder="Enter your email" />
                </div>
                <div class="form-group">
                    <label class="form-label">Password:</label>
                    <input type="password" id="registerPassword" class="form-input" placeholder="Create a password" />
                </div>
                <button id="registerButton" onclick="attemptRegister()" class="btn btn-secondary hover-lift" style="width: 100%;">
                    ✨ Create Account
                </button>
            </div>
            
            <!-- Test Accounts Info -->
            <div class="card" style="margin-top: var(--space-lg); background: rgba(6, 182, 212, 0.05); border: 1px solid rgba(6, 182, 212, 0.2);">
                <div style="font-weight: 600; margin-bottom: var(--space-xs); color: var(--primary-teal);">🧪 Test Accounts:</div>
                <div style="font-size: 0.9rem; color: rgba(255, 255, 255, 0.8);">
                    <strong>demo</strong> / demo123<br>
                    <strong>test</strong> / test123
                </div>
            </div>
        </div>
    </div>

    <!-- Pick Details Modal -->
    <div id="pickDetailsModal" class="modal">
        <div class="modal-content">
            <button onclick="hidePickDetails()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title" id="pickDetailsTitle">Share Your Prediction</h2>
                <p class="text-muted">Add confidence and reasoning to your pick</p>
            </div>
            
            <!-- Selected Pick Display -->
            <div class="form-group">
                <label class="form-label">Your Pick:</label>
                <div id="selectedPickDisplay" class="card" style="
                    background: rgba(16, 185, 129, 0.1);
                    border: 2px solid rgba(16, 185, 129, 0.3);
                    color: var(--primary-green);
                    font-weight: 600;
                    text-align: center;
                    padding: var(--space-lg);
                "></div>
            </div>
            
            <!-- Confidence Level -->
            <div class="form-group">
                <label class="form-label">Confidence Level:</label>
                <div id="confidenceStars" style="display: flex; gap: var(--space-xs); margin-bottom: var(--space-sm); justify-content: center;">
                    <span onclick="setConfidence(1)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(2)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(3)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(4)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                    <span onclick="setConfidence(5)" style="font-size: 2rem; cursor: pointer; color: #374151; transition: all 0.3s ease;" onmouseover="this.style.transform='scale(1.2)'" onmouseout="this.style.transform='scale(1)'">☆</span>
                </div>
                <div id="confidenceLabel" class="text-muted text-center">Click stars to set confidence</div>
            </div>
            
            <!-- Reasoning -->
            <div class="form-group">
                <label class="form-label">Share Your Reasoning (Optional):</label>
                <textarea id="pickReasoning" class="form-input" style="height: 120px; resize: vertical;" placeholder="Why are you confident in this pick? Share your analysis..."></textarea>
                <div class="text-muted" style="font-size: 0.85rem; margin-top: var(--space-xs);">
                    💰 Earn 5 coins for sharing detailed reasoning!
                </div>
            </div>
            
            <!-- Actions -->
            <div style="display: flex; gap: var(--space-md);">
                <button onclick="confirmPick()" class="btn btn-success hover-lift" style="flex: 1;">
                    ✅ Confirm Pick
                </button>
                <button onclick="hidePickDetails()" class="btn btn-glass hover-lift">
                    ❌ Cancel
                </button>
            </div>
        </div>
    </div>

    <!-- Community Modal -->
    <div id="communityModal" class="modal">
        <div class="modal-content" style="max-width: 800px;">
            <button onclick="hideCommunity()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title">💬 Community Predictions</h2>
                <p class="text-muted">See what other players are thinking</p>
            </div>
            <div id="communityContent" style="max-height: 500px; overflow-y: auto;">
                <!-- Community content will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Achievements Modal -->
    <div id="achievementsModal" class="modal">
        <div class="modal-content" style="max-width: 700px;">
            <button onclick="hideAchievements()" class="modal-close">×</button>
            <div class="modal-header">
                <h2 class="modal-title">🏆 Your Achievements</h2>
                <p class="text-muted">Track your progress and unlock rewards</p>
            </div>
            <div id="achievementsGrid" style="
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                gap: var(--space-lg);
                max-height: 500px;
                overflow-y: auto;
            ">
                <!-- Achievements will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Floating Action Button -->
    <button class="fab hover-lift" onclick="showCommunity()" title="Community">
        💬
    </button>

    <!-- Notification Container -->
    <div id="notificationContainer" style="
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        gap: var(--space-sm);
        max-width: 350px;
    "></div>

    <script>
        // Configuration
        const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbxSa-TaDy6Engy7O012H-lN4LRPGH1EhbABjwksagS_ESs2OEX0-dZ21dZyxtig3Kzh/exec';
        
        let allUsers = [];
        let currentUser = null;
        let todaysGames = [];
        let userPicks = {};
        let userAchievements = [];
        let totalPicksMade = 0;
        let communityPicks = [];
        let currentPickDetails = null;
        let userCoins = 0;
        let likedPicks = new Set();
        let submittedGames = new Set();
let currentTournament = null;
let userTournamentData = null;
let tournamentLeaderboard = [];

         // 🔧 ENHANCED: Better achievement conditions with debugging
        const ACHIEVEMENTS_FIXED = {
            firstShare: { 
                id: 'firstShare', 
                name: 'First Insight', 
                description: 'Shared your first pick reasoning!', 
                icon: '💭', 
                color: '#10b981', 
                coinReward: 10, 
                condition: () => {
                    const count = communityPicks.filter(p => p.username === currentUser?.username && p.reasoning).length;
                    console.log('firstShare check:', count >= 1, 'count:', count);
                    return count >= 1;
                }
            },
            socialButterfly: { 
                id: 'socialButterfly', 
                name: 'Social Butterfly', 
                description: 'Shared reasoning for 5 picks!', 
                icon: '🦋', 
                color: '#ec4899', 
                coinReward: 25, 
                condition: () => {
                    const count = communityPicks.filter(p => p.username === currentUser?.username && p.reasoning).length;
                    console.log('socialButterfly check:', count >= 5, 'count:', count);
                    return count >= 5;
                }
            },
            confident: { 
                id: 'confident', 
                name: 'Supremely Confident', 
                description: 'Made a 5-star confidence pick!', 
                icon: '⭐', 
                color: '#f59e0b', 
                coinReward: 15, 
                condition: () => {
                    const count = communityPicks.filter(p => p.username === currentUser?.username && p.confidence === 5).length;
                    console.log('confident check:', count >= 1, 'count:', count);
                    return count >= 1;
                }
            },
            firstPick: { 
                id: 'firstPick', 
                name: 'First Steps', 
                description: 'Made your first pick!', 
                icon: '🎯', 
                color: '#10b981', 
                coinReward: 5, 
                condition: () => {
                    console.log('firstPick check:', totalPicksMade >= 1, 'totalPicks:', totalPicksMade);
                    return totalPicksMade >= 1;
                }
            },
            quickStarter: { 
                id: 'quickStarter', 
                name: 'Quick Starter', 
                description: 'Made 5 picks in one session!', 
                icon: '⚡', 
                color: '#f59e0b', 
                coinReward: 15, 
                condition: () => {
                    console.log('quickStarter check:', totalPicksMade >= 5, 'totalPicks:', totalPicksMade);
                    return totalPicksMade >= 5;
                }
            },
            pickMaster: { 
                id: 'pickMaster', 
                name: 'Pick Master', 
                description: 'Made 10 picks total!', 
                icon: '🏆', 
                color: '#8b5cf6', 
                coinReward: 30, 
                condition: () => {
                    console.log('pickMaster check:', totalPicksMade >= 10, 'totalPicks:', totalPicksMade);
                    return totalPicksMade >= 10;
                }
            },
            streakStarter: { 
                id: 'streakStarter', 
                name: 'On Fire', 
                description: 'Reached a 3-game win streak!', 
                icon: '🔥', 
                color: '#ef4444', 
                coinReward: 20, 
                condition: () => {
                    const streak = currentUser?.streak || 0;
                    console.log('streakStarter check:', streak >= 3, 'streak:', streak);
                    return streak >= 3;
                }
            },
            streakMaster: { 
                id: 'streakMaster', 
                name: 'Unstoppable', 
                description: 'Reached a 5-game win streak!', 
                icon: '🌟', 
                color: '#fbbf24', 
                coinReward: 50, 
                condition: () => {
                    const streak = currentUser?.streak || 0;
                    console.log('streakMaster check:', streak >= 5, 'streak:', streak);
                    return streak >= 5;
                }
            },
            accurateShooter: { 
                id: 'accurateShooter', 
                name: 'Sharp Shooter', 
                description: 'Maintained 80%+ accuracy!', 
                icon: '🎯', 
                color: '#06b6d4', 
                coinReward: 40, 
                condition: () => {
                    const accuracy = currentUser?.accuracy || 0;
                    console.log('accurateShooter check:', accuracy >= 80, 'accuracy:', accuracy);
                    return accuracy >= 80;
                }
            },
            centurion: { 
                id: 'centurion', 
                name: 'Centurion', 
                description: 'Reached 100 points!', 
                icon: '💯', 
                color: '#ec4899', 
                coinReward: 25, 
                condition: () => {
                    const score = currentUser?.score || 0;
                    console.log('centurion check:', score >= 100, 'score:', score);
                    return score >= 100;
                }
            }
        };

const ACHIEVEMENTS = ACHIEVEMENTS_FIXED;

// 🔧 TEST FUNCTIONS for debugging
        function testAchievements() {
            console.log('=== TESTING ACHIEVEMENTS SYSTEM ===');
            
            if (!currentUser) {
                console.log('❌ Please login first');
                return;
            }
            
            console.log('Current user:', currentUser);
            console.log('User achievements:', userAchievements);
            console.log('Total picks made:', totalPicksMade);
            console.log('Community picks from user:', communityPicks.filter(p => p.username === currentUser.username));
            
            // Test each achievement condition
            Object.values(ACHIEVEMENTS_FIXED).forEach(achievement => {
                const canUnlock = achievement.condition();
                console.log(`${achievement.name}: ${canUnlock ? '✅ CAN UNLOCK' : '❌ Cannot unlock yet'}`);
            });
            
            // Force check achievements
            checkAchievements();
            
            // Update modal
            updateAchievementsModal();
        }

        function unlockTestAchievement() {
            if (!currentUser) {
                console.log('❌ Please login first');
                return;
            }
            
            // Simulate conditions for testing
            totalPicksMade = 5; // This should unlock firstPick and quickStarter
            
            // Add a test community pick
            communityPicks.unshift({
                id: Date.now(),
                username: currentUser.username,
                gameTitle: 'Test Game',
                pickType: 'winner',
                selection: 'Test Team',
                pickDisplay: 'Test Team',
                reasoning: 'This is a test reasoning for achievement',
                confidence: 5,
                timestamp: new Date().toLocaleString(),
                likes: 0
            });
            
            console.log('🧪 Test conditions set up - checking achievements...');
            checkAchievements();
        }

        // Replace the global ACHIEVEMENTS with the fixed version
        if (typeof ACHIEVEMENTS !== 'undefined') {
            Object.assign(ACHIEVEMENTS, ACHIEVEMENTS_FIXED);
        }

        console.log('🏆 Achievements system fixed and ready!');
        
        // Auto-test if user is logged in
        if (typeof currentUser !== 'undefined' && currentUser) {
            setTimeout(() => {
                console.log('🔍 Auto-checking achievements for logged in user...');
                checkAchievements();
            }, 2000);
        }

       // 🔧 STEP 8: Update initializeApp to load community picks
        function initializeApp() {
            console.log('Initializing FinalScore Platform...');
            loadUsers();
            loadTodaysGames();
            loadCommunityPicks(); // Load from Google Sheets instead of demo data
            updateLeaderboard();
        }
// 🔧 STEP 9: Load liked picks from localStorage (optional enhancement)
        function loadLikedPicks() {
            if (currentUser) {
                const savedLikes = localStorage.getItem(`likedPicks_${currentUser.username}`);
                if (savedLikes) {
                    likedPicks = new Set(JSON.parse(savedLikes));
                }
            }
        }
// 🔧 STEP 10: Save liked picks to localStorage (optional enhancement)
        function saveLikedPicks() {
            if (currentUser) {
                localStorage.setItem(`likedPicks_${currentUser.username}`, JSON.stringify([...likedPicks]));
            }
        }
// Enhanced Modal Management
function showLogin() {
    document.getElementById('loginModal').classList.add('show');
    document.body.style.overflow = 'hidden';
}

function hideLogin() {
    document.getElementById('loginModal').classList.remove('show');
    document.body.style.overflow = 'auto';
}

function switchToLogin() {
    document.getElementById('loginForm').style.display = 'block';
    document.getElementById('registerForm').style.display = 'none';
    document.getElementById('loginTab').className = 'btn btn-primary';
    document.getElementById('registerTab').className = 'btn btn-glass';
}

function switchToRegister() {
    document.getElementById('loginForm').style.display = 'none';
    document.getElementById('registerForm').style.display = 'block';
    document.getElementById('loginTab').className = 'btn btn-glass';
    document.getElementById('registerTab').className = 'btn btn-primary';
}

// Enhanced Account Management
function toggleAccountMenu() {
    const menu = document.getElementById('accountMenu');
    const isVisible = menu.style.display === 'block';
    menu.style.display = isVisible ? 'none' : 'block';
    
    if (!isVisible) {
        // Update account info when opening
        updateAccountDisplay();
    }
}

function hideAccountMenu() {
    document.getElementById('accountMenu').style.display = 'none';
}

function updateAccountDisplay() {
    if (currentUser) {
        document.getElementById('accountUsername').textContent = currentUser.username;
        document.getElementById('accountCoins').textContent = calculateUserCoins(currentUser).toLocaleString();
    }
}

// Enhanced Pick Details Modal
let currentPickDetails = {};

function showPickDetails(gameId, pickType, selection, gameTitle) {
    currentPickDetails = { gameId, pickType, selection, gameTitle };
    
    document.getElementById('pickDetailsTitle').textContent = `Confirm Your ${pickType.toUpperCase()} Pick`;
    document.getElementById('selectedPickDisplay').textContent = `${gameTitle}: ${selection}`;
    document.getElementById('pickDetailsModal').classList.add('show');
    document.body.style.overflow = 'hidden';
    
    // Reset form
    setConfidence(3); // Default to 3 stars
    document.getElementById('pickReasoning').value = '';
}

function hidePickDetails() {
    document.getElementById('pickDetailsModal').classList.remove('show');
    document.body.style.overflow = 'auto';
    currentPickDetails = {};
}

function setConfidence(level) {
    const stars = document.querySelectorAll('#confidenceStars span');
    const labels = ['', 'Not confident', 'Somewhat confident', 'Confident', 'Very confident', 'Lock of the day!'];
    
    stars.forEach((star, index) => {
        if (index < level) {
            star.textContent = '★';
            star.style.color = '#FCD34D';
            star.style.textShadow = '0 0 10px rgba(252, 211, 77, 0.5)';
        } else {
            star.textContent = '☆';
            star.style.color = '#374151';
            star.style.textShadow = 'none';
        }
    });
    
    document.getElementById('confidenceLabel').textContent = labels[level];
    currentPickDetails.confidence = level;
}

function confirmPick() {
    const reasoning = document.getElementById('pickReasoning').value.trim();
    
    // Add the pick
    if (!userPicks[currentPickDetails.gameId]) {
        userPicks[currentPickDetails.gameId] = {};
    }
    userPicks[currentPickDetails.gameId][currentPickDetails.pickType] = currentPickDetails.selection;
    
    // Update visual
    updatePickVisual(currentPickDetails.gameId, currentPickDetails.pickType, currentPickDetails.selection);
    updatePickStatus();
    updateSubmitButton();
    
    // Save community pick if reasoning provided
    if (reasoning.length > 10) {
        saveCommunityPickData({
            gameTitle: currentPickDetails.gameTitle,
            pickType: currentPickDetails.pickType,
            selection: currentPickDetails.selection,
            reasoning: reasoning,
            confidence: currentPickDetails.confidence || 3
        });
        
        showNotification('Pick saved and shared with community! +5 coins earned! 🪙', 'success');
    } else {
        showNotification(`${currentPickDetails.pickType.toUpperCase()} pick confirmed: ${currentPickDetails.selection}`, 'success');
    }
    
    hidePickDetails();
}

// Enhanced Community Modal
function showCommunity() {
    document.getElementById('communityModal').classList.add('show');
    document.body.style.overflow = 'hidden';
    loadCommunityContent();
}

function hideCommunity() {
    document.getElementById('communityModal').classList.remove('show');
    document.body.style.overflow = 'auto';
}

function loadCommunityContent() {
    const container = document.getElementById('communityContent');
    container.innerHTML = `
        <div style="text-align: center; padding: var(--space-xl);">
            <div class="loading-skeleton" style="height: 60px; margin-bottom: var(--space-md);"></div>
            <div class="loading-skeleton" style="height: 40px; margin-bottom: var(--space-md);"></div>
            <div class="loading-skeleton" style="height: 80px;"></div>
        </div>
    `;
    
    // Load community picks
    setTimeout(() => {
        if (communityPicks && communityPicks.length > 0) {
            displayCommunityPicks();
        } else {
            container.innerHTML = `
                <div style="text-align: center; padding: var(--space-xl); color: rgba(255, 255, 255, 0.7);">
                    <div style="font-size: 3rem; margin-bottom: var(--space-lg);">💬</div>
                    <h3 style="margin-bottom: var(--space-md);">No community picks yet!</h3>
                    <p>Be the first to share your predictions with detailed reasoning.</p>
                </div>
            `;
        }
    }, 1000);
}

function displayCommunityPicks() {
    const container = document.getElementById('communityContent');
    
    const html = communityPicks.map(pick => `
        <div class="card hover-lift" style="margin-bottom: var(--space-lg);">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: var(--space-md);">
                <div>
                    <div style="font-weight: 600; color: white; margin-bottom: var(--space-xs);">
                        ${pick.Username} 
                        <span class="achievement-badge" style="margin-left: var(--space-xs);">
                            ${'★'.repeat(pick.Confidence || 3)}
                        </span>
                    </div>
                    <div style="color: var(--primary-teal); font-weight: 600;">
                        ${pick.GameTitle}: ${pick.PickDisplay}
                    </div>
                </div>
                <div style="text-align: right;">
                    <button onclick="toggleLike('${pick.ID}')" class="btn btn-glass" style="padding: var(--space-xs) var(--space-sm);">
                        ❤️ ${pick.Likes || 0}
                    </button>
                </div>
            </div>
            
            ${pick.Reasoning ? `
                <div style="
                    background: rgba(255, 255, 255, 0.05);
                    border-left: 4px solid var(--primary-purple);
                    padding: var(--space-md);
                    border-radius: var(--radius-md);
                    font-style: italic;
                    color: rgba(255, 255, 255, 0.9);
                ">
                    "${pick.Reasoning}"
                </div>
            ` : ''}
            
            <div style="
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-top: var(--space-md);
                font-size: 0.85rem;
                color: rgba(255, 255, 255, 0.6);
            ">
                <span>🕐 ${formatTimeAgo(pick.Timestamp)}</span>
                <span>🎯 ${pick.PickType.toUpperCase()}</span>
            </div>
        </div>
    `).join('');
    
    container.innerHTML = html;
}

// Enhanced Achievements Modal
function showAchievements() {
    document.getElementById('achievementsModal').classList.add('show');
    document.body.style.overflow = 'hidden';
    loadAchievementsContent();
}

function hideAchievements() {
    document.getElementById('achievementsModal').classList.remove('show');
    document.body.style.overflow = 'auto';
}

function loadAchievementsContent() {
    const container = document.getElementById('achievementsGrid');
    
    const achievements = [
        {
            id: 'firstPick',
            title: 'First Steps',
            description: 'Make your first prediction',
            icon: '🎯',
            unlocked: userAchievements.firstPick || false,
            progress: Math.min(Object.keys(userPicks || {}).length, 1),
            target: 1
        },
        {
            id: 'quickStarter',
            title: 'Quick Starter',
            description: 'Make 5 predictions in your first day',
            icon: '⚡',
            unlocked: userAchievements.quickStarter || false,
            progress: Math.min(Object.keys(userPicks || {}).length, 5),
            target: 5
        },
        {
            id: 'firstShare',
            title: 'First Insight',
            description: 'Share your first detailed reasoning',
            icon: '💡',
            unlocked: userAchievements.firstShare || false,
            progress: (communityPicks || []).filter(p => p.Username === (currentUser?.username)).length,
            target: 1
        },
        {
            id: 'socialButterfly',
            title: 'Social Butterfly',
            description: 'Share 10 detailed predictions',
            icon: '🦋',
            unlocked: userAchievements.socialButterfly || false,
            progress: (communityPicks || []).filter(p => p.Username === (currentUser?.username)).length,
            target: 10
        },
        {
            id: 'centurion',
            title: 'Centurion',
            description: 'Reach 100 total points',
            icon: '💯',
            unlocked: userAchievements.centurion || false,
            progress: Math.min(parseInt(currentUser?.score || 0), 100),
            target: 100
        },
        {
            id: 'accurateShooter',
            title: 'Sharp Shooter',
            description: 'Achieve 80% accuracy with 10+ picks',
            icon: '🎯',
            unlocked: userAchievements.accurateShooter || false,
            progress: parseInt(currentUser?.accuracy || 0),
            target: 80
        }
    ];
    
    const html = achievements.map(achievement => `
        <div class="card ${achievement.unlocked ? 'card-success' : ''}" style="
            ${achievement.unlocked ? 'border-color: var(--primary-green); box-shadow: var(--glow-teal);' : 'opacity: 0.7;'}
            transition: all 0.3s ease;
        ">
            <div style="text-align: center; margin-bottom: var(--space-md);">
                <div style="font-size: 3rem; margin-bottom: var(--space-sm);">${achievement.icon}</div>
                <h4 style="font-weight: 700; margin-bottom: var(--space-xs); color: ${achievement.unlocked ? 'var(--primary-green)' : 'white'};">
                    ${achievement.title}
                </h4>
                <p style="color: rgba(255, 255, 255, 0.8); font-size: 0.9rem;">
                    ${achievement.description}
                </p>
            </div>
            
            <div style="margin-bottom: var(--space-md);">
                <div style="display: flex; justify-content: space-between; margin-bottom: var(--space-xs);">
                    <span style="font-size: 0.85rem; color: rgba(255, 255, 255, 0.7);">Progress</span>
                    <span style="font-size: 0.85rem; font-weight: 600;">${achievement.progress}/${achievement.target}</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${Math.min((achievement.progress / achievement.target) * 100, 100)}%;"></div>
                </div>
            </div>
            
            ${achievement.unlocked ? `
                <div style="
                    background: rgba(16, 185, 129, 0.1);
                    border: 1px solid rgba(16, 185, 129, 0.3);
                    color: var(--primary-green);
                    padding: var(--space-sm);
                    border-radius: var(--radius-md);
                    text-align: center;
                    font-weight: 600;
                    font-size: 0.9rem;
                ">
                    ✅ UNLOCKED!
                </div>
            ` : `
                <div style="
                    background: rgba(156, 163, 175, 0.1);
                    border: 1px solid rgba(156, 163, 175, 0.3);
                    color: #9CA3AF;
                    padding: var(--space-sm);
                    border-radius: var(--radius-md);
                    text-align: center;
                    font-weight: 600;
                    font-size: 0.9rem;
                ">
                    🔒 LOCKED
                </div>
            `}
        </div>
    `).join('');
    
    container.innerHTML = html;
}

// Enhanced User Interface Functions
function showUserInterface() {
    // Show user-specific elements
    document.getElementById('userStatsSection').style.display = 'block';
    document.getElementById('accountDropdown').style.display = 'block';
    document.getElementById('achievementsBtn').style.display = 'block';
    document.getElementById('loginBtn').style.display = 'none';
    
    // Update user display
    document.getElementById('welcomeUsername').textContent = currentUser.username;
    document.getElementById('userScore').textContent = parseInt(currentUser.score || 0).toLocaleString();
    document.getElementById('userAccuracy').textContent = `${currentUser.accuracy || 0}%`;
    document.getElementById('userStreak').textContent = currentUser.streak || 0;
    
    // Update account button
    document.getElementById('accountBtn').innerHTML = `
        <div style="display: flex; align-items: center; gap: var(--space-xs);">
            <span>👤 ${currentUser.username}</span>
            <div class="coin-display" style="margin-left: var(--space-xs); font-size: 0.85rem;">
                <span class="coin-icon">🪙</span>
                <span>${calculateUserCoins(currentUser).toLocaleString()}</span>
            </div>
            <span style="font-size: 12px;">▼</span>
        </div>
    `;
    
    showNotification(`Welcome back, ${currentUser.username}! 🎉`, 'success');
}

// Enhanced Utility Functions
function formatTimeAgo(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diffInHours = Math.floor((now - time) / (1000 * 60 * 60));
    
    if (diffInHours < 1) return 'Just now';
    if (diffInHours < 24) return `${diffInHours}h ago`;
    return `${Math.floor(diffInHours / 24)}d ago`;
}

function formatGameTime(startTime) {
    return new Date(startTime).toLocaleString('en-US', {
        weekday: 'short',
        month: 'short',
        day: 'numeric',
        hour: 'numeric',
        minute: '2-digit',
        hour12: true
    });
}

function calculateUserCoins(user) {
    const baseCoins = 100;
    const scoreBonus = Math.floor(parseInt(user.score || 0) * 2);
    const achievementBonus = Object.values(userAchievements || {}).filter(Boolean).length * 25;
    return baseCoins + scoreBonus + achievementBonus;
}

// Enhanced Pick Management
function selectPick(gameId, pickType, selection) {
    const gameTitle = todaysGames.find(g => g.id == gameId)?.TeamA + ' vs ' + todaysGames.find(g => g.id == gameId)?.TeamB;
    
    // Show pick details modal for community sharing
    showPickDetails(gameId, pickType, selection, gameTitle);
}

function quickFillRandom() {
    if (!todaysGames || todaysGames.length === 0) {
        showNotification('No games available for quick fill', 'warning');
        return;
    }
    
    todaysGames.forEach(game => {
        // Random winner pick
        const winnerOptions = [game.TeamA, game.TeamB];
        const randomWinner = winnerOptions[Math.floor(Math.random() * winnerOptions.length)];
        
        // Random total pick
        const totalOptions = ['Over', 'Under'];
        const randomTotal = totalOptions[Math.floor(Math.random() * totalOptions.length)];
        
        if (!userPicks[game.id]) {
            userPicks[game.id] = {};
        }
        
        userPicks[game.id]['winner'] = randomWinner;
        userPicks[game.id]['total'] = randomTotal;
        
        // Update visuals
        updatePickVisual(game.id, 'winner', randomWinner);
        updatePickVisual(game.id, 'total', randomTotal);
    });
    
    updatePickStatus();
    updateSubmitButton();
    showNotification('All picks filled randomly! 🎲', 'success');
}

function clearAllPicks() {
    userPicks = {};
    
    // Clear all visual selections
    document.querySelectorAll('.pick-button.selected').forEach(btn => {
        btn.classList.remove('selected');
    });
    
    updatePickStatus();
    updateSubmitButton();
    showNotification('All picks cleared! 🗑️', 'warning');
}

// Enhanced Profile Functions
function showProfile() {
    hideAccountMenu();
    showNotification('Profile feature coming soon! 👤', 'info');
}

function showSettings() {
    hideAccountMenu();
    showNotification('Settings feature coming soon! ⚙️', 'info');
}

// Close dropdowns when clicking outside
document.addEventListener('click', function(event) {
    const accountDropdown = document.getElementById('accountDropdown');
    const accountMenu = document.getElementById('accountMenu');
    
    if (accountDropdown && !accountDropdown.contains(event.target)) {
        hideAccountMenu();
    }
});

// Enhanced initialization
function initializePremiumUI() {
    console.log('🎨 Premium UI initialized');
    
    // Add smooth scrolling
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Initialize tooltips and interactions
    document.querySelectorAll('.hover-lift').forEach(el => {
        el.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-3px)';
        });
        
        el.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0)';
        });
    });
    
    // Animate elements on scroll
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);
    
    document.querySelectorAll('.card, .game-card').forEach(el => {
        el.style.opacity = '0';
        el.style.transform = 'translateY(20px)';
        el.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(el);
    });
}

// Initialize on DOM load
document.addEventListener('DOMContentLoaded', function() {
    initializePremiumUI();
});

console.log('🚀 Complete Premium Implementation Loaded!');
console.log('✨ All modals, interactions, and enhanced features ready!');

</script>

<!-- Additional CSS for mobile optimization -->
<style>
/* Mobile-first responsive enhancements */
@media (max-width: 640px) {
    .header-content {
        padding: var(--space-md);
    }
    
    .logo {
        font-size: 1.75rem;
    }
    
    .main-content {
        padding: var(--space-lg) var(--space-md);
    }
    
    .modal-content {
        margin: var(--space-md);
        width: calc(100% - 2rem);
    }
    
    .tournament-actions {
        flex-direction: column;
    }
    
    .btn {
        padding: var(--space-md) var(--space-lg);
    }
    
    .games-controls {
        flex-direction: column;
        align-items: stretch;
    }
    
    .fab {
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        font-size: 1.2rem;
    }
}

/* Enhanced focus states for accessibility */
.btn:focus,
.form-input:focus,
.pick-button:focus {
    outline: 2px solid var(--primary-yellow);
    outline-offset: 2px;
}

/* Loading animations */
@keyframes fadeInScale {
    from {
        opacity: 0;
        transform: scale(0.95);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

.modal.show .modal-content {
    animation: fadeInScale 0.3s ease-out;
}

/* Print styles */
@media print {
    .fab,
    .modal,
    .btn,
    .header {
        display: none !important;
    }
    
    body {
        background: white !important;
        color: black !important;
    }
}


        function loadExistingPicks() {
            if (!currentUser) return;
            
            try {
                console.log('Loading existing picks from Google Sheets...');
                
                fetch(`${APPS_SCRIPT_URL}?action=getPicks`)
                .then(response => response.text())
                .then(csvData => {
                    console.log('Picks CSV Response:', csvData);
                    const lines = csvData.trim().split('\n');
                    if (lines.length <= 1) {
                        console.log('No existing picks found');
                        return;
                    }
                    
                    const headers = lines[0].split(',');
                    const userGamePicks = new Set();
                    
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            const values = lines[i].split(',');
                            const pick = {};
                            headers.forEach((header, index) => {
                                pick[header.trim()] = values[index] ? values[index].trim().replace(/"/g, '') : '';
                            });
                            
                            if (pick.Username === currentUser.username && pick.GameID) {
                                userGamePicks.add(parseInt(pick.GameID));
                            }
                        }
                    }
                    
                    submittedGames = userGamePicks;
                    console.log(`Current user (${currentUser.username}) has submitted picks for games:`, Array.from(submittedGames));
                })
                .catch(error => {
                    console.error('Error loading existing picks:', error);
                });
                
            } catch (error) {
                console.error('Error loading existing picks:', error);
            }
        }

     // Enhanced selectPick function with time validation
function selectPick(gameId, pickType, selection) {
    if (!currentUser) {
        showLogin();
        showNotification('Please login to save your picks', 'warning');
        return;
    }
    
    // Check if game is still available for picking
    const game = todaysGames.find(g => g.id == gameId);
    if (game && game.StartTime) {
        const { isExpired, status } = getGameCountdownDetailed(game.StartTime);
        if (isExpired) {
            showNotification(`Picks are closed! Game has ${status === 'live' ? 'started' : 'already begun'}.`, 'warning');
            return;
        }
    }
    
    let pickDisplay = selection;
    
    // Create better display text based on pick type
    if (pickType === 'total') {
        const totalLine = game.TotalLine || game.totalLine || '220.5';
        pickDisplay = `${selection} ${totalLine}`;
    } else if (pickType === 'spread') {
        pickDisplay = selection; // Already formatted like "Lakers -3.5"
    }
    
    currentPickDetails = {
        gameId,
        pickType,
        selection,
        gameTitle: `${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`,
        pickDisplay: pickDisplay
    };
    
    showPickDetails();
}

        function showPickDetails() {
            document.getElementById('pickDetailsTitle').textContent = `${currentPickDetails.gameTitle} - ${currentPickDetails.pickType === 'winner' ? 'Winner' : 'Total Points'}`;
            document.getElementById('selectedPickDisplay').textContent = currentPickDetails.pickDisplay;
            document.getElementById('pickReasoning').value = '';
            resetConfidenceStars();
            document.getElementById('pickDetailsModal').style.display = 'flex';
        }

        function hidePickDetails() {
            document.getElementById('pickDetailsModal').style.display = 'none';
            currentPickDetails = null;
        }

        function setConfidence(level) {
            currentPickDetails.confidence = level;
            updateConfidenceDisplay(level);
        }

        function resetConfidenceStars() {
            document.querySelectorAll('#confidenceStars span').forEach(star => {
                star.style.color = '#d1d5db';
                star.innerHTML = '☆';
            });
            document.getElementById('confidenceLabel').textContent = 'Click stars to set confidence';
        }

        function updateConfidenceDisplay(level) {
            const stars = document.querySelectorAll('#confidenceStars span');
            const labels = ['', 'Not confident', 'Somewhat confident', 'Confident', 'Very confident', 'Extremely confident'];
            
            stars.forEach((star, index) => {
                if (index < level) {
                    star.style.color = '#f59e0b';
                    star.innerHTML = '★';
                } else {
                    star.style.color = '#d1d5db';
                    star.innerHTML = '☆';
                }
            });
            
            document.getElementById('confidenceLabel').textContent = labels[level] || 'Click stars to set confidence';
        }

         // 🔧 STEP 1: Enhanced confirmPick function - saves to Google Sheets
        function confirmPick() {
            if (!currentPickDetails.confidence) {
                showNotification('Please set a confidence level!', 'warning');
                return;
            }
            
            const reasoning = document.getElementById('pickReasoning').value.trim();
            
            if (!userPicks[currentPickDetails.gameId]) {
                userPicks[currentPickDetails.gameId] = {};
            }
            
            userPicks[currentPickDetails.gameId][currentPickDetails.pickType] = currentPickDetails.selection;
            totalPicksMade = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            
            // If user shared reasoning, save to Google Sheets
            if (reasoning) {
                const communityPick = {
                    id: Date.now(),
                    username: currentUser.username,
                    gameTitle: currentPickDetails.gameTitle,
                    pickType: currentPickDetails.pickType,
                    selection: currentPickDetails.selection,
                    pickDisplay: currentPickDetails.pickDisplay,
                    reasoning: reasoning,
                    confidence: currentPickDetails.confidence,
                    timestamp: new Date().toISOString(), // Use ISO format for consistency
                    likes: 0,
                    likedBy: '' // Comma-separated list of usernames who liked
                };
                
                // Add to local array first (for immediate display)
                communityPicks.unshift(communityPick);
                updateCommunityFeed();
                
                // Save to Google Sheets
                saveCommunityPickToSheets(communityPick);
                
                awardCoins(5, 'Shared pick reasoning!');
            }
            
            updatePickVisual(currentPickDetails.gameId, currentPickDetails.pickType, currentPickDetails.selection);
            
            const pickInfo = `${currentPickDetails.pickType === 'winner' ? 'Winner' : 'Total'}: ${currentPickDetails.selection}`;
            showNotification(`Pick confirmed: ${pickInfo} (${currentPickDetails.confidence}⭐)`, 'pick', 3000);
            
            updatePickStatus();
            updateSubmitButton();
            checkAchievements();
            hidePickDetails();
        }

async function saveCommunityPickToSheets(communityPick) {
            try {
                console.log('💾 Saving community pick to Google Sheets...', communityPick);
                
                const formData = new URLSearchParams({
                    action: 'saveCommunityPick',
                    id: communityPick.id,
                    username: communityPick.username,
                    gameTitle: communityPick.gameTitle,
                    pickType: communityPick.pickType,
                    selection: communityPick.selection,
                    pickDisplay: communityPick.pickDisplay,
                    reasoning: communityPick.reasoning,
                    confidence: communityPick.confidence,
                    timestamp: communityPick.timestamp,
                    likes: communityPick.likes,
                    likedBy: communityPick.likedBy
                });
                
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData
                });
                
                if (response.ok) {
                    const result = await response.text();
                    console.log('✅ Community pick saved to Google Sheets:', result);
                } else {
                    throw new Error('Failed to save community pick');
                }
                
            } catch (error) {
                console.error('❌ Error saving community pick to Google Sheets:', error);
                showNotification('Community pick saved locally only (Google Sheets unavailable)', 'warning', 3000);
            }
        }


        function updatePickVisual(gameId, pickType, selection) {
            const allButtons = document.querySelectorAll(`[id^="pick_${gameId}_${pickType}_"]`);
            allButtons.forEach(btn => {
                btn.style.background = 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)';
                btn.style.borderColor = '#e2e8f0';
                btn.style.color = '#334155';
            });
            
            const selectedButton = document.getElementById(`pick_${gameId}_${pickType}_${selection}`);
            if (selectedButton) {
                selectedButton.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
                selectedButton.style.borderColor = '#10b981';
                selectedButton.style.color = 'white';
                selectedButton.style.boxShadow = '0 4px 15px rgba(16, 185, 129, 0.3)';
            }
        }

      function loadDemoCommunityPicks() {
            communityPicks = [
                {
                    id: 1, 
                    username: 'ProBettor', 
                    gameTitle: 'Lakers vs Warriors', 
                    pickType: 'winner', 
                    selection: 'Lakers', 
                    pickDisplay: 'Lakers',
                    reasoning: 'LeBron is back from injury and the Lakers have been dominating at home. Warriors missing key players.',
                    confidence: 4, 
                    timestamp: '2 hours ago', 
                    likes: 12,
                    likedBy: 'demo,test,user1'
                },
                {
                    id: 2, 
                    username: 'SportsAnalyst', 
                    gameTitle: 'Chiefs vs Bills', 
                    pickType: 'total', 
                    selection: 'Over', 
                    pickDisplay: 'Over 45.5',
                    reasoning: 'Both teams have explosive offenses. Weather looks good for passing. I expect a shootout!',
                    confidence: 5, 
                    timestamp: '4 hours ago', 
                    likes: 8,
                    likedBy: 'demo,challenge'
                }
            ];
            updateCommunityFeed();
        }
 async function loadCommunityPicks() {
            try {
                console.log('📥 Loading community picks from Google Sheets...');
                
                const response = await fetch(`${APPS_SCRIPT_URL}?action=getCommunityPicks&cacheBust=${Date.now()}`);
                const csvData = await response.text();
                
                console.log('Community picks CSV:', csvData);
                
                if (!csvData || csvData.includes('Error') || csvData.trim() === '') {
                    console.log('No community picks found, using demo data');
                    loadDemoCommunityPicks();
                    return;
                }
                
                // Parse CSV data
                const lines = csvData.trim().split('\n');
                const headers = lines[0].split(',');
                
                communityPicks = [];
                
                for (let i = 1; i < lines.length; i++) {
                    if (lines[i].trim()) {
                        const values = parseCSVLine(lines[i]);
                        const pick = {};
                        
                        headers.forEach((header, index) => {
                            const value = values[index] ? values[index].trim().replace(/"/g, '') : '';
                            pick[header.trim().toLowerCase()] = value;
                        });
                        
                        // Convert to proper format
                        const communityPick = {
                            id: parseInt(pick.id) || Date.now(),
                            username: pick.username || '',
                            gameTitle: pick.gametitle || '',
                            pickType: pick.picktype || '',
                            selection: pick.selection || '',
                            pickDisplay: pick.pickdisplay || '',
                            reasoning: pick.reasoning || '',
                            confidence: parseInt(pick.confidence) || 3,
                            timestamp: formatTimestamp(pick.timestamp),
                            likes: parseInt(pick.likes) || 0,
                            likedBy: pick.likedby || ''
                        };
                        
                        communityPicks.push(communityPick);
                    }
                }
                
                // Sort by timestamp (newest first)
                communityPicks.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                
                console.log(`✅ Loaded ${communityPicks.length} community picks from Google Sheets`);
                updateCommunityFeed();
                
            } catch (error) {
                console.error('❌ Error loading community picks:', error);
                loadDemoCommunityPicks();
            }
        }

function formatTimestamp(timestamp) {
            if (!timestamp) return 'Unknown time';
            
            try {
                const date = new Date(timestamp);
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / 60000);
                const diffHours = Math.floor(diffMs / 3600000);
                const diffDays = Math.floor(diffMs / 86400000);
                
                if (diffMins < 1) return 'Just now';
                if (diffMins < 60) return `${diffMins} minute${diffMins === 1 ? '' : 's'} ago`;
                if (diffHours < 24) return `${diffHours} hour${diffHours === 1 ? '' : 's'} ago`;
                if (diffDays < 7) return `${diffDays} day${diffDays === 1 ? '' : 's'} ago`;
                
                return date.toLocaleDateString();
            } catch (e) {
                return timestamp;
            }
        }


        function updateCommunityFeed() {
            const communityContent = document.getElementById('communityContent');
            
            if (!currentUser) return;
            
            if (communityPicks.length === 0) {
                const emptyMessage = `<div style="text-align: center !important; color: #666 !important; padding: 40px !important;"><div style="font-size: 48px !important; margin-bottom: 15px !important;">💭</div><p>No community insights yet. Be the first to share your reasoning!</p></div>`;
                if (communityContent) communityContent.innerHTML = emptyMessage;
                return;
            }
            
            const fullHTML = communityPicks.map(pick => createCommunityPickHTML(pick)).join('');
            if (communityContent) communityContent.innerHTML = fullHTML;
        }

        function createCommunityPickHTML(pick) {
            const isLiked = likedPicks.has(pick.id) || 
                           (pick.likedBy && pick.likedBy.split(',').includes(currentUser?.username));
            
            return `<div style="background: white !important; border: 2px solid #e5e7eb !important; border-radius: 12px !important; padding: 20px !important; margin-bottom: 15px !important; transition: all 0.3s ease !important;" onmouseover="this.style.borderColor='#667eea'" onmouseout="this.style.borderColor='#e5e7eb'">
                <div style="display: flex !important; justify-content: space-between !important; align-items: flex-start !important; margin-bottom: 15px !important; flex-wrap: wrap !important; gap: 10px !important;">
                    <div>
                        <div style="display: flex !important; align-items: center !important; gap: 10px !important; margin-bottom: 5px !important;">
                            <span style="font-weight: bold !important; color: #667eea !important;">${pick.username}</span>
                            <div style="display: flex !important; gap: 2px !important;">
                                ${Array(pick.confidence).fill('★').join('')}${Array(5 - pick.confidence).fill('☆').join('')}
                            </div>
                        </div>
                        <div style="font-size: 14px !important; color: #666 !important;">${pick.timestamp}</div>
                    </div>
                    <div style="background: linear-gradient(135deg, #10b981 0%, #059669 100%) !important; color: white !important; padding: 6px 12px !important; border-radius: 20px !important; font-size: 12px !important; font-weight: bold !important;">${pick.pickDisplay}</div>
                </div>
                <div style="background: #f8fafc !important; padding: 15px !important; border-radius: 8px !important; margin-bottom: 15px !important; border-left: 4px solid #667eea !important;">
                    <div style="font-weight: bold !important; margin-bottom: 8px !important; color: #1f2937 !important;">${pick.gameTitle} - ${pick.pickType === 'winner' ? 'Winner Pick' : 'Total Points'}</div>
                    <div style="color: #4b5563 !important; line-height: 1.5 !important;">"${pick.reasoning}"</div>
                </div>
                <div style="display: flex !important; justify-content: space-between !important; align-items: center !important;">
                    <button onclick="likePick(${pick.id})" style="display: flex !important; align-items: center !important; gap: 5px !important; background: ${isLiked ? '#f59e0b' : 'none'} !important; border: 2px solid ${isLiked ? '#f59e0b' : '#e5e7eb'} !important; color: ${isLiked ? 'white' : '#666'} !important; border-radius: 20px !important; padding: 8px 16px !important; cursor: ${isLiked ? 'not-allowed' : 'pointer'} !important; font-weight: bold !important;">👍 ${pick.likes} ${isLiked ? '(Liked)' : ''}</button>
                    <div style="font-size: 12px !important; color: #666 !important;">💰 +5 coins for sharing insights</div>
                </div>
            </div>`;
        }

       async function likePick(pickId) {
            if (!currentUser) {
                showNotification('Please login to like picks!', 'warning');
                return;
            }
            
            if (likedPicks.has(pickId)) {
                showNotification('You already liked this pick!', 'warning', 2000);
                return;
            }
            
            const pick = communityPicks.find(p => p.id === pickId);
            if (!pick) {
                showNotification('Pick not found!', 'error');
                return;
            }
            
            // Update locally first
            pick.likes++;
            likedPicks.add(pickId);
            
            // Update likedBy list
            const likedByList = pick.likedBy ? pick.likedBy.split(',') : [];
            if (!likedByList.includes(currentUser.username)) {
                likedByList.push(currentUser.username);
                pick.likedBy = likedByList.join(',');
            }
            
            // Update UI immediately
            updateCommunityFeed();
            awardCoins(1, 'Liked a community pick!');
            showNotification('Thanks for the feedback! +1 coin', 'success', 2000);
            
            // Save to Google Sheets
            try {
                const formData = new URLSearchParams({
                    action: 'likeCommunityPick',
                    pickId: pickId,
                    username: currentUser.username,
                    newLikeCount: pick.likes,
                    likedBy: pick.likedBy
                });
                
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData
                });
                
                if (response.ok) {
                    console.log('✅ Like saved to Google Sheets');
                } else {
                    console.log('⚠️ Like saved locally only');
                }
                
            } catch (error) {
                console.error('❌ Error saving like to Google Sheets:', error);
            }
        }


        function awardCoins(amount, reason) {
            userCoins += amount;
            updateCoinDisplay();
            if (reason) {
                showNotification(`+${amount} coins: ${reason}`, 'success', 3000);
            }
        }

        function updateCoinDisplay() {
            const coinDisplays = ['userCoins', 'userCoinsDisplay', 'accountCoins'];
            coinDisplays.forEach(id => {
                const element = document.getElementById(id);
                if (element) element.textContent = userCoins;
            });
        }

        function showCommunity() {
            updateCommunityFeed();
            document.getElementById('communityModal').style.display = 'flex';
        }

        function hideCommunity() {
            document.getElementById('communityModal').style.display = 'none';
        }

 // 🔧 ENHANCED: Better achievement checking
        function checkAchievements() {
            if (!currentUser) return [];

            let newAchievements = [];
            
            // Update total picks made from actual user picks
            totalPicksMade = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            
            console.log('🔍 Checking achievements...', {
                user: currentUser.username,
                totalPicks: totalPicksMade,
                userScore: currentUser.score,
                userStreak: currentUser.streak,
                userAccuracy: currentUser.accuracy,
                communityPicks: communityPicks.filter(p => p.username === currentUser.username).length
            });
            
            for (const [key, achievement] of Object.entries(ACHIEVEMENTS)) {
                const wasUnlocked = userAchievements.includes(achievement.id);
                const isNowUnlocked = achievement.condition();
                
                console.log(`Checking ${achievement.name}: was=${wasUnlocked}, now=${isNowUnlocked}`);
                
                if (!wasUnlocked && isNowUnlocked) {
                    userAchievements.push(achievement.id);
                    newAchievements.push(achievement);
                    
                    if (achievement.coinReward) {
                        awardCoins(achievement.coinReward, `Achievement: ${achievement.name}!`);
                    }
                    
                    console.log(`🏆 NEW ACHIEVEMENT UNLOCKED: ${achievement.name}`);
                }
            }
            
            // Show notifications for new achievements
            newAchievements.forEach((achievement, index) => {
                setTimeout(() => {
                    showNotification(`🏆 Achievement Unlocked: ${achievement.name}! +${achievement.coinReward} coins`, 'success', 4000);
                }, 500 * (index + 1));
            });
            
            console.log(`✅ Achievement check complete: ${userAchievements.length} total unlocked`);
            return newAchievements;
        }

// Add this function to your JavaScript section
function parseCSV(csvData) {
    const lines = csvData.trim().split('\n');
    const headers = parseCSVLine(lines[0]);
    const result = [];
    
    for (let i = 1; i < lines.length; i++) {
        const values = parseCSVLine(lines[i]);
        const obj = {};
        
        headers.forEach((header, index) => {
            obj[header.trim()] = values[index] ? values[index].trim() : '';
        });
        
        result.push(obj);
    }
    
    return result;
}

       // FIXED VERSION - Replace your renderGames() function with this:

// Helper function to properly parse CSV lines (handles commas in quoted values)
function parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
            inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
            result.push(current);
            current = '';
        } else {
            current += char;
        }
    }
    
    result.push(current); // Add the last field
    return result;
}

function updateAchievementsModal() {
            console.log('🏆 Updating achievements modal...');
            
            if (!currentUser) {
                console.log('❌ No current user for achievements');
                return;
            }

            const achievementsGrid = document.getElementById('achievementsGrid');
            if (!achievementsGrid) {
                console.error('❌ Achievements grid not found');
                return;
            }

            // Force check achievements first
            checkAchievements();

            let achievementsHTML = '';
            let unlockedCount = 0;

            // Create achievement cards for each achievement
            Object.values(ACHIEVEMENTS).forEach(achievement => {
                const isUnlocked = userAchievements.includes(achievement.id);
                
                if (isUnlocked) {
                    unlockedCount++;
                }

                // Get progress towards achievement
                const progress = getAchievementProgress(achievement);
                
                achievementsHTML += `
                    <div style="
                        background: ${isUnlocked ? 'linear-gradient(135deg, ' + achievement.color + '20 0%, ' + achievement.color + '10 100%)' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important;
                        border: 2px solid ${isUnlocked ? achievement.color : '#e2e8f0'} !important;
                        border-radius: 12px !important;
                        padding: 20px !important;
                        text-align: center !important;
                        transition: all 0.3s ease !important;
                        opacity: ${isUnlocked ? '1' : '0.7'} !important;
                        transform: ${isUnlocked ? 'scale(1)' : 'scale(0.95)'} !important;
                    ">
                        <div style="
                            font-size: 32px !important;
                            margin-bottom: 10px !important;
                            filter: ${isUnlocked ? 'none' : 'grayscale(100%)'} !important;
                        ">${achievement.icon}</div>
                        
                        <h4 style="
                            color: ${isUnlocked ? achievement.color : '#64748b'} !important;
                            margin: 0 0 8px 0 !important;
                            font-size: 16px !important;
                            font-weight: bold !important;
                        ">${achievement.name}</h4>
                        
                        <p style="
                            color: #64748b !important;
                            font-size: 12px !important;
                            margin: 0 0 10px 0 !important;
                            line-height: 1.4 !important;
                        ">${achievement.description}</p>
                        
                        ${isUnlocked ? `
                            <div style="
                                background: ${achievement.color} !important;
                                color: white !important;
                                padding: 6px 12px !important;
                                border-radius: 15px !important;
                                font-size: 11px !important;
                                font-weight: bold !important;
                                display: inline-block !important;
                            ">
                                ✅ UNLOCKED • +${achievement.coinReward} coins
                            </div>
                        ` : `
                            <div style="
                                background: #e2e8f0 !important;
                                color: #64748b !important;
                                padding: 6px 12px !important;
                                border-radius: 15px !important;
                                font-size: 11px !important;
                                font-weight: bold !important;
                                display: inline-block !important;
                            ">
                                🔒 ${progress}
                            </div>
                        `}
                    </div>
                `;
            });

            // Add summary header
            const totalAchievements = Object.keys(ACHIEVEMENTS).length;
            const summaryHTML = `
                <div style="
                    grid-column: 1 / -1 !important;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
                    color: white !important;
                    padding: 20px !important;
                    border-radius: 12px !important;
                    text-align: center !important;
                    margin-bottom: 20px !important;
                ">
                    <h3 style="margin: 0 0 10px 0 !important;">🏆 Achievement Progress</h3>
                    <div style="font-size: 24px !important; font-weight: bold !important;">
                        ${unlockedCount} / ${totalAchievements} Unlocked
                    </div>
                    <div style="font-size: 14px !important; margin-top: 5px !important; opacity: 0.9 !important;">
                        Keep playing to unlock more achievements!
                    </div>
                </div>
            `;

            achievementsGrid.innerHTML = summaryHTML + achievementsHTML;
            
            console.log(`✅ Achievements modal updated: ${unlockedCount}/${totalAchievements} unlocked`);
        }

        // 🔧 NEW FUNCTION: Get achievement progress
        function getAchievementProgress(achievement) {
            if (!currentUser) return 'Login required';

            switch (achievement.id) {
                case 'firstPick':
                    return totalPicksMade >= 1 ? 'Ready to unlock!' : `Make your first pick (${totalPicksMade}/1)`;
                    
                case 'quickStarter':
                    return totalPicksMade >= 5 ? 'Ready to unlock!' : `Make 5 picks (${totalPicksMade}/5)`;
                    
                case 'pickMaster':
                    return totalPicksMade >= 10 ? 'Ready to unlock!' : `Make 10 picks (${totalPicksMade}/10)`;
                    
                case 'firstShare':
                    const sharedCount = communityPicks.filter(p => p.username === currentUser.username && p.reasoning).length;
                    return sharedCount >= 1 ? 'Ready to unlock!' : `Share reasoning for 1 pick (${sharedCount}/1)`;
                    
                case 'socialButterfly':
                    const socialCount = communityPicks.filter(p => p.username === currentUser.username && p.reasoning).length;
                    return socialCount >= 5 ? 'Ready to unlock!' : `Share reasoning for 5 picks (${socialCount}/5)`;
                    
                case 'confident':
                    const confidentCount = communityPicks.filter(p => p.username === currentUser.username && p.confidence === 5).length;
                    return confidentCount >= 1 ? 'Ready to unlock!' : `Make a 5-star pick (${confidentCount}/1)`;
                    
                case 'streakStarter':
                    return currentUser.streak >= 3 ? 'Ready to unlock!' : `Reach 3 win streak (${currentUser.streak}/3)`;
                    
                case 'streakMaster':
                    return currentUser.streak >= 5 ? 'Ready to unlock!' : `Reach 5 win streak (${currentUser.streak}/5)`;
                    
                case 'accurateShooter':
                    return currentUser.accuracy >= 80 ? 'Ready to unlock!' : `Reach 80% accuracy (${currentUser.accuracy}%/80%)`;
                    
                case 'centurion':
                    return currentUser.score >= 100 ? 'Ready to unlock!' : `Reach 100 points (${currentUser.score}/100)`;
                    
                default:
                    return 'Progress unknown';
            }
        }

// UPDATED: Fixed renderGames function with better debugging
function renderGames() {
    const container = document.getElementById('gamesContainer');
    container.innerHTML = '';
    
    console.log('=== RENDER GAMES DEBUG ===');
    console.log('All games:', todaysGames);
    
    // Filter games to only show upcoming games (not completed)
    const availableGames = todaysGames.filter(game => {
        console.log(`Checking game ${game.id}:`, {
            teamA: game.TeamA || game.teamA,
            teamB: game.TeamB || game.teamB,
            status: game.Status || game.status,
            startTime: game.StartTime || game.startTime
        });
        
        // Hide completed games entirely
        const gameStatus = (game.Status || game.status || '').toLowerCase();
        if (gameStatus === 'completed') {
            console.log(`❌ Hiding completed game: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
            return false;
        }
        
        // If no StartTime, show the game (you can still set StartTime later)
        const startTime = game.StartTime || game.startTime;
        if (!startTime || startTime === '') {
            console.log(`✅ Showing game without StartTime: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
            return true;
        }
        
        // Parse StartTime
        let gameTime;
        try {
            // Handle the GMT format from your CSV
            if (startTime.includes('GMT')) {
                gameTime = new Date(startTime);
            } else {
                // Try other formats
                gameTime = new Date(startTime);
                
                // If invalid, try adding current year
                if (isNaN(gameTime.getTime())) {
                    const currentYear = new Date().getFullYear();
                    gameTime = new Date(currentYear + '-' + startTime);
                }
            }
        } catch (e) {
            console.log('Error parsing StartTime:', startTime, e);
            return true; // Show game if we can't parse time
        }
        
        if (isNaN(gameTime.getTime())) {
            console.log('Invalid StartTime format:', startTime);
            return true; // Show game if time is invalid
        }
        
        const now = new Date();
        const timeDiff = gameTime.getTime() - now.getTime();
        
        console.log(`Time check for ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}:`, {
            startTime: startTime,
            parsedTime: gameTime.toISOString(),
            currentTime: now.toISOString(),
            timeDiff: timeDiff,
            showGame: timeDiff > -900000
        });
        
        // Show games that haven't started yet, or just started (within 15 minutes)
        const shouldShow = timeDiff > -900000; // -15 minutes in milliseconds
        
        if (shouldShow) {
            console.log(`✅ Showing game: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
        } else {
            console.log(`❌ Hiding old game: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
        }
        
        return shouldShow;
    });
    
    console.log('Available games after filtering:', availableGames.length);
    
    if (availableGames.length === 0) {
        container.innerHTML = `
            <div style="
                text-align: center !important;
                padding: 60px 20px !important;
                background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%) !important;
                border-radius: 15px !important;
                border: 2px dashed #cbd5e1 !important;
            ">
                <div style="font-size: 48px !important; margin-bottom: 20px !important;">⏰</div>
                <h3 style="color: #64748b !important; margin: 0 0 10px 0 !important;">No Active Games</h3>
                <p style="color: #94a3b8 !important; margin: 0 !important;">
                    All current games have started/ended or are completed. Add new games to see them here!
                </p>
                <div style="margin-top: 20px !important; padding: 15px !important; background: #f0f9ff !important; border-radius: 8px !important; border-left: 4px solid #0ea5e9 !important;">
                    <div style="font-size: 12px !important; color: #0369a1 !important;">
                        <strong>Current time:</strong> ${new Date().toLocaleString()}<br>
                        <strong>Total games in system:</strong> ${todaysGames.length}<br>
                        <strong>Completed games:</strong> ${todaysGames.filter(g => (g.Status || g.status || '').toLowerCase() === 'completed').length}
                    </div>
                </div>
            </div>
        `;
        return;
    }
    
    // Sort games by start time (earliest first)
    availableGames.sort((a, b) => {
        const timeA = a.StartTime || a.startTime;
        const timeB = b.StartTime || b.startTime;
        
        if (!timeA && !timeB) return 0;
        if (!timeA) return 1;
        if (!timeB) return -1;
        
        return new Date(timeA) - new Date(timeB);
    });
    
    availableGames.forEach((game) => {
        const gameDiv = document.createElement('div');
        const startTimeStr = game.StartTime || game.startTime;
        const { countdown, status, isExpired } = getGameCountdownDetailed(startTimeStr);
        
        // Disable picks if game has started or is about to start (< 5 minutes)
        const isPickingDisabled = isExpired || status === 'live' || status === 'starting-soon';
        
        gameDiv.style.cssText = `
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%) !important; 
            border-radius: 15px !important; 
            padding: 25px !important; 
            box-shadow: 0 4px 15px rgba(0,0,0,0.08) !important; 
            border: 2px solid ${isPickingDisabled ? '#fbbf24' : '#e5e7eb'} !important; 
            transition: all 0.3s ease !important; 
            position: relative !important; 
            overflow: hidden !important;
            margin-bottom: 20px !important;
            ${isPickingDisabled ? 'opacity: 0.8 !important;' : ''}
        `;
        
        // Auto-generate pick options based on game data
        const totalLine = game.TotalLine || game.totalLine || '220.5';
        const spreadA = game.SpreadA || game.spreadA || '-3.5';
        const spreadB = game.SpreadB || game.spreadB || '+3.5';
        
        gameDiv.innerHTML = `
            <div style="position: absolute !important; top: 0 !important; right: 0 !important; width: 60px !important; height: 60px !important; background: linear-gradient(135deg, #667eea20 0%, transparent 100%) !important; border-radius: 0 15px 0 100% !important;"></div>
            
            ${isPickingDisabled ? `
                <div style="
                    position: absolute !important;
                    top: 15px !important;
                    left: 15px !important;
                    background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%) !important;
                    color: white !important;
                    padding: 6px 12px !important;
                    border-radius: 15px !important;
                    font-size: 11px !important;
                    font-weight: bold !important;
                    text-transform: uppercase !important;
                    z-index: 10 !important;
                ">
                    ${status === 'live' ? '🔴 LIVE' : status === 'starting-soon' ? '⏰ STARTING' : '🔒 CLOSED'}
                </div>
            ` : ''}
            
            <div style="display: flex !important; justify-content: space-between !important; align-items: center !important; margin-bottom: 20px !important; flex-wrap: wrap !important; gap: 15px !important;">
                <h3 style="color: #1f2937 !important; margin: 0 !important; font-size: 20px !important; font-weight: 700 !important;">${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}</h3>
                <div style="display: flex !important; gap: 12px !important; align-items: center !important;">
                    <span style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important; color: white !important; padding: 6px 12px !important; border-radius: 15px !important; font-size: 11px !important; font-weight: bold !important; text-transform: uppercase !important;">${game.League || game.league}</span>
                    <span style="
                        background: ${getCountdownColor(status)} !important; 
                        color: white !important; 
                        padding: 6px 12px !important; 
                        border-radius: 15px !important; 
                        font-size: 11px !important; 
                        font-weight: bold !important;
                        min-width: 80px !important;
                        text-align: center !important;
                    " id="countdown_${game.id}">${countdown}</span>
                </div>
            </div>
            
            ${startTimeStr ? `
                <div style="
                    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%) !important;
                    padding: 12px 16px !important;
                    border-radius: 8px !important;
                    margin-bottom: 20px !important;
                    border-left: 4px solid #0ea5e9 !important;
                ">
                    <div style="font-size: 12px !important; color: #0369a1 !important; font-weight: bold !important;">
                        🕐 Game Time: ${formatGameTime(startTimeStr)}
                    </div>
                </div>
            ` : `
                <div style="
                    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%) !important;
                    padding: 12px 16px !important;
                    border-radius: 8px !important;
                    margin-bottom: 20px !important;
                    border-left: 4px solid #f59e0b !important;
                ">
                    <div style="font-size: 12px !important; color: #92400e !important; font-weight: bold !important;">
                        ⏰ Game Time: To Be Determined - Add StartTime to enable countdown
                    </div>
                </div>
            `}
            
            <!-- Winner Pick Section -->
            <div style="margin-bottom: 20px !important;">
                <div style="display: flex !important; align-items: center !important; margin-bottom: 12px !important; gap: 10px !important;">
                    <div style="width: 4px !important; height: 20px !important; background: linear-gradient(135deg, #10b981 0%, #059669 100%) !important; border-radius: 2px !important;"></div>
                    <strong style="color: #1f2937 !important; font-weight: 600 !important;">Pick the Winner</strong>
                    ${isPickingDisabled ? '<span style="color: #f59e0b !important; font-size: 12px !important; margin-left: 10px !important;">🔒 Picks Closed</span>' : ''}
                </div>
                <div style="display: grid !important; grid-template-columns: 1fr 1fr !important; gap: 12px !important;">
                    <button onclick="selectPick(${game.id}, 'winner', '${game.TeamA || game.teamA}')" id="pick_${game.id}_winner_${game.TeamA || game.teamA}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamA || game.teamA}</button>
                    <button onclick="selectPick(${game.id}, 'winner', '${game.TeamB || game.teamB}')" id="pick_${game.id}_winner_${game.TeamB || game.teamB}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamB || game.teamB}</button>
                </div>
            </div>
            
            <!-- Total Points Pick Section -->
            <div style="margin-bottom: 20px !important;">
                <div style="display: flex !important; align-items: center !important; margin-bottom: 12px !important; gap: 10px !important;">
                    <div style="width: 4px !important; height: 20px !important; background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%) !important; border-radius: 2px !important;"></div>
                    <strong style="color: #1f2937 !important; font-weight: 600 !important;">Total Points (${totalLine})</strong>
                    ${isPickingDisabled ? '<span style="color: #f59e0b !important; font-size: 12px !important; margin-left: 10px !important;">🔒 Picks Closed</span>' : ''}
                </div>
                <div style="display: grid !important; grid-template-columns: 1fr 1fr !important; gap: 12px !important;">
                    <button onclick="selectPick(${game.id}, 'total', 'Over')" id="pick_${game.id}_total_Over" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">Over ${totalLine}</button>
                    <button onclick="selectPick(${game.id}, 'total', 'Under')" id="pick_${game.id}_total_Under" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">Under ${totalLine}</button>
                </div>
            </div>
            
            <!-- Spread Pick Section -->
            ${(spreadA && spreadA !== '' && spreadA !== '-3.5') || (game.SpreadA || game.spreadA) ? `
            <div>
                <div style="display: flex !important; align-items: center !important; margin-bottom: 12px !important; gap: 10px !important;">
                    <div style="width: 4px !important; height: 20px !important; background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%) !important; border-radius: 2px !important;"></div>
                    <strong style="color: #1f2937 !important; font-weight: 600 !important;">Point Spread</strong>
                    ${isPickingDisabled ? '<span style="color: #f59e0b !important; font-size: 12px !important; margin-left: 10px !important;">🔒 Picks Closed</span>' : ''}
                </div>
                <div style="display: grid !important; grid-template-columns: 1fr 1fr !important; gap: 12px !important;">
                    <button onclick="selectPick(${game.id}, 'spread', '${game.TeamA || game.teamA} ${spreadA}')" id="pick_${game.id}_spread_${game.TeamA || game.teamA}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamA || game.teamA} ${spreadA}</button>
                    <button onclick="selectPick(${game.id}, 'spread', '${game.TeamB || game.teamB} ${spreadB}')" id="pick_${game.id}_spread_${game.TeamB || game.teamB}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamB || game.teamB} ${spreadB}</button>
                </div>
            </div>
            ` : ''}
        `;
        
        container.appendChild(gameDiv);
    });
    
    // Start countdown updates
    startCountdownUpdates();
}
        function updatePickStatus() {
            const totalPossiblePicks = todaysGames.length * 2;
            const totalMadePicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            
            const pickStatus = document.getElementById('pickStatus');
            pickStatus.textContent = `${totalMadePicks}/${totalPossiblePicks} picks made`;
            
            const percentage = totalMadePicks / totalPossiblePicks;
            if (percentage === 0) {
                pickStatus.style.background = 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)';
                pickStatus.style.color = '#4a5568';
                pickStatus.style.borderColor = '#e2e8f0';
            } else if (percentage < 0.5) {
                pickStatus.style.background = 'linear-gradient(135deg, #fef3c7 0%, #fde68a 100%)';
                pickStatus.style.color = '#92400e';
                pickStatus.style.borderColor = '#f59e0b';
            } else if (percentage < 1) {
                pickStatus.style.background = 'linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%)';
                pickStatus.style.color = '#1e40af';
                pickStatus.style.borderColor = '#3b82f6';
            } else {
                pickStatus.style.background = 'linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%)';
                pickStatus.style.color = '#065f46';
                pickStatus.style.borderColor = '#10b981';
            }
        }

        function updateSubmitButton() {
            const totalMadePicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            const submitBtn = document.getElementById('submitPicksBtn');
            
            submitBtn.disabled = totalMadePicks === 0;
            submitBtn.textContent = `Submit ${totalMadePicks > 0 ? totalMadePicks : 'All'} Pick${totalMadePicks !== 1 ? 's' : ''}`;
            
            if (totalMadePicks > 0) {
                submitBtn.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
                submitBtn.style.cursor = 'pointer';
            } else {
                submitBtn.style.background = 'linear-gradient(135deg, #9ca3af 0%, #6b7280 100%)';
                submitBtn.style.cursor = 'not-allowed';
            }
        }

        function showLogin() {
            document.getElementById('loginModal').style.display = 'flex';
        }

        function hideLogin() {
            document.getElementById('loginModal').style.display = 'none';
            clearMessage();
        }

        function showAchievements() {
            updateAchievementsModal();
            document.getElementById('achievementsModal').style.display = 'flex';
        }

        // 🔧 FIXED: Better hideAchievements function
        function hideAchievements() {
            const modal = document.getElementById('achievementsModal');
            const backdrop = document.getElementById('achievementsBackdrop');
            
            if (modal) {
                // Try different methods to hide
                try {
                    // Bootstrap methods
                    if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
                        const bsModal = bootstrap.Modal.getInstance(modal);
                        if (bsModal) {
                            bsModal.hide();
                            return;
                        }
                    }
                    
                    if (typeof $ !== 'undefined') {
                        $(modal).modal('hide');
                        return;
                    }
                    
                    // Manual hide
                    modal.style.display = 'none';
                    modal.classList.remove('show');
                    document.body.classList.remove('modal-open');
                    
                    if (backdrop) {
                        backdrop.remove();
                    }
                    
                } catch (error) {
                    console.error('Error hiding modal:', error);
                }
            }
        }

        function switchToLogin() {
            document.getElementById('loginTab').style.background = '#667eea';
            document.getElementById('loginTab').style.color = 'white';
            document.getElementById('registerTab').style.background = 'transparent';
            document.getElementById('registerTab').style.color = '#666';
            document.getElementById('loginForm').style.display = 'block';
            document.getElementById('registerForm').style.display = 'none';
            clearMessage();
        }

        function switchToRegister() {
            document.getElementById('registerTab').style.background = '#667eea';
            document.getElementById('registerTab').style.color = 'white';
            document.getElementById('loginTab').style.background = 'transparent';
            document.getElementById('loginTab').style.color = '#666';
            document.getElementById('registerForm').style.display = 'block';
            document.getElementById('loginForm').style.display = 'none';
            clearMessage();
        }

        async function loadUsers() {
            try {
                console.log('Loading users from Google Sheets...');
                const response = await fetch(`${APPS_SCRIPT_URL}?action=getUsers`);
                
                if (response.ok) {
                    const csvData = await response.text();
                    console.log('CSV Response:', csvData);
                    const lines = csvData.trim().split('\n');
                    const headers = lines[0].split(',');
                    
                    allUsers = [];
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            const values = lines[i].split(',');
                            const user = {};
                            headers.forEach((header, index) => {
                                user[header.trim()] = values[index] ? values[index].trim().replace(/"/g, '') : '';
                            });
                            allUsers.push(user);
                        }
                    }
                    console.log('Users loaded from Google Sheets:', allUsers.length);
                } else {
                    throw new Error('Failed to fetch from Google Sheets');
                }
                
            } catch (error) {
                console.error('Error loading users from Google Sheets, using demo data:', error);
                allUsers = [
                    { ID: '1', Username: 'demo', Email: 'demo@test.com', Password: 'demo123', Score: '150', Streak: '5', Accuracy: '75', JoinDate: '2024-01-01' },
                    { ID: '2', Username: 'test', Email: 'test@test.com', Password: 'test123', Score: '0', Streak: '0', Accuracy: '0', JoinDate: '2024-01-01' },
                    { ID: '3', Username: 'ProBettor', Email: 'pro@test.com', Password: 'pro123', Score: '320', Streak: '8', Accuracy: '85', JoinDate: '2024-01-01' },
                    { ID: '4', Username: 'SportsAnalyst', Email: 'analyst@test.com', Password: 'analyst123', Score: '275', Streak: '3', Accuracy: '80', JoinDate: '2024-01-01' }
                ];
                console.log('Using demo users as fallback');
            }
        }

        async function attemptLogin() {
            const username = document.getElementById('loginUsername').value.trim();
            const password = document.getElementById('loginPassword').value.trim();
            
            if (!username || !password) {
                showMessage('Please enter both username and password', 'error');
                return;
            }
            
            const loginButton = document.getElementById('loginButton');
            loginButton.innerHTML = 'Logging in...';
            loginButton.disabled = true;
            
            try {
                const user = allUsers.find(u => 
                    u.Username === username && u.Password === password
                );
                
                if (user) {
                    currentUser = {
                        id: user.ID,
                        username: user.Username,
                        email: user.Email,
                        score: parseInt(user.Score || 0),
                        streak: parseInt(user.Streak || 0),
                        accuracy: parseFloat(user.Accuracy || 0)
                    };
                    
                    userCoins = Math.floor(currentUser.score / 10) + 25;
                    
                    showUserInterface();
                    hideLogin();
                    showNotification(`Welcome back, ${username}! Connected to Google Sheets.`, 'success', 3000);
                    updateCommunityFeed();
                    
                    setTimeout(() => {
                        loadExistingPicks();
                    }, 500);
                } else {
                    showMessage('Invalid username or password. Try one of the test accounts below.', 'error');
                }
                
            } catch (error) {
                console.error('Login error:', error);
                showMessage('Login failed. Please try again.', 'error');
            } finally {
                loginButton.innerHTML = 'Login';
                loginButton.disabled = false;
            }
        }

// 2. Enhanced showUserInterface wrapper (RECOMMENDED - adds tournament init after login)
const originalShowUserInterface = window.showUserInterface;
window.showUserInterface = function() {
    // Call your existing showUserInterface function
    if (originalShowUserInterface) {
        originalShowUserInterface();
    }
    
    // Initialize tournament system after user logs in
    setTimeout(initializeTournamentSystem, 1000);
};

        async function attemptRegister() {
            const username = document.getElementById('registerUsername').value.trim();
            const email = document.getElementById('registerEmail').value.trim();
            const password = document.getElementById('registerPassword').value.trim();
            
            if (!username || !email || !password) {
                showMessage('Please fill in all fields', 'error');
                return;
            }
            
            if (allUsers.find(u => u.Username === username)) {
                showMessage('Username already exists', 'error');
                return;
            }
            
            const registerButton = document.getElementById('registerButton');
            registerButton.innerHTML = 'Registering...';
            registerButton.disabled = true;
            
            try {
                const userData = new URLSearchParams({
                    action: 'addUser',
                    username: username,
                    email: email,
                    password: password,
                    score: '0',
                    streak: '0',
                    accuracy: '0',
                    joinDate: new Date().toISOString().split('T')[0]
                });
                
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: userData
                });
                
                if (response.ok) {
                    const result = await response.text();
                    console.log('Registration result:', result);
                    
                    const newUser = {
                        ID: (allUsers.length + 1).toString(),
                        Username: username,
                        Email: email,
                        Password: password,
                        Score: '0',
                        Streak: '0',
                        Accuracy: '0',
                        JoinDate: new Date().toISOString().split('T')[0]
                    };
                    allUsers.push(newUser);
                    
                    showMessage('Registration successful! You can now login.', 'success');
                    showNotification(`Account created successfully! Welcome ${username}! +25 starter coins!`, 'success', 5000);
                    
                    switchToLogin();
                    
                    document.getElementById('registerUsername').value = '';
                    document.getElementById('registerEmail').value = '';
                    document.getElementById('registerPassword').value = '';
                } else {
                    throw new Error('Registration failed on server');
                }
                
            } catch (error) {
                console.error('Registration error:', error);
                showMessage('Registration failed. Please try again.', 'error');
            } finally {
                registerButton.innerHTML = 'Register';
                registerButton.disabled = false;
            }
        }

        function showUserInterface() {
            document.getElementById('headerSubtext').textContent = `Welcome back, ${currentUser.username}!`;
            document.getElementById('loginBtn').style.display = 'none';
            document.getElementById('accountDropdown').style.display = 'block';
            document.getElementById('achievementsBtn').style.display = 'block';
            document.getElementById('userStatsSection').style.display = 'block';
            
            document.getElementById('welcomeUsername').textContent = currentUser.username;
            document.getElementById('userScore').textContent = currentUser.score;
            document.getElementById('userAccuracy').textContent = currentUser.accuracy + '%';
            document.getElementById('userStreak').textContent = currentUser.streak;
            
            document.getElementById('accountUsername').textContent = currentUser.username;
            updateCoinDisplay();
            
            userAchievements = [];
            totalPicksMade = 0;
            setTimeout(() => checkAchievements(), 1000);
        }

        function toggleAccountMenu() {
            const menu = document.getElementById('accountMenu');
            const isVisible = menu.style.display === 'block';
            
            if (isVisible) {
                hideAccountMenu();
            } else {
                showAccountMenu();
            }
        }

        function showAccountMenu() {
            document.getElementById('accountMenu').style.display = 'block';
            
            setTimeout(() => {
                document.addEventListener('click', handleOutsideClick);
            }, 100);
        }

        function hideAccountMenu() {
            document.getElementById('accountMenu').style.display = 'none';
            document.removeEventListener('click', handleOutsideClick);
        }

        function handleOutsideClick(event) {
            const dropdown = document.getElementById('accountDropdown');
            if (!dropdown.contains(event.target)) {
                hideAccountMenu();
            }
        }

        function showProfile() {
            hideAccountMenu();
            showNotification('Profile feature coming soon!', 'info', 2000);
        }

        function showSettings() {
            hideAccountMenu();
            showNotification('Settings feature coming soon!', 'info', 2000);
        }

        // REPLACE your loadTodaysGames() function with this fixed version:

async function loadTodaysGames() {
    try {
        showNotification('Loading games from Google Sheets...', 'info');
        
        const response = await fetch(`${APPS_SCRIPT_URL}?action=getGames&cacheBust=${Date.now()}`);
        const csvData = await response.text();
        
        console.log('Games CSV Response:', csvData);
        
        if (!csvData || csvData.includes('Error')) {
            throw new Error('Failed to load games data');
        }
        
        // Parse CSV data properly
        const lines = csvData.trim().split('\n');
        const headers = lines[0].split(',').map(h => h.trim());
        
        console.log('CSV Headers:', headers);
        
        todaysGames = [];
        
        for (let i = 1; i < lines.length; i++) {
            const values = parseCSVLine(lines[i]);
            
            if (values.length >= headers.length) {
                const game = {};
                
                // Map CSV values to game object with proper field names
                headers.forEach((header, index) => {
                    let value = values[index] ? values[index].trim() : '';
                    
                    // Handle specific fields
                    if (header === 'ID') {
                        game.id = value;
                    } else if (header === 'TeamA') {
                        game.TeamA = value;
                        game.teamA = value; // Backward compatibility
                    } else if (header === 'TeamB') {
                        game.TeamB = value;
                        game.teamB = value; // Backward compatibility
                    } else if (header === 'League') {
                        game.League = value;
                        game.league = value; // Backward compatibility
                    } else if (header === 'StartTime') {
                        // Keep original StartTime string, don't convert to Date object yet
                        game.StartTime = value;
                        game.startTime = value; // Backward compatibility
                    } else if (header === 'Status') {
                        game.Status = value;
                        game.status = value; // Backward compatibility
                    } else if (header === 'ScoreA') {
                        game.ScoreA = value;
                    } else if (header === 'ScoreB') {
                        game.ScoreB = value;
                    } else if (header === 'SpreadA') {
                        game.SpreadA = value;
                        game.spreadA = value; // Backward compatibility
                    } else if (header === 'SpreadB') {
                        game.SpreadB = value;
                        game.spreadB = value; // Backward compatibility
                    } else if (header === 'TotalLine') {
                        game.TotalLine = value;
                        game.totalLine = value; // Backward compatibility
                    }
                });
                
                // Only add games that have at least team names
                if (game.TeamA && game.TeamB) {
                    todaysGames.push(game);
                }
            }
        }
        
        console.log('Games loaded from Google Sheets:', todaysGames.length);
        console.log('All games with details:', todaysGames);
        
        renderGames();
        hideNotification();
        
    } catch (error) {
        console.error('Error loading games:', error);
        showNotification('Error loading games: ' + error.message, 'error');
    }
}

    // UPDATED: Better countdown function that handles GMT format
function getGameCountdownDetailed(startTimeStr) {
    if (!startTimeStr || startTimeStr === '') {
        return { countdown: 'TBD', status: 'scheduled', isExpired: false };
    }
    
    let gameTime;
    try {
        // Handle GMT format from CSV (like "Wed Jun 25 2025 15:30:00 GMT+0300")
        gameTime = new Date(startTimeStr);
        
        // If parsing failed, try other formats
        if (isNaN(gameTime.getTime())) {
            // Try simple format like "2025-06-25 15:30:00"
            const cleanedTime = startTimeStr.replace(' GMT+0300', '').replace(' GMT+0200', '');
            gameTime = new Date(cleanedTime);
        }
    } catch (e) {
        console.log('Error parsing time:', startTimeStr, e);
        return { countdown: 'Invalid Time', status: 'scheduled', isExpired: false };
    }
    
    if (isNaN(gameTime.getTime())) {
        console.log('Could not parse time:', startTimeStr);
        return { countdown: 'Invalid Time', status: 'scheduled', isExpired: false };
    }
    
    const now = new Date();
    const timeDiff = gameTime.getTime() - now.getTime();
    
    console.log('Countdown calculation:', {
        startTime: startTimeStr,
        gameTime: gameTime.toISOString(),
        now: now.toISOString(),
        timeDiff: timeDiff
    });
    
    // Game has started (more than 5 minutes ago)
    if (timeDiff < -300000) {
        return { countdown: 'Started', status: 'live', isExpired: true };
    }
    
    // Game starting soon (less than 5 minutes)
    if (timeDiff < 300000 && timeDiff > 0) {
        const minutes = Math.floor(timeDiff / 60000);
        return { countdown: `${minutes}m`, status: 'starting-soon', isExpired: true };
    }
    
    // Game has just started (within last 5 minutes)
    if (timeDiff < 0) {
        return { countdown: 'LIVE', status: 'live', isExpired: true };
    }
    
    // Game is upcoming
    const hours = Math.floor(timeDiff / (1000 * 60 * 60));
    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
    const days = Math.floor(hours / 24);
    
    if (days > 0) {
        return { countdown: `${days}d ${hours % 24}h`, status: 'scheduled', isExpired: false };
    } else if (hours > 0) {
        return { countdown: `${hours}h ${minutes}m`, status: 'scheduled', isExpired: false };
    } else {
        return { countdown: `${minutes}m`, status: 'upcoming', isExpired: false };
    }
}

// Get color for countdown based on status
function getCountdownColor(status) {
    const colors = {
        'live': 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
        'starting-soon': 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
        'upcoming': 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
        'scheduled': 'linear-gradient(135deg, #6366f1 0%, #4f46e5 100%)'
    };
    return colors[status] || colors['scheduled'];
}

// UPDATED: Better time formatting for GMT format
function formatGameTime(startTimeStr) {
    if (!startTimeStr || startTimeStr === '') return 'TBD';
    
    let gameTime;
    try {
        gameTime = new Date(startTimeStr);
        
        if (isNaN(gameTime.getTime())) {
            const cleanedTime = startTimeStr.replace(' GMT+0300', '').replace(' GMT+0200', '');
            gameTime = new Date(cleanedTime);
        }
    } catch (e) {
        return startTimeStr; // Return original if can't parse
    }
    
    if (isNaN(gameTime.getTime())) {
        return startTimeStr; // Return original if can't parse
    }
    
    const options = { 
        weekday: 'short',
        month: 'short', 
        day: 'numeric', 
        hour: 'numeric', 
        minute: '2-digit',
        hour12: true 
    };
    return gameTime.toLocaleDateString('en-US', options);
}

// Helper function to properly parse CSV lines (handles commas in quoted values)
function parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
            inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
            result.push(current);
            current = '';
        } else {
            current += char;
        }
    }
    
    result.push(current); // Add the last field
    return result;
}

// Start real-time countdown updates
function startCountdownUpdates() {
    // Clear any existing interval
    if (window.countdownInterval) {
        clearInterval(window.countdownInterval);
    }
    
    // Update countdowns every 30 seconds
    window.countdownInterval = setInterval(() => {
        todaysGames.forEach(game => {
            const countdownElement = document.getElementById(`countdown_${game.id}`);
            if (countdownElement && game.StartTime) {
                const { countdown, status } = getGameCountdownDetailed(game.StartTime);
                countdownElement.textContent = countdown;
                countdownElement.style.background = getCountdownColor(status);
                
                // If game status changed to live/expired, refresh the entire games display
                if (status === 'live' || status === 'starting-soon') {
                    setTimeout(() => {
                        renderGames(); // Re-render to show disabled state
                    }, 1000);
                }
            }
        });
    }, 30000); // Update every 30 seconds
}

        function quickFillRandom() {
            if (!currentUser) {
                showLogin();
                showNotification('Please login to use Quick Fill', 'warning');
                return;
            }
            
            showNotification('Quick filling all picks randomly...', 'info', 2000);
            
            todaysGames.forEach(game => {
                const teams = [game.teamA, game.teamB];
                const randomWinner = teams[Math.floor(Math.random() * teams.length)];
                
                const totals = ['Over', 'Under'];
                const randomTotal = totals[Math.floor(Math.random() * totals.length)];
                
                if (!userPicks[game.id]) {
                    userPicks[game.id] = {};
                }
                userPicks[game.id]['winner'] = randomWinner;
                userPicks[game.id]['total'] = randomTotal;
                
                updatePickVisual(game.id, 'winner', randomWinner);
                updatePickVisual(game.id, 'total', randomTotal);
            });
            
            totalPicksMade = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            updatePickStatus();
            updateSubmitButton();
            
            setTimeout(() => {
                showNotification('All picks filled! Review and submit when ready.', 'success', 3000);
            }, 1000);
        }

        function clearAllPicks() {
            if (Object.keys(userPicks).length === 0) {
                showNotification('No picks to clear!', 'info');
                return;
            }
            
            userPicks = {};
            totalPicksMade = 0;
            
            document.querySelectorAll('[id^="pick_"]').forEach(btn => {
                btn.style.background = 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)';
                btn.style.borderColor = '#e2e8f0';
                btn.style.color = '#334155';
                btn.style.boxShadow = 'none';
            });
            
            updatePickStatus();
            updateSubmitButton();
            
            showNotification('All picks cleared!', 'info', 2000);
        }

        function resetSubmittedGames() {
            submittedGames.clear();
            
            const submitBtn = document.getElementById('submitPicksBtn');
            submitBtn.innerHTML = 'Submit All Picks';
            submitBtn.disabled = Object.keys(userPicks).length === 0;
            updateSubmitButton();
            
            showNotification('Submitted games reset! You can now submit picks again.', 'success', 3000);
        }

        async function submitAllPicks() {
            if (Object.keys(userPicks).length === 0) {
                showNotification('Please make some picks first!', 'warning');
                return;
            }
            
            const gamesToSubmit = Object.keys(userPicks);
            const alreadySubmitted = gamesToSubmit.filter(gameId => submittedGames.has(parseInt(gameId)));
            
            if (alreadySubmitted.length > 0) {
                showNotification(`You have already submitted picks for game(s): ${alreadySubmitted.join(', ')}`, 'warning');
                return;
            }
            
            const submitBtn = document.getElementById('submitPicksBtn');
            submitBtn.innerHTML = 'Submitting...';
            submitBtn.disabled = true;
            
            showNotification('Submitting your picks to Google Sheets...', 'info', 2000);
            
            try {
                const picksArray = [];
                
                Object.keys(userPicks).forEach(gameId => {
                    Object.keys(userPicks[gameId]).forEach(pickType => {
                        const selection = userPicks[gameId][pickType];
                        
                        picksArray.push({
                            UserID: currentUser.id || 1,
                            Username: currentUser.username,
                            GameID: gameId,
                            PickType: pickType,
                            Selection: selection,
                            IsCorrect: '',
                            SubmittedAt: new Date().toISOString(),
                            Points: 0
                        });
                    });
                });
                
                console.log('Submitting picks:', picksArray);
                
                const formData = new URLSearchParams({
                    action: 'submitPicks',
                    picks: JSON.stringify(picksArray)
                });
                
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData
                });
                
                if (response.ok) {
                    const result = await response.text();
                    console.log('Picks submission result:', result);
                    
                    const totalPicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
                    
                    gamesToSubmit.forEach(gameId => {
                        submittedGames.add(parseInt(gameId));
                    });
                    
                    awardCoins(totalPicks * 2, `Submitted ${totalPicks} picks!`);
                    
                    showNotification(`All ${totalPicks} picks submitted successfully to Google Sheets!`, 'success', 5000);
                    
                    userPicks = {};
                    totalPicksMade = 0;
                    submitBtn.innerHTML = 'All Picks Submitted ✓';
                    submitBtn.style.background = 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)';
                    submitBtn.disabled = true;
                    
                    updateSubmitButton();
                    updatePickStatus();
                    checkAchievements();
                } else {
                    throw new Error('Failed to submit picks to Google Sheets');
                }
                
            } catch (error) {
                console.error('Error submitting picks:', error);
                showNotification('Error submitting picks to Google Sheets. Please try again.', 'error');
                
                setTimeout(() => {
                    const totalPicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
                    
                    gamesToSubmit.forEach(gameId => {
                        submittedGames.add(parseInt(gameId));
                    });
                    
                    awardCoins(totalPicks * 2, `Submitted ${totalPicks} picks (local backup)!`);
                    
                    showNotification(`${totalPicks} picks saved locally (Google Sheets unavailable)`, 'warning', 5000);
                    
                    userPicks = {};
                    totalPicksMade = 0;
                    submitBtn.innerHTML = 'Picks Submitted (Local) ✓';
                    submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
                    submitBtn.disabled = true;
                    
                    updateSubmitButton();
                    updatePickStatus();
                    checkAchievements();
                }, 1000);
                
                submitBtn.innerHTML = 'Submit All Picks';
                updateSubmitButton();
            }
        }
// ADD THIS COMPREHENSIVE TEST AND DEBUG FUNCTION TO YOUR HTML:

function debugScoringSystem() {
    console.log('=== COMPREHENSIVE SCORING DEBUG ===');
    
    // Step 1: Check completed games
    fetch(`${APPS_SCRIPT_URL}?action=getGames&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            console.log('📋 GAMES DATA:', csvData);
            
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            console.log('📋 GAMES HEADERS:', headers);
            
            let completedGames = [];
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const game = {};
                
                headers.forEach((header, index) => {
                    game[header.trim()] = values[index] ? values[index].trim() : '';
                });
                
                if (game.Status && game.Status.toLowerCase() === 'completed') {
                    completedGames.push(game);
                    console.log(`✅ Found completed game:`, {
                        ID: game.ID,
                        TeamA: game.TeamA,
                        TeamB: game.TeamB,
                        ScoreA: game.ScoreA,
                        ScoreB: game.ScoreB,
                        Status: game.Status
                    });
                }
            }
            
            if (completedGames.length === 0) {
                console.log('❌ NO COMPLETED GAMES FOUND');
                return;
            }
            
            // Step 2: Check picks for completed games
            return fetch(`${APPS_SCRIPT_URL}?action=getPicks&cacheBust=${Date.now()}`);
        })
        .then(response => response.text())
        .then(csvData => {
            console.log('🎯 PICKS DATA:', csvData);
            
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            console.log('🎯 PICKS HEADERS:', headers);
            
            let unscoredPicks = [];
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const pick = {};
                
                headers.forEach((header, index) => {
                    pick[header.trim()] = values[index] ? values[index].trim() : '';
                });
                
                // Check if pick is for a completed game but not scored
                if (pick.IsCorrect === '' || pick.IsCorrect === null || pick.IsCorrect === undefined) {
                    unscoredPicks.push(pick);
                    console.log(`⚠️ Unscored pick found:`, {
                        Username: pick.Username,
                        GameID: pick.GameID,
                        PickType: pick.PickType,
                        Selection: pick.Selection,
                        IsCorrect: pick.IsCorrect,
                        Points: pick.Points
                    });
                }
            }
            
            console.log(`📊 SUMMARY: ${unscoredPicks.length} unscored picks found`);
            
            if (unscoredPicks.length > 0) {
                console.log('🔄 TRIGGERING MANUAL PROCESSING...');
                return fetch(`${APPS_SCRIPT_URL}?action=processResults&cacheBust=${Date.now()}`);
            } else {
                console.log('✅ All picks appear to be scored');
            }
        })
        .then(response => {
            if (response) {
                return response.text();
            }
        })
        .then(result => {
            if (result) {
                console.log('🎯 MANUAL PROCESSING RESULT:', result);
                
                // Wait a moment then check results again
                setTimeout(() => {
                    console.log('🔄 Re-checking picks after processing...');
                    checkPicksAfterProcessing();
                }, 3000);
            }
        })
        .catch(error => {
            console.error('❌ DEBUG ERROR:', error);
        });
}

function checkPicksAfterProcessing() {
    fetch(`${APPS_SCRIPT_URL}?action=getPicks&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            let scoredCount = 0;
            let totalPicks = lines.length - 1;
            
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const isCorrect = values[headers.indexOf('IsCorrect')];
                
                if (isCorrect === 'TRUE' || isCorrect === 'FALSE') {
                    scoredCount++;
                }
            }
            
            console.log(`📊 AFTER PROCESSING: ${scoredCount}/${totalPicks} picks scored`);
            
            if (scoredCount > 0) {
                console.log('✅ SUCCESS! Picks have been scored');
                // Check user stats update
                checkUserStatsUpdate();
            } else {
                console.log('❌ STILL NO SCORING - There may be a deeper issue');
            }
        });
}

// Load tournament data
async function loadTournamentData() {
    try {
        console.log('🏆 Loading tournament data...');
        
        // Get tournaments
        const tournamentsResponse = await fetch(APPS_SCRIPT_URL + '?action=getTournaments');
        const tournamentsCSV = await tournamentsResponse.text();
        
        if (tournamentsCSV.includes('Error:') || tournamentsCSV.includes('Unknown action:')) {
            console.error('Tournament error:', tournamentsCSV);
            return;
        }
        
        const tournaments = parseCSV(tournamentsCSV);
        console.log('Tournaments loaded:', tournaments);
        
        // Find active tournament
        currentTournament = tournaments.find(t => t.Status === 'active');
        
        if (currentTournament) {
            console.log('🎯 Active tournament found:', currentTournament.Name);
            await loadTournamentUsers();
            await loadTournamentPicks();
            displayTournamentBanner();
        } else {
            console.log('No active tournaments found');
            hideTournamentBanner();
        }
        
    } catch (error) {
        console.error('Error loading tournament data:', error);
    }
}

// Load tournament users
async function loadTournamentUsers() {
    try {
        const response = await fetch(APPS_SCRIPT_URL + '?action=getTournamentUsers');
        const csv = await response.text();
        
        if (!csv.includes('Error:')) {
            const users = parseCSV(csv);
            
            // Find current user's tournament data
            if (currentUser) {
                userTournamentData = users.find(u => 
                    u.TournamentID == currentTournament.ID && 
                    u.Username === currentUser.username
                );
            }
            
            // Create leaderboard
            tournamentLeaderboard = users
                .filter(u => u.TournamentID == currentTournament.ID)
                .sort((a, b) => parseInt(b.TotalScore || 0) - parseInt(a.TotalScore || 0))
                .slice(0, 10); // Top 10
                
            console.log('Tournament users loaded:', users.length);
        }
    } catch (error) {
        console.error('Error loading tournament users:', error);
    }
}

// Load tournament picks
async function loadTournamentPicks() {
    try {
        const response = await fetch(APPS_SCRIPT_URL + '?action=getTournamentPicks');
        const csv = await response.text();
        
        if (!csv.includes('Error:')) {
            const picks = parseCSV(csv);
            console.log('Tournament picks loaded:', picks.length);
        }
    } catch (error) {
        console.error('Error loading tournament picks:', error);
    }
}

// Display tournament banner
function displayTournamentBanner() {
    if (!currentTournament) return;
    
    console.log('🎨 Displaying tournament banner');
    
    const banner = document.getElementById('tournamentBanner');
    const nameEl = document.getElementById('tournamentName');
    const prizePoolEl = document.getElementById('tournamentPrizePool');
    const participantsEl = document.getElementById('tournamentParticipants');
    const timeLeftEl = document.getElementById('tournamentTimeLeft');
    const userRankEl = document.getElementById('tournamentUserRank');
    const joinBtn = document.getElementById('joinTournamentBtn');
    
    // Update banner content
    nameEl.textContent = currentTournament.Name;
    prizePoolEl.textContent = `${currentTournament.PrizePool || 500} coins`;
    participantsEl.textContent = `${currentTournament.CurrentParticipants || 0} / ${currentTournament.MaxParticipants || 1000}`;
    
    // Calculate time left
    const endDate = new Date(currentTournament.EndDate);
    const timeLeft = calculateTimeLeft(endDate);
    timeLeftEl.textContent = timeLeft;
    
    // Update user rank
    if (userTournamentData) {
        userRankEl.textContent = `#${userTournamentData.Rank || 'Unranked'} (${userTournamentData.TotalScore || 0} pts)`;
        joinBtn.textContent = '✅ Tournament Joined!';
        joinBtn.disabled = true;
    } else {
        userRankEl.textContent = 'Not Joined';
        joinBtn.textContent = '🚀 Join Tournament (FREE!)';
        joinBtn.disabled = false;
    }
    
    // Show banner
    banner.classList.add('active');
    
    // Update tournament leaderboard
    updateTournamentLeaderboard();
}

// Hide tournament banner
function hideTournamentBanner() {
    const banner = document.getElementById('tournamentBanner');
    banner.classList.remove('active');
}

// Calculate time left
function calculateTimeLeft(endDate) {
    const now = new Date();
    const diff = endDate - now;
    
    if (diff <= 0) return 'Ended';
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (days > 0) return `${days}d ${hours}h`;
    if (hours > 0) return `${hours}h ${minutes}m`;
    return `${minutes}m`;
}

// Join tournament
async function joinTournament() {
    if (!currentUser) {
        alert('Please log in to join tournaments!');
        return;
    }
    
    if (!currentTournament) {
        alert('No active tournament found!');
        return;
    }
    
    try {
        console.log('🚀 Joining tournament:', currentTournament.Name);
        
        const joinData = new URLSearchParams({
            action: 'joinTournament',
            tournamentId: currentTournament.ID,
            userId: currentUser.id,
            username: currentUser.username
        });
        
        const response = await fetch(APPS_SCRIPT_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: joinData
        });
        
        const result = await response.text();
        console.log('Join tournament result:', result);
        
        if (result.includes('Successfully joined') || result.includes('Already joined')) {
            // Reload tournament data
            await loadTournamentData();
            
            // Show success message
            alert('🎉 Successfully joined the tournament! Good luck!');
        } else {
            alert('Error joining tournament: ' + result);
        }
        
    } catch (error) {
        console.error('Error joining tournament:', error);
        alert('Error joining tournament. Please try again.');
    }
}

// Toggle tournament leaderboard
function toggleTournamentLeaderboard() {
    const leaderboard = document.getElementById('miniTournamentLeaderboard');
    leaderboard.classList.toggle('active');
}

// Update tournament leaderboard display
function updateTournamentLeaderboard() {
    const rankingsContainer = document.getElementById('tournamentRankings');
    
    if (!tournamentLeaderboard.length) {
        rankingsContainer.innerHTML = '<p>No tournament participants yet. Be the first to join!</p>';
        return;
    }
    
    let html = '';
    
    tournamentLeaderboard.forEach((user, index) => {
        const isCurrentUser = currentUser && user.Username === currentUser.username;
        const rankClass = index === 0 ? 'first' : index === 1 ? 'second' : index === 2 ? 'third' : '';
        
        html += `
            <div class="tournament-ranking ${isCurrentUser ? 'user-rank' : ''}">
                <div class="rank-info">
                    <div class="rank-number ${rankClass}">${index + 1}</div>
                    <span>${user.Username}</span>
                </div>
                <div class="tournament-points">${user.TotalScore || 0} pts</div>
            </div>
        `;
    });
    
    // Add current user if not in top 10
    if (currentUser && userTournamentData && !tournamentLeaderboard.some(u => u.Username === currentUser.username)) {
        html += `
            <div class="tournament-ranking user-rank">
                <div class="rank-info">
                    <div class="rank-number">${userTournamentData.Rank || '?'}</div>
                    <span>${currentUser.username} (You)</span>
                </div>
                <div class="tournament-points">${userTournamentData.TotalScore || 0} pts</div>
            </div>
        `;
    }
    
    rankingsContainer.innerHTML = html;
}

// Add tournament badge to weekend games
function addTournamentBadges() {
    if (!currentTournament) return;
    
    const gameCards = document.querySelectorAll('.game-card');
    
    gameCards.forEach(card => {
        const gameTitle = card.querySelector('.game-title');
        if (gameTitle && !gameTitle.querySelector('.tournament-game-badge')) {
            const gameTimeText = card.querySelector('.game-time')?.textContent || '';
            
            // Check if it's a weekend game (Friday, Saturday, Sunday)
            const gameDate = new Date(gameTimeText);
            const dayOfWeek = gameDate.getDay();
            
            if (dayOfWeek === 0 || dayOfWeek === 5 || dayOfWeek === 6) { // Sunday, Friday, Saturday
                const badge = document.createElement('span');
                badge.className = 'tournament-game-badge';
                badge.textContent = '🏆 TOURNAMENT';
                gameTitle.appendChild(badge);
                
                // Add Friday night bonus indicator
                if (dayOfWeek === 5) {
                    badge.textContent = '🏆 TOURNAMENT +5 BONUS';
                    badge.style.background = 'linear-gradient(135deg, #dc2626 0%, #b91c1c 100%)';
                }
            }
        }
    });
}

// Initialize tournament system
async function initializeTournamentSystem() {
    console.log('🏆 Initializing tournament system...');
    await loadTournamentData();
    
    // Refresh tournament data every 30 seconds
    setInterval(async () => {
        await loadTournamentData();
        addTournamentBadges();
    }, 30000);
}

// Add to your existing initialization
document.addEventListener('DOMContentLoaded', function() {
    // Your existing initialization code...
    
    // Initialize tournament system
    setTimeout(initializeTournamentSystem, 2000);
});

// Update the renderGames function to include tournament badges
const originalRenderGames = window.renderGames;
window.renderGames = function() {
    if (originalRenderGames) {
        originalRenderGames();
    }
    
    // Add tournament badges after games are rendered
    setTimeout(addTournamentBadges, 500);
};

console.log('🏆 Tournament UI System Loaded!');

// ADD THESE FIXES TO YOUR HTML JAVASCRIPT SECTION:

// ==================== ACHIEVEMENTS MODAL FIX ====================

// 🔧 FIXED: Better showAchievements function
        function showAchievements() {
            console.log('🏆 Opening achievements modal...');
            
            if (!currentUser) {
                showNotification('Please login to view achievements!', 'warning');
                return;
            }
            
            // Update the modal content before showing
            updateAchievementsModal();
            
            // Show the modal
            const modal = document.getElementById('achievementsModal');
            
            if (modal) {
                // Try multiple methods to ensure modal shows
                try {
                    // Method 1: Bootstrap 5
                    if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
                        const bsModal = new bootstrap.Modal(modal);
                        bsModal.show();
                        console.log('✅ Modal opened with Bootstrap 5');
                        return;
                    }
                    
                    // Method 2: Bootstrap 4 (jQuery)
                    if (typeof $ !== 'undefined') {
                        $(modal).modal('show');
                        console.log('✅ Modal opened with Bootstrap 4/jQuery');
                        return;
                    }
                    
                    // Method 3: Manual show
                    modal.style.display = 'flex';
                    modal.style.zIndex = '1000';
                    modal.classList.add('show');
                    document.body.classList.add('modal-open');
                    
                    // Add backdrop
                    let backdrop = document.getElementById('achievementsBackdrop');
                    if (!backdrop) {
                        backdrop = document.createElement('div');
                        backdrop.className = 'modal-backdrop fade show';
                        backdrop.id = 'achievementsBackdrop';
                        backdrop.style.zIndex = '999';
                        document.body.appendChild(backdrop);
                    }
                    
                    console.log('✅ Modal opened manually');
                    
                } catch (error) {
                    console.error('Error opening modal:', error);
                }
            } else {
                console.error('❌ Achievements modal not found');
            }
        }


// Function to close achievements modal manually
function closeAchievementsModal() {
    const modal = document.getElementById('achievementsModal');
    const backdrop = document.getElementById('achievementsBackdrop');
    
    if (modal) {
        modal.style.display = 'none';
        modal.classList.remove('show');
        document.body.classList.remove('modal-open');
        
        if (backdrop) {
            backdrop.remove();
        }
    }
}

// ==================== LEADERBOARD FIX ====================

// Enhanced leaderboard loading function
async function loadLeaderboard() {
    console.log('🏆 Loading leaderboard...');
    
    try {
        const response = await fetch(`${APPS_SCRIPT_URL}?action=getUsers&cacheBust=${Date.now()}`);
        const csvData = await response.text();
        
        console.log('Raw leaderboard data:', csvData);
        
        if (!csvData || csvData.includes('Error')) {
            console.error('❌ Error loading leaderboard data:', csvData);
            return;
        }
        
        const lines = csvData.trim().split('\n');
        const headers = parseCSVLine(lines[0]);
        
        console.log('Leaderboard headers:', headers);
        console.log('Total users found:', lines.length - 1);
        
        const users = [];
        
        // Parse each user
        for (let i = 1; i < lines.length; i++) {
            const values = parseCSVLine(lines[i]);
            const user = {
                id: values[0],
                username: values[1],
                email: values[2],
                score: parseInt(values[4]) || 0,
                streak: parseInt(values[5]) || 0,
                accuracy: parseInt(values[6]) || 0
            };
            
            // Only include users with activity (score > 0 or made picks)
            if (user.score > 0 || user.streak > 0 || user.accuracy > 0) {
                users.push(user);
            }
        }
        
        console.log('Active users for leaderboard:', users);
        
        // Sort by score (descending)
        users.sort((a, b) => b.score - a.score);
        
        // Update leaderboard display
        displayLeaderboard(users);
        
    } catch (error) {
        console.error('Error loading leaderboard:', error);
        
        // Show error in leaderboard
        const container = document.getElementById('leaderboardContainer');
        if (container) {
            container.innerHTML = `
                <div class="alert alert-danger">
                    <h4>⚠️ Error Loading Leaderboard</h4>
                    <p>Unable to load player data. Please try again.</p>
                    <button onclick="loadLeaderboard()" class="btn btn-primary btn-sm">🔄 Retry</button>
                </div>
            `;
        }
    }
}

// Enhanced leaderboard display function
function displayLeaderboard(users) {
    const container = document.getElementById('leaderboardContainer');
    
    if (!container) {
        console.error('❌ Leaderboard container not found');
        return;
    }
    
    if (!users || users.length === 0) {
        container.innerHTML = `
            <div class="text-center p-4">
                <h3>🏆 Leaderboard</h3>
                <div class="alert alert-info">
                    <h5>📊 No Active Players Yet!</h5>
                    <p>Be the first to make picks and score points!</p>
                    <p class="mb-0"><strong>How to get on the leaderboard:</strong></p>
                    <ol class="text-left mt-2 mb-0">
                        <li>Make picks on available games</li>
                        <li>Wait for games to be completed</li>
                        <li>Earn points for correct predictions</li>
                    </ol>
                </div>
            </div>
        `;
        return;
    }
    
    console.log(`✅ Displaying ${users.length} users on leaderboard`);
    
    let leaderboardHTML = `
        <div class="leaderboard-header text-center mb-4">
            <h3>🏆 Leaderboard</h3>
            <p class="text-muted">${users.length} active player${users.length !== 1 ? 's' : ''}</p>
        </div>
        
        <div class="leaderboard-list">
    `;
    
    users.forEach((user, index) => {
        const rank = index + 1;
        let rankIcon = '🏅';
        let rankClass = '';
        
        if (rank === 1) {
            rankIcon = '🥇';
            rankClass = 'gold';
        } else if (rank === 2) {
            rankIcon = '🥈';
            rankClass = 'silver';
        } else if (rank === 3) {
            rankIcon = '🥉';
            rankClass = 'bronze';
        }
        
        const isCurrentUser = currentUser && currentUser.username === user.username;
        
        leaderboardHTML += `
            <div class="leaderboard-item ${rankClass} ${isCurrentUser ? 'current-user' : ''}" style="
                display: flex;
                align-items: center;
                padding: 12px 16px;
                margin-bottom: 8px;
                border-radius: 8px;
                background: ${isCurrentUser ? 'linear-gradient(135deg, #e0f2fe 0%, #b3e5fc 100%)' : 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)'};
                border: ${isCurrentUser ? '2px solid #0277bd' : '1px solid #cbd5e1'};
                transition: all 0.2s ease;
            ">
                <div style="font-size: 1.5em; margin-right: 12px;">
                    ${rankIcon}
                </div>
                
                <div style="flex: 1;">
                    <div style="font-weight: 600; color: #1e293b; font-size: 1.1em;">
                        #${rank} ${user.username}
                        ${isCurrentUser ? '<span style="color: #0277bd; font-size: 0.8em; margin-left: 8px;">(You)</span>' : ''}
                    </div>
                    
                    <div style="color: #64748b; font-size: 0.9em; margin-top: 2px;">
                        ${user.score} points • ${user.streak} streak • ${user.accuracy}% accuracy
                    </div>
                </div>
                
                <div style="text-align: right; font-weight: 600; color: #059669; font-size: 1.2em;">
                    ${user.score}
                </div>
            </div>
        `;
    });
    
    leaderboardHTML += `
        </div>
        
        <div class="text-center mt-4">
            <button onclick="loadLeaderboard()" class="btn btn-outline-primary btn-sm">
                🔄 Refresh Leaderboard
            </button>
        </div>
    `;
    
    container.innerHTML = leaderboardHTML;
}

// ==================== MODAL EVENT HANDLERS ====================

// Enhanced modal event setup
function setupModalEvents() {
    // Setup achievements modal close events
    const achievementsModal = document.getElementById('achievementsModal');
    if (achievementsModal) {
        // Close button
        const closeButtons = achievementsModal.querySelectorAll('[data-dismiss="modal"], .btn-close, .close');
        closeButtons.forEach(btn => {
            btn.addEventListener('click', closeAchievementsModal);
        });
        
        // Backdrop click
        achievementsModal.addEventListener('click', (e) => {
            if (e.target === achievementsModal) {
                closeAchievementsModal();
            }
        });
    }
    
    // Setup achievement button clicks
    const achievementButtons = document.querySelectorAll('[onclick*="showAchievements"]');
    achievementButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            showAchievements();
        });
    });
}

// ==================== INITIALIZATION ====================

// Enhanced initialization
function initializeUI() {
    console.log('🚀 Initializing UI components...');
    
    // Setup modal events
    setupModalEvents();
    
    // Load leaderboard
    loadLeaderboard();
    
    // Setup periodic leaderboard refresh
    setInterval(loadLeaderboard, 30000); // Refresh every 30 seconds
    
    console.log('✅ UI initialization complete');
}

// Call initialization when DOM is ready
document.addEventListener('DOMContentLoaded', initializeUI);

// Also call when page loads (backup)
window.addEventListener('load', initializeUI);

// ADD THESE DEBUG FUNCTIONS TO YOUR HTML JAVASCRIPT SECTION:

// ==================== DEBUG FUNCTIONS ====================

function debugAchievementsModal() {
    console.log('=== ACHIEVEMENTS MODAL DEBUG ===');
    
    // Check if modal exists
    const modal = document.getElementById('achievementsModal');
    console.log('Modal element found:', !!modal);
    
    if (modal) {
        console.log('Modal display style:', modal.style.display);
        console.log('Modal classes:', modal.className);
        console.log('Modal HTML preview:', modal.outerHTML.substring(0, 200) + '...');
    }
    
    // Check for Bootstrap
    console.log('Bootstrap 5 available:', typeof bootstrap !== 'undefined');
    console.log('jQuery available:', typeof $ !== 'undefined');
    
    // Check current user
    console.log('Current user:', currentUser);
    
    // Try to find all achievement buttons
    const buttons = document.querySelectorAll('button, a, [onclick*="achievement"], [onclick*="Achievement"]');
    console.log('Potential achievement buttons found:', buttons.length);
    
    buttons.forEach((btn, i) => {
        if (btn.textContent.includes('Achievement') || btn.onclick) {
            console.log(`Button ${i}:`, btn.textContent, btn.onclick);
        }
    });
}

function debugLeaderboard() {
    console.log('=== LEADERBOARD DEBUG ===');
    
    // Check if container exists
    const container = document.getElementById('leaderboardContainer');
    console.log('Leaderboard container found:', !!container);
    
    if (container) {
        console.log('Container content:', container.innerHTML.substring(0, 200));
    }
    
    // Check APPS_SCRIPT_URL
    console.log('APPS_SCRIPT_URL:', APPS_SCRIPT_URL);
    
    // Test user data fetch
    console.log('Testing user data fetch...');
    fetch(`${APPS_SCRIPT_URL}?action=getUsers&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(data => {
            console.log('Raw user data:', data);
            
            const lines = data.trim().split('\n');
            console.log('Number of data lines:', lines.length);
            
            if (lines.length > 1) {
                console.log('Headers:', lines[0]);
                console.log('First user:', lines[1]);
                
                // Parse first user
                const values = parseCSVLine(lines[1]);
                console.log('Parsed user values:', values);
                console.log('User score:', parseInt(values[4]) || 0);
            }
        })
        .catch(error => {
            console.error('❌ Error fetching user data:', error);
        });
}

function debugAllUI() {
    console.log('=== FULL UI DEBUG ===');
    
    debugAchievementsModal();
    console.log('---');
    debugLeaderboard();
    
    // Check overall page state
    console.log('Current user logged in:', !!currentUser);
    console.log('Page loaded:', document.readyState);
    console.log('All users loaded:', !!window.allUsers);
    console.log('Games loaded:', !!window.allGames);
}

// ==================== QUICK FIXES ====================

function forceOpenAchievementsModal() {
    console.log('🔧 Force opening achievements modal...');
    
    const modal = document.getElementById('achievementsModal');
    if (modal) {
        modal.style.display = 'block';
        modal.style.zIndex = '9999';
        modal.classList.add('show');
        
        // Remove any conflicting styles
        modal.style.opacity = '1';
        modal.style.visibility = 'visible';
        
        console.log('✅ Modal forced open');
    } else {
        console.error('❌ Modal not found');
    }
}

function forceLoadLeaderboard() {
    console.log('🔧 Force loading leaderboard...');
    
    // Clear existing content
    const container = document.getElementById('leaderboardContainer');
    if (container) {
        container.innerHTML = '<div class="text-center"><h3>🔄 Loading...</h3></div>';
    }
    
    // Force load
    setTimeout(() => {
        loadLeaderboard();
    }, 500);
}

function quickFixUI() {
    console.log('🔧 Applying quick UI fixes...');
    
    // Fix 1: Ensure modal is properly structured
    const modal = document.getElementById('achievementsModal');
    if (modal) {
        modal.setAttribute('tabindex', '-1');
        modal.setAttribute('role', 'dialog');
        modal.setAttribute('aria-hidden', 'true');
    }
    
    // Fix 2: Force leaderboard load
    forceLoadLeaderboard();
    
    // Fix 3: Re-setup event handlers
    setupModalEvents();
    
    console.log('✅ Quick fixes applied');
}

// ==================== TEST FUNCTIONS ====================

function testAchievementsButton() {
    console.log('🧪 Testing achievements button click...');
    
    // Find all possible achievement buttons
    const buttons = document.querySelectorAll('*');
    
    buttons.forEach(btn => {
        if (btn.textContent && btn.textContent.toLowerCase().includes('achievement')) {
            console.log('Found achievement button:', btn);
            btn.click();
        }
    });
}

function testModalOpen() {
    console.log('🧪 Testing modal open methods...');
    
    const modal = document.getElementById('achievementsModal');
    if (!modal) {
        console.error('❌ No modal found');
        return;
    }
    
    // Test different opening methods
    console.log('Method 1: Bootstrap 5');
    try {
        if (typeof bootstrap !== 'undefined') {
            const bsModal = new bootstrap.Modal(modal);
            bsModal.show();
            console.log('✅ Bootstrap 5 worked');
            return;
        }
    } catch (e) {
        console.log('❌ Bootstrap 5 failed:', e.message);
    }
    
    console.log('Method 2: jQuery/Bootstrap 4');
    try {
        if (typeof $ !== 'undefined') {
            $(modal).modal('show');
            console.log('✅ jQuery worked');
            return;
        }
    } catch (e) {
        console.log('❌ jQuery failed:', e.message);
    }
    
    console.log('Method 3: Manual');
    forceOpenAchievementsModal();
}

// Add buttons to test these functions
function addDebugButtons() {
    if (document.getElementById('debugButtons')) return; // Already added
    
    const debugPanel = document.createElement('div');
    debugPanel.id = 'debugButtons';
    debugPanel.style.cssText = `
        position: fixed;
        top: 10px;
        right: 10px;
        background: white;
        padding: 10px;
        border: 2px solid #007bff;
        border-radius: 8px;
        z-index: 10000;
        font-size: 12px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    `;
    
    debugPanel.innerHTML = `
        <div style="font-weight: bold; margin-bottom: 8px;">🔧 Debug Tools</div>
        <button onclick="debugAllUI()" style="display: block; width: 100%; margin: 2px 0; padding: 4px; font-size: 11px;">Debug All</button>
        <button onclick="testModalOpen()" style="display: block; width: 100%; margin: 2px 0; padding: 4px; font-size: 11px;">Test Modal</button>
        <button onclick="forceLoadLeaderboard()" style="display: block; width: 100%; margin: 2px 0; padding: 4px; font-size: 11px;">Fix Leaderboard</button>
        <button onclick="quickFixUI()" style="display: block; width: 100%; margin: 2px 0; padding: 4px; font-size: 11px;">Quick Fix</button>
        <button onclick="this.parentElement.remove()" style="display: block; width: 100%; margin: 2px 0; padding: 4px; font-size: 11px; background: #dc3545; color: white;">Close</button>
    `;
    
    document.body.appendChild(debugPanel);
}

function checkUserStatsUpdate() {
    fetch(`${APPS_SCRIPT_URL}?action=getUsers&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            console.log('👥 CHECKING USER STATS AFTER PROCESSING...');
            
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const username = values[headers.indexOf('Username')];
                const score = values[headers.indexOf('Score')];
                const streak = values[headers.indexOf('Streak')];
                const accuracy = values[headers.indexOf('Accuracy')];
                
                if (parseInt(score) > 0 || parseInt(streak) > 0) {
                    console.log(`✅ ${username}: Score=${score}, Streak=${streak}, Accuracy=${accuracy}%`);
                }
            }
        });
}

// MANUAL PROCESSING FUNCTION - USE THIS TO FORCE SCORING
function forceProcessing() {
    console.log('🚀 FORCING GAME RESULTS PROCESSING...');
    
    fetch(`${APPS_SCRIPT_URL}?action=processResults&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(result => {
            console.log('📋 PROCESSING RESULT:', result);
            
            // Wait and check results
            setTimeout(() => {
                console.log('🔍 Checking results after forced processing...');
                checkPicksAfterProcessing();
            }, 2000);
        })
        .catch(error => {
            console.error('❌ FORCE PROCESSING ERROR:', error);
        });
}

// STEP-BY-STEP TESTING FUNCTION
function stepByStepTest() {
    console.log('=== STEP BY STEP SCORING TEST ===');
    console.log('Step 1: Checking your login status...');
    
    if (!currentUser) {
        console.log('❌ You need to login first!');
        return;
    }
    
    console.log(`✅ Logged in as: ${currentUser.username}`);
    console.log('Step 2: Running comprehensive debug...');
    
    debugScoringSystem();
}

// QUICK FIX: Manual update function for immediate testing
function manuallyUpdateMyStats() {
    if (!currentUser) {
        console.log('❌ Please login first');
        return;
    }
    
    // This is a temporary manual update for testing
    const newScore = prompt('Enter your test score:');
    const newStreak = prompt('Enter your test streak:');
    
    if (newScore && newStreak) {
        const updateData = new FormData();
        updateData.append('action', 'updateUserStats');
        updateData.append('userID', currentUser.id);
        updateData.append('score', newScore);
        updateData.append('streak', newStreak);
        updateData.append('accuracy', '75'); // Test accuracy
        
        fetch(APPS_SCRIPT_URL, {
            method: 'POST',
            body: updateData
        })
        .then(response => response.text())
        .then(result => {
            console.log('Manual stats update result:', result);
            
            // Refresh leaderboard
            if (typeof loadUsers === 'function') {
                loadUsers();
            }
        });
    }
}


        function updateLeaderboard() {
            const container = document.getElementById('leaderboardContainer');
            
            const sortedUsers = [...allUsers]
                .sort((a, b) => (parseInt(b.Score) || 0) - (parseInt(a.Score) || 0))
                .slice(0, 10);
            
            container.innerHTML = sortedUsers.map((user, index) => `
                <div style="
                    display: flex !important;
                    justify-content: space-between !important;
                    align-items: center !important;
                    padding: 15px !important;
                    background: white !important;
                    border-radius: 8px !important;
                    margin-bottom: 10px !important;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
                    ${user.Username === currentUser?.username ? 'border: 2px solid #667eea !important;' : ''}
                ">
                    <div style="display: flex !important; align-items: center !important; gap: 15px !important;">
                        <div style="
                            width: 30px !important;
                            height: 30px !important;
                            background: ${index < 3 ? ['#f59e0b', '#9ca3af', '#cd7f32'][index] : '#667eea'} !important;
                            color: white !important;
                            border-radius: 50% !important;
                            display: flex !important;
                            align-items: center !important;
                            justify-content: center !important;
                            font-weight: bold !important;
                        ">${index + 1}</div>
                        <div>
                            <div style="font-weight: bold !important; color: #333 !important;">
                                ${user.Username}${user.Username === currentUser?.username ? ' (You)' : ''}
                            </div>
                            <div style="font-size: 12px !important; color: #666 !important;">
                                ${user.Accuracy || 0}% accuracy • ${user.Streak || 0} streak
                            </div>
                        </div>
                    </div>
                    <div style="font-weight: bold !important; color: #10b981 !important; font-size: 18px !important;">
                        ${user.Score || 0}
                    </div>
                </div>
            `).join('');
            
            if (sortedUsers.length === 0) {
                container.innerHTML = '<p style="text-align: center !important; color: #666 !important;">No players yet!</p>';
            }
        }

        function logout() {
            currentUser = null;
            userPicks = {};
            userAchievements = [];
            totalPicksMade = 0;
            userCoins = 0;
            likedPicks.clear();
            submittedGames.clear();
            
            document.getElementById('headerSubtext').textContent = 'Make your predictions and share your insights';
            document.getElementById('loginBtn').style.display = 'block';
            document.getElementById('accountDropdown').style.display = 'none';
            document.getElementById('achievementsBtn').style.display = 'none';
            document.getElementById('userStatsSection').style.display = 'none';
            
            hideAccountMenu();
            
            const submitBtn = document.getElementById('submitPicksBtn');
            submitBtn.innerHTML = 'Submit All Picks';
            submitBtn.style.background = 'linear-gradient(135deg, #9ca3af 0%, #6b7280 100%)';
            submitBtn.disabled = true;
            
            document.querySelectorAll('[id^="pick_"]').forEach(btn => {
                btn.style.background = 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)';
                btn.style.borderColor = '#e2e8f0';
                btn.style.color = '#334155';
                btn.style.boxShadow = 'none';
            });
            
            updateCommunityFeed();
            showNotification('Successfully logged out. See you next time!', 'info', 3000);
        }

        function showNotification(message, type = 'info', duration = 4000) {
            const container = document.getElementById('notificationContainer');
            
            const notification = document.createElement('div');
            notification.style.cssText = `
                background: ${getNotificationColor(type)} !important;
                color: white !important;
                padding: 15px 20px !important;
                border-radius: 10px !important;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2) !important;
                font-weight: bold !important;
                font-size: 14px !important;
                transform: translateY(-100%) !important;
                transition: all 0.3s ease !important;
                cursor: pointer !important;
                word-wrap: break-word !important;
                max-width: 300px !important;
            `;
            
            notification.innerHTML = message;
            container.appendChild(notification);
            
            setTimeout(() => {
                notification.style.transform = 'translateY(0)';
            }, 100);
            
            const timeoutId = setTimeout(() => {
                removeNotification(notification);
            }, duration);
            
            notification.onclick = () => {
                clearTimeout(timeoutId);
                removeNotification(notification);
            };
        }

// ADD THIS FUNCTION TO YOUR HTML JavaScript SECTION:

function checkMyResults() {
    if (!currentUser) {
        console.log('❌ Please login first');
        return;
    }
    
    console.log(`=== CHECKING RESULTS FOR: ${currentUser.username} ===`);
    
    fetch(`${APPS_SCRIPT_URL}?action=getUserPickResults&username=${currentUser.username}&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            console.log('MY PICK RESULTS:', csvData);
            
            if (csvData.trim() === '' || csvData.includes('Error')) {
                console.log('❌ No scored picks found for this user');
            } else {
                const lines = csvData.trim().split('\n');
                console.log(`✅ Found ${lines.length - 1} scored picks`);
                
                // Show summary
                let correctPicks = 0;
                let totalPoints = 0;
                let totalScoredPicks = 0;
                
                for (let i = 1; i < lines.length; i++) {
                    const values = parseCSVLine(lines[i]);
                    const isCorrect = values[5]; // IsCorrect column
                    const points = parseInt(values[7]) || 0; // Points column
                    
                    totalScoredPicks++;
                    if (isCorrect === 'TRUE' || isCorrect === true) {
                        correctPicks++;
                    }
                    totalPoints += points;
                }
                
                const accuracy = totalScoredPicks > 0 ? Math.round((correctPicks / totalScoredPicks) * 100) : 0;
                
                console.log(`📊 SUMMARY: ${correctPicks}/${totalScoredPicks} correct picks (${accuracy}%), ${totalPoints} total points`);
                
                // Update debug status
                const debugStatus = document.getElementById('debugStatus');
                if (debugStatus) {
                    debugStatus.textContent = `${correctPicks}/${totalScoredPicks} picks scored`;
                    debugStatus.style.background = totalScoredPicks > 0 ? 'linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%)' : 'linear-gradient(135deg, #fef3c7 0%, #fde68a 100%)';
                }
            }
        })
        .catch(error => {
            console.error('Error checking my results:', error);
        });
}

// ALSO ADD THIS FIXED hideNotification function:
function hideNotification() {
    const notification = document.querySelector('.notification');
    if (notification) {
        notification.style.display = 'none';
    }
    
    // Also try other common notification selectors
    const notifications = document.querySelectorAll('[class*="notification"], [id*="notification"], .alert, .toast');
    notifications.forEach(notif => {
        notif.style.display = 'none';
    });
}

        function removeNotification(notification) {
            notification.style.transform = 'translateY(-100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }

        function getNotificationColor(type) {
            const colors = {
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b',
                info: '#667eea',
                pick: '#6366f1'
            };
            return colors[type] || colors.info;
        }

        function showMessage(text, type) {
            const messageArea = document.getElementById('messageArea');
            messageArea.textContent = text;
            messageArea.style.display = 'block';
            
            if (type === 'error') {
                messageArea.style.background = '#fee2e2';
                messageArea.style.color = '#dc2626';
            } else if (type === 'success') {
                messageArea.style.background = '#d1fae5';
                messageArea.style.color = '#065f46';
            } else {
                messageArea.style.background = '#dbeafe';
                messageArea.style.color = '#1e40af';
            }
        }

        function clearMessage() {
            document.getElementById('messageArea').style.display = 'none';
        }

        // Initialize the app on load
        initializeApp();

        console.log('FinalScore Pick\'em Platform - Fixed and Ready!');
        console.log('Google Apps Script URL:', APPS_SCRIPT_URL);
        console.log('Features: Google Sheets Integration, Real-time Pick Submission, Community Features');
// Start countdown updates when page loads
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        if (todaysGames.length > 0) {
            startCountdownUpdates();
        }
    }, 2000);
});

// Clear countdown interval when page unloads
window.addEventListener('beforeunload', function() {
    if (window.countdownInterval) {
        clearInterval(window.countdownInterval);
    }
});

// Start countdown updates when page loads
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        if (todaysGames.length > 0) {
            startCountdownUpdates();
        }
    }, 2000);
});

// Clear countdown interval when page unloads
window.addEventListener('beforeunload', function() {
    if (window.countdownInterval) {
        clearInterval(window.countdownInterval);
    }
});

console.log('FinalScore Pick\'em Platform - Enhanced with Countdown & Filtering!');
// 🔍 STEP 1: Test Google Apps Script Connection
        async function testGoogleSheetsConnection() {
            console.log('=== TESTING GOOGLE SHEETS CONNECTION ===');
            
            try {
                // Test basic connection
                const response = await fetch(`${APPS_SCRIPT_URL}?action=getUsers&cacheBust=${Date.now()}`);
                const result = await response.text();
                
                console.log('✅ Basic connection works:', response.ok);
                console.log('Response preview:', result.substring(0, 100));
                
                // Test community picks specifically
                const communityResponse = await fetch(`${APPS_SCRIPT_URL}?action=getCommunityPicks&cacheBust=${Date.now()}`);
                const communityResult = await communityResponse.text();
                
                console.log('✅ Community picks connection:', communityResponse.ok);
                console.log('Community response:', communityResult);
                
                if (communityResult.includes('Error') || !communityResponse.ok) {
                    console.log('❌ Community picks action not working properly');
                    console.log('Make sure your Google Apps Script has the getCommunityPicks function');
                }
                
            } catch (error) {
                console.error('❌ Connection failed:', error);
            }
        }

        // 🔍 STEP 2: Test Community Pick Save Function
        async function testSaveCommunityPick() {
            console.log('=== TESTING COMMUNITY PICK SAVE ===');
            
            if (!currentUser) {
                console.log('❌ Please login first');
                return;
            }
            
            const testPick = {
                id: Date.now(),
                username: currentUser.username,
                gameTitle: 'Test Game A vs Test Game B',
                pickType: 'winner',
                selection: 'Test Game A',
                pickDisplay: 'Test Game A',
                reasoning: 'This is a test reasoning to check if community picks are saving properly.',
                confidence: 4,
                timestamp: new Date().toISOString(),
                likes: 0,
                likedBy: ''
            };
            
            console.log('📤 Sending test community pick:', testPick);
            
            try {
                const formData = new URLSearchParams({
                    action: 'saveCommunityPick',
                    id: testPick.id,
                    username: testPick.username,
                    gameTitle: testPick.gameTitle,
                    pickType: testPick.pickType,
                    selection: testPick.selection,
                    pickDisplay: testPick.pickDisplay,
                    reasoning: testPick.reasoning,
                    confidence: testPick.confidence,
                    timestamp: testPick.timestamp,
                    likes: testPick.likes,
                    likedBy: testPick.likedBy
                });
                
                console.log('📤 Form data being sent:', [...formData.entries()]);
                
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData
                });
                
                const result = await response.text();
                console.log('📥 Save response:', result);
                
                if (response.ok && result.includes('successfully')) {
                    console.log('✅ Community pick saved successfully!');
                    
                    // Wait a moment then check if it appears
                    setTimeout(async () => {
                        console.log('🔍 Checking if pick appears in Google Sheets...');
                        await loadCommunityPicks();
                    }, 2000);
                } else {
                    console.log('❌ Community pick save failed:', result);
                }
                
            } catch (error) {
                console.error('❌ Error testing community pick save:', error);
            }
        }

        // 🔍 STEP 3: Enhanced Debug Version of loadCommunityPicks
        async function debugLoadCommunityPicks() {
            console.log('=== DEBUG: LOADING COMMUNITY PICKS ===');
            
            try {
                const response = await fetch(`${APPS_SCRIPT_URL}?action=getCommunityPicks&cacheBust=${Date.now()}`);
                const csvData = await response.text();
                
                console.log('📥 Raw CSV response:', csvData);
                console.log('📊 Response length:', csvData.length);
                console.log('📊 Response status:', response.ok);
                
                if (!csvData || csvData.includes('Error') || csvData.trim() === '') {
                    console.log('❌ No community picks data received');
                    console.log('This usually means:');
                    console.log('1. CommunityPicks sheet doesn\'t exist');
                    console.log('2. getCommunityPicks function missing from Google Apps Script');
                    console.log('3. Permission issues');
                    return;
                }
                
                // Parse CSV data with detailed logging
                const lines = csvData.trim().split('\n');
                console.log('📋 Number of lines:', lines.length);
                console.log('📋 Headers:', lines[0]);
                
                if (lines.length <= 1) {
                    console.log('⚠️ Only headers found, no actual community picks');
                    return;
                }
                
                // Parse each line
                for (let i = 1; i < lines.length; i++) {
                    console.log(`📝 Line ${i}:`, lines[i]);
                    
                    const values = parseCSVLine(lines[i]);
                    console.log(`📝 Parsed values:`, values);
                }
                
                console.log('✅ Community picks parsing completed');
                
            } catch (error) {
                console.error('❌ Error in debug load:', error);
            }
        }

        // 🔍 STEP 4: Check Google Apps Script Deployment
        function checkGoogleAppsScriptDeployment() {
            console.log('=== CHECKING GOOGLE APPS SCRIPT DEPLOYMENT ===');
            console.log('📍 Apps Script URL:', APPS_SCRIPT_URL);
            
            // Check if URL looks correct
            if (!APPS_SCRIPT_URL.includes('https://script.google.com')) {
                console.log('❌ Apps Script URL doesn\'t look correct');
                console.log('Make sure you have the deployed web app URL, not the editor URL');
                return;
            }
            
            if (!APPS_SCRIPT_URL.includes('/exec')) {
                console.log('⚠️ URL should end with /exec for deployed web app');
                console.log('Make sure you deployed as web app and copied the correct URL');
            }
            
            console.log('✅ Apps Script URL looks correct');
            
            // Test different actions
            const actionsToTest = ['getUsers', 'getGames', 'getCommunityPicks'];
            
            actionsToTest.forEach(async (action) => {
                try {
                    const response = await fetch(`${APPS_SCRIPT_URL}?action=${action}&test=true`);
                    const result = await response.text();
                    
                    console.log(`📊 ${action}:`, response.ok ? '✅ Working' : '❌ Failed');
                    if (!response.ok) {
                        console.log(`   Error: ${result}`);
                    }
                } catch (error) {
                    console.log(`📊 ${action}: ❌ Failed -`, error.message);
                }
            });
        }

        // 🔍 STEP 5: Test the parseCSVLine function
        function testCSVParsing() {
            console.log('=== TESTING CSV PARSING ===');
            
            // Test with sample community pick data
            const sampleCSVLine = '1,ProBettor,"Lakers vs Warriors",winner,Lakers,Lakers,"LeBron is back, strong at home",4,2024-06-25T10:30:00.000Z,12,"demo,test"';
            
            console.log('📝 Sample CSV line:', sampleCSVLine);
            
            const parsed = parseCSVLine(sampleCSVLine);
            console.log('📝 Parsed result:', parsed);
            
            // Check if parseCSVLine function exists
            if (typeof parseCSVLine === 'undefined') {
                console.log('❌ parseCSVLine function is missing!');
                console.log('Add this function to your code:');
                console.log(`
function parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
            inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
            result.push(current);
            current = '';
        } else {
            current += char;
        }
    }
    
    result.push(current);
    return result;
}
                `);
            } else {
                console.log('✅ parseCSVLine function exists and working');
            }
        }

        // 🔍 STEP 6: Complete Debug Run
        async function runCompleteDebug() {
            console.log('🚀 STARTING COMPLETE COMMUNITY PICKS DEBUG');
            console.log('=======================================');
            
            // Step 1: Check basic setup
            console.log('👤 Current user:', currentUser);
            console.log('🌐 Apps Script URL:', APPS_SCRIPT_URL);
            
            if (!currentUser) {
                console.log('❌ Please login first, then run this debug again');
                return;
            }
            
            // Step 2: Test connection
            await testGoogleSheetsConnection();
            
            // Step 3: Check deployment
            checkGoogleAppsScriptDeployment();
            
            // Step 4: Test CSV parsing
            testCSVParsing();
            
            // Step 5: Test loading community picks
            await debugLoadCommunityPicks();
            
            // Step 6: Test saving a community pick
            await testSaveCommunityPick();
            
            console.log('=======================================');
            console.log('🏁 COMPLETE DEBUG FINISHED');
            console.log('Check the results above to identify the issue');
        }

        // 🔍 STEP 7: Quick Fix Functions
        
        // Fix 1: Ensure parseCSVLine exists
        function ensureParseCSVLine() {
            if (typeof parseCSVLine === 'undefined') {
                console.log('🔧 Adding missing parseCSVLine function...');
                
                window.parseCSVLine = function(line) {
                    const result = [];
                    let current = '';
                    let inQuotes = false;
                    
                    for (let i = 0; i < line.length; i++) {
                        const char = line[i];
                        
                        if (char === '"') {
                            inQuotes = !inQuotes;
                        } else if (char === ',' && !inQuotes) {
                            result.push(current);
                            current = '';
                        } else {
                            current += char;
                        }
                    }
                    
                    result.push(current);
                    return result;
                };
                
                console.log('✅ parseCSVLine function added');
            }
        }

        // Fix 2: Force refresh community picks
        async function forceRefreshCommunityPicks() {
            console.log('🔄 Force refreshing community picks...');
            
            try {
                const response = await fetch(`${APPS_SCRIPT_URL}?action=getCommunityPicks&forceClear=true&cacheBust=${Date.now()}`);
                const result = await response.text();
                
                console.log('📥 Forced refresh result:', result);
                
                if (result && !result.includes('Error')) {
                    // Try to parse and display
                    const lines = result.trim().split('\n');
                    if (lines.length > 1) {
                        console.log('✅ Found community picks data!');
                        console.log('📊 Number of picks:', lines.length - 1);
                        
                        // Update the communityPicks array
                        loadCommunityPicks();
                    } else {
                        console.log('⚠️ CommunityPicks sheet exists but is empty');
                    }
                } else {
                    console.log('❌ No valid community picks data');
                }
                
            } catch (error) {
                console.error('❌ Force refresh failed:', error);
            }
        }

        // 🔍 STEP 8: Auto-run basic checks when this script loads
        document.addEventListener('DOMContentLoaded', function() {
            // Ensure required functions exist
            ensureParseCSVLine();
            
            // Log debug tools availability
            console.log('🔧 Community Picks Debug Tools Loaded!');
            console.log('Available debug functions:');
            console.log('- runCompleteDebug() - Run full debug');
            console.log('- testGoogleSheetsConnection() - Test connection');
            console.log('- testSaveCommunityPick() - Test saving');
            console.log('- debugLoadCommunityPicks() - Test loading');
            console.log('- forceRefreshCommunityPicks() - Force refresh');
console.log('🎨 Premium Visual System - Part 2 Loaded!');
console.log('✨ Enhanced animations, modals, forms, and utility classes ready!');
        });

        console.log('🔍 Community Picks Debug Tools Ready!');
        console.log('Run runCompleteDebug() in console to start debugging');
console.log('Google Apps Script URL:', APPS_SCRIPT_URL);
console.log('Features: Google Sheets Integration, Real-time Pick Submission, Community Features, Live Countdowns');



    </script>
</body>
</html>