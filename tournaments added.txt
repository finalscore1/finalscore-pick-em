<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FinalScore - Pick'em Challenge</title>
</head>
<body>
    <div style="
        display: block !important; 
        visibility: visible !important; 
        opacity: 1 !important; 
        position: relative !important;
        width: 100% !important;
        min-height: 100vh !important;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        font-family: 'Arial', sans-serif !important;
        margin: 0 !important;
        padding: 0 !important;
    " id="pickemApp">
        
        <!-- Notification System -->
        <div id="notificationContainer" style="
            position: fixed !important;
            top: 20px !important;
            right: 20px !important;
            z-index: 1000 !important;
            display: flex !important;
            flex-direction: column !important;
            gap: 10px !important;
            max-width: 350px !important;
        "></div>
        
        <!-- Main Header -->
        <header style="
            background: rgba(255, 255, 255, 0.95) !important;
            backdrop-filter: blur(10px) !important;
            padding: 20px !important;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;
            position: sticky !important;
            top: 0 !important;
            z-index: 100 !important;
        ">
            <div style="
                max-width: 1200px !important;
                margin: 0 auto !important;
                display: flex !important;
                justify-content: space-between !important;
                align-items: center !important;
                flex-wrap: wrap !important;
                gap: 15px !important;
            ">
                <div>
                    <h1 style="
                        margin: 0 !important;
                        color: #667eea !important;
                        font-size: 28px !important;
                        font-weight: bold !important;
                    ">FinalScore</h1>
                    <p style="
                        margin: 5px 0 0 0 !important;
                        color: #666 !important;
                        font-size: 14px !important;
                    " id="headerSubtext">Make your predictions and share your insights</p>
                </div>
                
                <div style="display: flex !important; gap: 15px !important; align-items: center !important;">
                    <button id="achievementsBtn" onclick="showAchievements()" style="
                        padding: 10px 20px !important;
                        background: #f59e0b !important;
                        color: white !important;
                        border: none !important;
                        border-radius: 8px !important;
                        cursor: pointer !important;
                        font-weight: bold !important;
                        display: none !important;
                    ">Achievements</button>
                    
                    <!-- Account Dropdown Button -->
                    <div id="accountDropdown" style="position: relative !important; display: none !important;">
                        <button id="accountBtn" onclick="toggleAccountMenu()" style="
                            padding: 10px 20px !important;
                            background: #667eea !important;
                            color: white !important;
                            border: none !important;
                            border-radius: 8px !important;
                            cursor: pointer !important;
                            font-weight: bold !important;
                            display: flex !important;
                            align-items: center !important;
                            gap: 8px !important;
                        ">
                            üë§ Account <span style="font-size: 12px !important;">‚ñº</span>
                        </button>
                        
                        <!-- Dropdown Menu -->
                        <div id="accountMenu" style="
                            position: absolute !important;
                            top: 100% !important;
                            right: 0 !important;
                            background: white !important;
                            border: 2px solid #e5e7eb !important;
                            border-radius: 8px !important;
                            box-shadow: 0 4px 15px rgba(0,0,0,0.15) !important;
                            z-index: 1000 !important;
                            min-width: 200px !important;
                            display: none !important;
                            margin-top: 5px !important;
                        ">
                            <!-- User Info Section -->
                            <div style="
                                padding: 15px !important;
                                border-bottom: 1px solid #e5e7eb !important;
                                background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%) !important;
                                border-radius: 6px 6px 0 0 !important;
                            ">
                                <div style="font-weight: bold !important; color: #333 !important; margin-bottom: 5px !important;">
                                    <span id="accountUsername">Username</span>
                                </div>
                                <div style="
                                    display: flex !important;
                                    align-items: center !important;
                                    gap: 8px !important;
                                    background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%) !important;
                                    color: white !important;
                                    padding: 6px 12px !important;
                                    border-radius: 15px !important;
                                    font-weight: bold !important;
                                    font-size: 14px !important;
                                    width: fit-content !important;
                                ">
                                    üí∞ <span id="accountCoins">0</span> coins
                                </div>
                            </div>
                            
                            <!-- Menu Options -->
                            <div style="padding: 8px !important;">
                                <button onclick="showProfile()" style="
                                    width: 100% !important;
                                    padding: 12px 15px !important;
                                    background: none !important;
                                    border: none !important;
                                    text-align: left !important;
                                    cursor: pointer !important;
                                    border-radius: 6px !important;
                                    color: #333 !important;
                                    font-weight: 500 !important;
                                " onmouseover="this.style.background='#f3f4f6'" onmouseout="this.style.background='none'">
                                    üìä View Profile
                                </button>
                                
                                <button onclick="showSettings()" style="
                                    width: 100% !important;
                                    padding: 12px 15px !important;
                                    background: none !important;
                                    border: none !important;
                                    text-align: left !important;
                                    cursor: pointer !important;
                                    border-radius: 6px !important;
                                    color: #333 !important;
                                    font-weight: 500 !important;
                                " onmouseover="this.style.background='#f3f4f6'" onmouseout="this.style.background='none'">
                                    ‚öôÔ∏è Settings
                                </button>
                                
                                <hr style="margin: 8px 0 !important; border: none !important; border-top: 1px solid #e5e7eb !important;">
                                
                                <button onclick="logout(); hideAccountMenu();" style="
                                    width: 100% !important;
                                    padding: 12px 15px !important;
                                    background: none !important;
                                    border: none !important;
                                    text-align: left !important;
                                    cursor: pointer !important;
                                    border-radius: 6px !important;
                                    color: #ef4444 !important;
                                    font-weight: 500 !important;
                                " onmouseover="this.style.background='#fef2f2'" onmouseout="this.style.background='none'">
                                    üö™ Logout
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <button id="loginBtn" onclick="showLogin()" style="
                        padding: 10px 20px !important;
                        background: #667eea !important;
                        color: white !important;
                        border: none !important;
                        border-radius: 8px !important;
                        cursor: pointer !important;
                        font-weight: bold !important;
                    ">Login</button>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main style="
            max-width: 1200px !important;
            margin: 0 auto !important;
            padding: 30px 20px !important;
        ">
            
            <!-- User Stats Section -->
            <div id="userStatsSection" style="
                display: none !important;
                background: rgba(255, 255, 255, 0.95) !important;
                border-radius: 15px !important;
                padding: 25px !important;
                margin-bottom: 30px !important;
                box-shadow: 0 10px 30px rgba(0,0,0,0.1) !important;
            ">
                <div style="
                    display: flex !important;
                    justify-content: space-between !important;
                    align-items: center !important;
                    margin-bottom: 20px !important;
                ">
                    <div>
                        <h2 style="margin: 0 !important; color: #333 !important;">
                            Welcome back, <span id="welcomeUsername"></span>!
                        </h2>
                        <p style="margin: 5px 0 0 0 !important; color: #666 !important;">
                            Your performance dashboard
                        </p>
                    </div>
                </div>
                
                <!-- Enhanced Stats Grid -->
                <div style="
                    display: grid !important;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)) !important;
                    gap: 20px !important;
                ">
                    <div style="
                        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%) !important;
                        padding: 20px !important;
                        border-radius: 12px !important;
                        text-align: center !important;
                    ">
                        <div style="font-size: 24px !important; font-weight: bold !important; color: #667eea !important;" id="userScore">0</div>
                        <div style="color: #666 !important; font-weight: bold !important;">Score</div>
                    </div>
                    
                    <div style="
                        background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%) !important;
                        padding: 20px !important;
                        border-radius: 12px !important;
                        text-align: center !important;
                    ">
                        <div style="font-size: 24px !important; font-weight: bold !important; color: #10b981 !important;" id="userAccuracy">0%</div>
                        <div style="color: #666 !important; font-weight: bold !important;">Accuracy</div>
                    </div>
                    
                    <div style="
                        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%) !important;
                        padding: 20px !important;
                        border-radius: 12px !important;
                        text-align: center !important;
                    ">
                        <div style="font-size: 24px !important; font-weight: bold !important; color: #f59e0b !important;" id="userStreak">0</div>
                        <div style="color: #666 !important; font-weight: bold !important;">Win Streak</div>
                    </div>
                    
                    <div onclick="showCommunity()" style="
                        background: linear-gradient(135deg, #fce7f3 0%, #fbcfe8 100%) !important;
                        padding: 20px !important;
                        border-radius: 12px !important;
                        text-align: center !important;
                        cursor: pointer !important;
                        transition: all 0.3s ease !important;
                        border: 2px solid transparent !important;
                    " onmouseover="this.style.transform='scale(1.05)'; this.style.borderColor='#8b5cf6';" onmouseout="this.style.transform='scale(1)'; this.style.borderColor='transparent';">
                        <div style="font-size: 32px !important; font-weight: bold !important; color: #8b5cf6 !important; margin-bottom: 8px !important;">üí≠</div>
                        <div style="color: #666 !important; font-weight: bold !important; font-size: 16px !important;">Community</div>
                        <div style="color: #8b5cf6 !important; font-size: 12px !important; margin-top: 4px !important;">Share & discuss picks</div>
                    </div>
                </div>
            </div>

 <!-- Games Section -->
<div style="
    background: rgba(255, 255, 255, 0.95) !important;
    border-radius: 15px !important;
    padding: 25px !important;
    margin-bottom: 30px !important;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1) !important;
    backdrop-filter: blur(10px) !important;
">
    <div style="
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        margin-bottom: 25px !important;
        flex-wrap: wrap !important;
        gap: 15px !important;
    ">
        <div>
            <h2 style="margin: 0 !important; color: #333 !important; font-size: 24px !important;">Today's Games</h2>
            <p style="margin: 5px 0 0 0 !important; color: #666 !important;">
                Make your predictions and share your reasoning
            </p>
        </div>
        
        <div style="display: flex !important; gap: 15px !important; align-items: center !important; flex-wrap: wrap !important;">
            <div id="pickStatus" style="
                background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%) !important;
                padding: 12px 18px !important;
                border-radius: 25px !important;
                font-size: 14px !important;
                font-weight: bold !important;
                color: #4a5568 !important;
                border: 2px solid #e2e8f0 !important;
            ">0 picks made</div>
            
            <button onclick="quickFillRandom()" style="
                padding: 10px 16px !important;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
                color: white !important;
                border: none !important;
                border-radius: 20px !important;
                font-size: 12px !important;
                font-weight: bold !important;
                cursor: pointer !important;
            ">Quick Fill</button>
            
            <button onclick="clearAllPicks()" style="
                padding: 10px 16px !important;
                background: #ef4444 !important;
                color: white !important;
                border: none !important;
                border-radius: 20px !important;
                font-size: 12px !important;
                font-weight: bold !important;
                cursor: pointer !important;
            ">Clear All</button>
            
            <button onclick="resetSubmittedGames()" style="
                padding: 10px 16px !important;
                background: #8b5cf6 !important;
                color: white !important;
                border: none !important;
                border-radius: 20px !important;
                font-size: 12px !important;
                font-weight: bold !important;
                cursor: pointer !important;
            ">Reset Submitted</button>
        </div>
    </div>
    
    <div id="gamesContainer" style="
        display: flex !important;
        flex-direction: column !important;
        gap: 20px !important;
    ">
        <!-- Games will be loaded here -->
    </div>
    
    <button id="submitPicksBtn" onclick="submitAllPicks()" style="
        width: 100% !important;
        padding: 18px !important;
        background: linear-gradient(135deg, #9ca3af 0%, #6b7280 100%) !important;
        color: white !important;
        border: none !important;
        border-radius: 12px !important;
        font-size: 16px !important;
        font-weight: bold !important;
        cursor: not-allowed !important;
        margin-top: 25px !important;
        transition: all 0.3s ease !important;
    " disabled>
        Submit All Picks
    </button>
</div>

<!-- üîß Debug Tools Section -->
<div style="
    background: rgba(254, 243, 199, 0.95) !important;
    border-radius: 15px !important;
    padding: 20px !important;
    margin-bottom: 30px !important;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1) !important;
    backdrop-filter: blur(10px) !important;
    border-left: 4px solid #f59e0b !important;
">
    <div style="
        display: flex !important;
        justify-content: space-between !important;
        align-items: center !important;
        margin-bottom: 15px !important;
        flex-wrap: wrap !important;
        gap: 10px !important;
    ">
        <h4 style="margin: 0 !important; color: #92400e !important; font-size: 18px !important;">üîß Scoring System Debug Tools</h4>
        <div id="debugStatus" style="
            background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%) !important;
            padding: 8px 12px !important;
            border-radius: 15px !important;
            font-size: 12px !important;
            font-weight: bold !important;
            color: #92400e !important;
            border: 2px solid #f59e0b !important;
        ">Ready for testing</div>
    </div>
    
    <p style="margin: 0 0 15px 0 !important; color: #92400e !important; font-size: 14px !important;">
        Use these tools to test and debug the automatic scoring system when games are completed.
    </p>
    
    <div style="display: flex !important; gap: 10px !important; flex-wrap: wrap !important;">
        <button onclick="stepByStepTest()" style="
            padding: 12px 18px !important;
            background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%) !important;
            color: white !important;
            border: none !important;
            border-radius: 8px !important;
            font-size: 13px !important;
            font-weight: bold !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 2px 8px rgba(220, 38, 38, 0.3) !important;
        " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
            üéØ Full Debug Test
        </button>
        
        <button onclick="forceProcessing()" style="
            padding: 12px 18px !important;
            background: linear-gradient(135deg, #7c3aed 0%, #6d28d9 100%) !important;
            color: white !important;
            border: none !important;
            border-radius: 8px !important;
            font-size: 13px !important;
            font-weight: bold !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 2px 8px rgba(124, 58, 237, 0.3) !important;
        " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
            üöÄ Force Processing
        </button>
        
        <button onclick="debugScoringSystem()" style="
            padding: 12px 18px !important;
            background: linear-gradient(135deg, #059669 0%, #047857 100%) !important;
            color: white !important;
            border: none !important;
            border-radius: 8px !important;
            font-size: 13px !important;
            font-weight: bold !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 2px 8px rgba(5, 150, 105, 0.3) !important;
        " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
            üîç Debug Only
        </button>
        
        <button onclick="manuallyUpdateMyStats()" style="
            padding: 12px 18px !important;
            background: linear-gradient(135deg, #0369a1 0%, #075985 100%) !important;
            color: white !important;
            border: none !important;
            border-radius: 8px !important;
            font-size: 13px !important;
            font-weight: bold !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 2px 8px rgba(3, 105, 161, 0.3) !important;
        " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
            üìä Manual Stats Test
        </button>
        
        <button onclick="checkMyResults()" style="
            padding: 12px 18px !important;
            background: linear-gradient(135deg, #ea580c 0%, #c2410c 100%) !important;
            color: white !important;
            border: none !important;
            border-radius: 8px !important;
            font-size: 13px !important;
            font-weight: bold !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 2px 8px rgba(234, 88, 12, 0.3) !important;
        " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
            üìã Check My Results
        </button>
    </div>
    
    <div style="
        margin-top: 15px !important;
        padding: 12px !important;
        background: rgba(254, 252, 232, 0.8) !important;
        border-radius: 8px !important;
        border: 1px solid #fbbf24 !important;
    ">
        <div style="font-size: 12px !important; color: #92400e !important;">
            <strong>üí° Quick Guide:</strong><br>
            ‚Ä¢ <strong>Full Debug Test</strong> - Complete system check (start here)<br>
            ‚Ä¢ <strong>Force Processing</strong> - Manually trigger scoring for completed games<br>
            ‚Ä¢ <strong>Debug Only</strong> - Check system status without processing<br>
            ‚Ä¢ <strong>Check My Results</strong> - See your scored picks<br>
            <strong>üëÄ Check browser console (F12) for detailed output</strong>
        </div>
    </div>
</div>

<!-- Leaderboard Section -->
<div style="
    background: rgba(255, 255, 255, 0.95) !important;
    border-radius: 15px !important;
    padding: 25px !important;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1) !important;
">
    <h2 style="margin: 0 0 20px 0 !important; color: #333 !important;">Leaderboard</h2>
    <div id="leaderboardContainer">
        <!-- Leaderboard will be loaded here -->
    </div>
</div>
        </main>

        <!-- Login Modal -->
        <div id="loginModal" style="position: fixed !important; top: 0 !important; left: 0 !important; width: 100% !important; height: 100% !important; background: rgba(0, 0, 0, 0.7) !important; display: none !important; justify-content: center !important; align-items: center !important; z-index: 1000 !important; padding: 20px !important; box-sizing: border-box !important;">
            <div style="background: white !important; border-radius: 15px !important; padding: 30px !important; max-width: 400px !important; width: 100% !important; position: relative !important;">
                <button onclick="hideLogin()" style="position: absolute !important; top: 15px !important; right: 15px !important; background: #ef4444 !important; color: white !important; border: none !important; border-radius: 50% !important; width: 30px !important; height: 30px !important; cursor: pointer !important; font-weight: bold !important;">√ó</button>
                <h2 style="text-align: center !important; margin-bottom: 25px !important; color: #667eea !important;">Join FinalScore</h2>
                <div id="messageArea" style="display: none !important; padding: 15px !important; border-radius: 8px !important; margin-bottom: 20px !important; text-align: center !important; font-weight: bold !important;"></div>
                <div style="display: flex !important; margin-bottom: 25px !important; background: #f0f0f0 !important; border-radius: 10px !important; padding: 5px !important;">
                    <button id="loginTab" style="flex: 1 !important; padding: 12px !important; border: none !important; background: #667eea !important; color: white !important; border-radius: 6px !important; cursor: pointer !important; font-weight: bold !important;" onclick="switchToLogin()">Login</button>
                    <button id="registerTab" style="flex: 1 !important; padding: 12px !important; border: none !important; background: transparent !important; color: #666 !important; border-radius: 6px !important; cursor: pointer !important; font-weight: bold !important;" onclick="switchToRegister()">Register</button>
                </div>
                <div id="loginForm">
                    <div style="margin-bottom: 20px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Username:</label><input type="text" id="loginUsername" style="width: 100% !important; padding: 12px !important; border: 2px solid #ddd !important; border-radius: 6px !important; font-size: 16px !important; box-sizing: border-box !important;" /></div>
                    <div style="margin-bottom: 25px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Password:</label><input type="password" id="loginPassword" style="width: 100% !important; padding: 12px !important; border: 2px solid #ddd !important; border-radius: 6px !important; font-size: 16px !important; box-sizing: border-box !important;" /></div>
                    <button id="loginButton" onclick="attemptLogin()" style="width: 100% !important; padding: 15px !important; background: linear-gradient(135deg, #667eea, #764ba2) !important; color: white !important; border: none !important; border-radius: 8px !important; font-size: 16px !important; font-weight: bold !important; cursor: pointer !important;">Login</button>
                </div>
                <div id="registerForm" style="display: none !important;">
                    <div style="margin-bottom: 20px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Username:</label><input type="text" id="registerUsername" style="width: 100% !important; padding: 12px !important; border: 2px solid #ddd !important; border-radius: 6px !important; font-size: 16px !important; box-sizing: border-box !important;" /></div>
                    <div style="margin-bottom: 20px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Email:</label><input type="email" id="registerEmail" style="width: 100% !important; padding: 12px !important; border: 2px solid #ddd !important; border-radius: 6px !important; font-size: 16px !important; box-sizing: border-box !important;" /></div>
                    <div style="margin-bottom: 25px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Password:</label><input type="password" id="registerPassword" style="width: 100% !important; padding: 12px !important; border: 2px solid #ddd !important; border-radius: 6px !important; font-size: 16px !important; box-sizing: border-box !important;" /></div>
                    <button id="registerButton" onclick="attemptRegister()" style="width: 100% !important; padding: 15px !important; background: linear-gradient(135deg, #667eea, #764ba2) !important; color: white !important; border: none !important; border-radius: 8px !important; font-size: 16px !important; font-weight: bold !important; cursor: pointer !important;">Register</button>
                </div>
                <div style="margin-top: 25px !important; padding: 15px !important; background: #e0f2fe !important; border-radius: 8px !important; font-size: 14px !important;"><strong>Test Accounts:</strong><br/><div style="margin-top: 10px !important;"><strong>demo</strong> / demo123<br/><strong>test</strong> / test123</div></div>
            </div>
        </div>

        <!-- Pick Details Modal -->
        <div id="pickDetailsModal" style="position: fixed !important; top: 0 !important; left: 0 !important; width: 100% !important; height: 100% !important; background: rgba(0, 0, 0, 0.7) !important; display: none !important; justify-content: center !important; align-items: center !important; z-index: 1000 !important; padding: 20px !important; box-sizing: border-box !important;">
            <div style="background: white !important; border-radius: 15px !important; padding: 30px !important; max-width: 500px !important; width: 100% !important; position: relative !important;">
                <button onclick="hidePickDetails()" style="position: absolute !important; top: 15px !important; right: 15px !important; background: #ef4444 !important; color: white !important; border: none !important; border-radius: 50% !important; width: 30px !important; height: 30px !important; cursor: pointer !important; font-weight: bold !important;">√ó</button>
                <h2 style="margin: 0 0 20px 0 !important; color: #667eea !important;" id="pickDetailsTitle">Share Your Prediction</h2>
                <div style="margin-bottom: 20px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Your Pick:</label><div id="selectedPickDisplay" style="padding: 12px !important; background: #f0f9ff !important; border: 2px solid #3b82f6 !important; border-radius: 8px !important; font-weight: bold !important; color: #1e40af !important;"></div></div>
                <div style="margin-bottom: 20px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Confidence Level:</label><div id="confidenceStars" style="display: flex !important; gap: 5px !important; margin-bottom: 10px !important;"><span onclick="setConfidence(1)" style="font-size: 24px !important; cursor: pointer !important; color: #d1d5db !important;">‚òÜ</span><span onclick="setConfidence(2)" style="font-size: 24px !important; cursor: pointer !important; color: #d1d5db !important;">‚òÜ</span><span onclick="setConfidence(3)" style="font-size: 24px !important; cursor: pointer !important; color: #d1d5db !important;">‚òÜ</span><span onclick="setConfidence(4)" style="font-size: 24px !important; cursor: pointer !important; color: #d1d5db !important;">‚òÜ</span><span onclick="setConfidence(5)" style="font-size: 24px !important; cursor: pointer !important; color: #d1d5db !important;">‚òÜ</span></div><div id="confidenceLabel" style="font-size: 14px !important; color: #666 !important;">Click stars to set confidence</div></div>
                <div style="margin-bottom: 25px !important;"><label style="display: block !important; margin-bottom: 8px !important; font-weight: bold !important; color: #333 !important;">Share Your Reasoning (Optional):</label><textarea id="pickReasoning" placeholder="Why are you confident in this pick? Share your analysis..." style="width: 100% !important; height: 100px !important; padding: 12px !important; border: 2px solid #ddd !important; border-radius: 8px !important; font-size: 14px !important; box-sizing: border-box !important; resize: vertical !important; font-family: Arial, sans-serif !important;"></textarea><div style="font-size: 12px !important; color: #666 !important; margin-top: 5px !important;">üí∞ Earn 5 coins for sharing detailed reasoning!</div></div>
                <div style="display: flex !important; gap: 15px !important;"><button onclick="confirmPick()" style="flex: 1 !important; padding: 15px !important; background: linear-gradient(135deg, #10b981, #059669) !important; color: white !important; border: none !important; border-radius: 8px !important; font-size: 16px !important; font-weight: bold !important; cursor: pointer !important;">Confirm Pick</button><button onclick="hidePickDetails()" style="padding: 15px 20px !important; background: #6b7280 !important; color: white !important; border: none !important; border-radius: 8px !important; font-size: 16px !important; font-weight: bold !important; cursor: pointer !important;">Cancel</button></div>
            </div>
        </div>

        <!-- Community Modal -->
        <div id="communityModal" style="position: fixed !important; top: 0 !important; left: 0 !important; width: 100% !important; height: 100% !important; background: rgba(0, 0, 0, 0.7) !important; display: none !important; justify-content: center !important; align-items: center !important; z-index: 1000 !important; padding: 20px !important;">
            <div style="background: white !important; border-radius: 15px !important; padding: 30px !important; max-width: 800px !important; width: 100% !important; max-height: 90vh !important; overflow-y: auto !important; position: relative !important;">
                <button onclick="hideCommunity()" style="position: absolute !important; top: 15px !important; right: 15px !important; background: #ef4444 !important; color: white !important; border: none !important; border-radius: 50% !important; width: 30px !important; height: 30px !important; cursor: pointer !important; font-weight: bold !important;">√ó</button>
                <h2 style="margin: 0 0 20px 0 !important; color: #667eea !important;">Community Predictions</h2>
                <div id="communityContent" style="max-height: 400px !important; overflow-y: auto !important;"></div>
            </div>
        </div>

        <!-- Achievements Modal -->
        <div id="achievementsModal" style="position: fixed !important; top: 0 !important; left: 0 !important; width: 100% !important; height: 100% !important; background: rgba(0, 0, 0, 0.7) !important; display: none !important; justify-content: center !important; align-items: center !important; z-index: 1000 !important; padding: 20px !important;">
            <div style="background: white !important; border-radius: 15px !important; padding: 30px !important; max-width: 600px !important; width: 100% !important; max-height: 90vh !important; overflow-y: auto !important; position: relative !important;">
                <button onclick="hideAchievements()" style="position: absolute !important; top: 15px !important; right: 15px !important; background: #ef4444 !important; color: white !important; border: none !important; border-radius: 50% !important; width: 30px !important; height: 30px !important; cursor: pointer !important; font-weight: bold !important;">√ó</button>
                <h2 style="margin: 0 0 20px 0 !important; color: #667eea !important;">Your Achievements</h2>
                <div id="achievementsGrid" style="display: grid !important; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)) !important; gap: 15px !important;"></div>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbxnL_Fmd4fFbRw3O8YRGYnjZHBgB3tTIYRQVj70CRi_8J2jsdM0S7j31IywNQdEHDbM/exec';
        
        let allUsers = [];
        let currentUser = null;
        let todaysGames = [];
        let userPicks = {};
        let userAchievements = [];
        let totalPicksMade = 0;
        let communityPicks = [];
        let currentPickDetails = null;
        let userCoins = 0;
        let likedPicks = new Set();
        let submittedGames = new Set();

        // Achievement definitions with coin rewards
        const ACHIEVEMENTS = {
            firstShare: { id: 'firstShare', name: 'First Insight', description: 'Shared your first pick reasoning!', icon: 'üí≠', color: '#10b981', coinReward: 10, condition: () => communityPicks.filter(p => p.username === currentUser?.username && p.reasoning).length >= 1 },
            socialButterfly: { id: 'socialButterfly', name: 'Social Butterfly', description: 'Shared reasoning for 5 picks!', icon: 'ü¶ã', color: '#ec4899', coinReward: 25, condition: () => communityPicks.filter(p => p.username === currentUser?.username && p.reasoning).length >= 5 },
            confident: { id: 'confident', name: 'Supremely Confident', description: 'Made a 5-star confidence pick!', icon: '‚≠ê', color: '#f59e0b', coinReward: 15, condition: () => communityPicks.filter(p => p.username === currentUser?.username && p.confidence === 5).length >= 1 },
            firstPick: { id: 'firstPick', name: 'First Steps', description: 'Made your first pick!', icon: 'üéØ', color: '#10b981', coinReward: 5, condition: () => totalPicksMade >= 1 },
            quickStarter: { id: 'quickStarter', name: 'Quick Starter', description: 'Made 5 picks in one session!', icon: '‚ö°', color: '#f59e0b', coinReward: 15, condition: () => totalPicksMade >= 5 },
            pickMaster: { id: 'pickMaster', name: 'Pick Master', description: 'Made 10 picks total!', icon: 'üèÜ', color: '#8b5cf6', coinReward: 30, condition: () => totalPicksMade >= 10 },
            streakStarter: { id: 'streakStarter', name: 'On Fire', description: 'Reached a 3-game win streak!', icon: 'üî•', color: '#ef4444', coinReward: 20, condition: () => currentUser && currentUser.streak >= 3 },
            streakMaster: { id: 'streakMaster', name: 'Unstoppable', description: 'Reached a 5-game win streak!', icon: 'üåü', color: '#fbbf24', coinReward: 50, condition: () => currentUser && currentUser.streak >= 5 },
            accurateShooter: { id: 'accurateShooter', name: 'Sharp Shooter', description: 'Maintained 80%+ accuracy!', icon: 'üéØ', color: '#06b6d4', coinReward: 40, condition: () => currentUser && currentUser.accuracy >= 80 },
            centurion: { id: 'centurion', name: 'Centurion', description: 'Reached 100 points!', icon: 'üíØ', color: '#ec4899', coinReward: 25, condition: () => currentUser && currentUser.score >= 100 }
        };

        function initializeApp() {
            console.log('Initializing FinalScore Platform...');
            loadUsers();
            loadTodaysGames();
            loadCommunityPicks();
            updateLeaderboard();
        }

        function loadExistingPicks() {
            if (!currentUser) return;
            
            try {
                console.log('Loading existing picks from Google Sheets...');
                
                fetch(`${APPS_SCRIPT_URL}?action=getPicks`)
                .then(response => response.text())
                .then(csvData => {
                    console.log('Picks CSV Response:', csvData);
                    const lines = csvData.trim().split('\n');
                    if (lines.length <= 1) {
                        console.log('No existing picks found');
                        return;
                    }
                    
                    const headers = lines[0].split(',');
                    const userGamePicks = new Set();
                    
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            const values = lines[i].split(',');
                            const pick = {};
                            headers.forEach((header, index) => {
                                pick[header.trim()] = values[index] ? values[index].trim().replace(/"/g, '') : '';
                            });
                            
                            if (pick.Username === currentUser.username && pick.GameID) {
                                userGamePicks.add(parseInt(pick.GameID));
                            }
                        }
                    }
                    
                    submittedGames = userGamePicks;
                    console.log(`Current user (${currentUser.username}) has submitted picks for games:`, Array.from(submittedGames));
                })
                .catch(error => {
                    console.error('Error loading existing picks:', error);
                });
                
            } catch (error) {
                console.error('Error loading existing picks:', error);
            }
        }

     // Enhanced selectPick function with time validation
function selectPick(gameId, pickType, selection) {
    if (!currentUser) {
        showLogin();
        showNotification('Please login to save your picks', 'warning');
        return;
    }
    
    // Check if game is still available for picking
    const game = todaysGames.find(g => g.id == gameId);
    if (game && game.StartTime) {
        const { isExpired, status } = getGameCountdownDetailed(game.StartTime);
        if (isExpired) {
            showNotification(`Picks are closed! Game has ${status === 'live' ? 'started' : 'already begun'}.`, 'warning');
            return;
        }
    }
    
    let pickDisplay = selection;
    
    // Create better display text based on pick type
    if (pickType === 'total') {
        const totalLine = game.TotalLine || game.totalLine || '220.5';
        pickDisplay = `${selection} ${totalLine}`;
    } else if (pickType === 'spread') {
        pickDisplay = selection; // Already formatted like "Lakers -3.5"
    }
    
    currentPickDetails = {
        gameId,
        pickType,
        selection,
        gameTitle: `${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`,
        pickDisplay: pickDisplay
    };
    
    showPickDetails();
}

        function showPickDetails() {
            document.getElementById('pickDetailsTitle').textContent = `${currentPickDetails.gameTitle} - ${currentPickDetails.pickType === 'winner' ? 'Winner' : 'Total Points'}`;
            document.getElementById('selectedPickDisplay').textContent = currentPickDetails.pickDisplay;
            document.getElementById('pickReasoning').value = '';
            resetConfidenceStars();
            document.getElementById('pickDetailsModal').style.display = 'flex';
        }

        function hidePickDetails() {
            document.getElementById('pickDetailsModal').style.display = 'none';
            currentPickDetails = null;
        }

        function setConfidence(level) {
            currentPickDetails.confidence = level;
            updateConfidenceDisplay(level);
        }

        function resetConfidenceStars() {
            document.querySelectorAll('#confidenceStars span').forEach(star => {
                star.style.color = '#d1d5db';
                star.innerHTML = '‚òÜ';
            });
            document.getElementById('confidenceLabel').textContent = 'Click stars to set confidence';
        }

        function updateConfidenceDisplay(level) {
            const stars = document.querySelectorAll('#confidenceStars span');
            const labels = ['', 'Not confident', 'Somewhat confident', 'Confident', 'Very confident', 'Extremely confident'];
            
            stars.forEach((star, index) => {
                if (index < level) {
                    star.style.color = '#f59e0b';
                    star.innerHTML = '‚òÖ';
                } else {
                    star.style.color = '#d1d5db';
                    star.innerHTML = '‚òÜ';
                }
            });
            
            document.getElementById('confidenceLabel').textContent = labels[level] || 'Click stars to set confidence';
        }

        function confirmPick() {
            if (!currentPickDetails.confidence) {
                showNotification('Please set a confidence level!', 'warning');
                return;
            }
            
            const reasoning = document.getElementById('pickReasoning').value.trim();
            
            if (!userPicks[currentPickDetails.gameId]) {
                userPicks[currentPickDetails.gameId] = {};
            }
            
            userPicks[currentPickDetails.gameId][currentPickDetails.pickType] = currentPickDetails.selection;
            totalPicksMade = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            
            if (reasoning) {
                const communityPick = {
                    id: Date.now(),
                    username: currentUser.username,
                    gameTitle: currentPickDetails.gameTitle,
                    pickType: currentPickDetails.pickType,
                    selection: currentPickDetails.selection,
                    pickDisplay: currentPickDetails.pickDisplay,
                    reasoning: reasoning,
                    confidence: currentPickDetails.confidence,
                    timestamp: new Date().toLocaleString(),
                    likes: 0
                };
                
                communityPicks.unshift(communityPick);
                updateCommunityFeed();
                awardCoins(5, 'Shared pick reasoning!');
            }
            
            updatePickVisual(currentPickDetails.gameId, currentPickDetails.pickType, currentPickDetails.selection);
            
            const pickInfo = `${currentPickDetails.pickType === 'winner' ? 'Winner' : 'Total'}: ${currentPickDetails.selection}`;
            showNotification(`Pick confirmed: ${pickInfo} (${currentPickDetails.confidence}‚≠ê)`, 'pick', 3000);
            
            updatePickStatus();
            updateSubmitButton();
            checkAchievements();
            hidePickDetails();
        }

        function updatePickVisual(gameId, pickType, selection) {
            const allButtons = document.querySelectorAll(`[id^="pick_${gameId}_${pickType}_"]`);
            allButtons.forEach(btn => {
                btn.style.background = 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)';
                btn.style.borderColor = '#e2e8f0';
                btn.style.color = '#334155';
            });
            
            const selectedButton = document.getElementById(`pick_${gameId}_${pickType}_${selection}`);
            if (selectedButton) {
                selectedButton.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
                selectedButton.style.borderColor = '#10b981';
                selectedButton.style.color = 'white';
                selectedButton.style.boxShadow = '0 4px 15px rgba(16, 185, 129, 0.3)';
            }
        }

        function loadCommunityPicks() {
            communityPicks = [
                {
                    id: 1, username: 'ProBettor', gameTitle: 'Lakers vs Warriors', pickType: 'winner', selection: 'Lakers', pickDisplay: 'Lakers',
                    reasoning: 'LeBron is back from injury and the Lakers have been dominating at home. Warriors missing key players.',
                    confidence: 4, timestamp: '2 hours ago', likes: 12
                },
                {
                    id: 2, username: 'SportsAnalyst', gameTitle: 'Chiefs vs Bills', pickType: 'total', selection: 'Over', pickDisplay: 'Over 45.5',
                    reasoning: 'Both teams have explosive offenses. Weather looks good for passing. I expect a shootout!',
                    confidence: 5, timestamp: '4 hours ago', likes: 8
                }
            ];
            updateCommunityFeed();
        }

        function updateCommunityFeed() {
            const communityContent = document.getElementById('communityContent');
            
            if (!currentUser) return;
            
            if (communityPicks.length === 0) {
                const emptyMessage = `<div style="text-align: center !important; color: #666 !important; padding: 40px !important;"><div style="font-size: 48px !important; margin-bottom: 15px !important;">üí≠</div><p>No community insights yet. Be the first to share your reasoning!</p></div>`;
                if (communityContent) communityContent.innerHTML = emptyMessage;
                return;
            }
            
            const fullHTML = communityPicks.map(pick => createCommunityPickHTML(pick)).join('');
            if (communityContent) communityContent.innerHTML = fullHTML;
        }

        function createCommunityPickHTML(pick) {
            const isLiked = likedPicks.has(pick.id);
            return `<div style="background: white !important; border: 2px solid #e5e7eb !important; border-radius: 12px !important; padding: 20px !important; margin-bottom: 15px !important; transition: all 0.3s ease !important;" onmouseover="this.style.borderColor='#667eea'" onmouseout="this.style.borderColor='#e5e7eb'">
                <div style="display: flex !important; justify-content: space-between !important; align-items: flex-start !important; margin-bottom: 15px !important; flex-wrap: wrap !important; gap: 10px !important;">
                    <div><div style="display: flex !important; align-items: center !important; gap: 10px !important; margin-bottom: 5px !important;"><span style="font-weight: bold !important; color: #667eea !important;">${pick.username}</span><div style="display: flex !important; gap: 2px !important;">${Array(pick.confidence).fill('‚òÖ').join('')}${Array(5 - pick.confidence).fill('‚òÜ').join('')}</div></div><div style="font-size: 14px !important; color: #666 !important;">${pick.timestamp}</div></div>
                    <div style="background: linear-gradient(135deg, #10b981 0%, #059669 100%) !important; color: white !important; padding: 6px 12px !important; border-radius: 20px !important; font-size: 12px !important; font-weight: bold !important;">${pick.pickDisplay}</div>
                </div>
                <div style="background: #f8fafc !important; padding: 15px !important; border-radius: 8px !important; margin-bottom: 15px !important; border-left: 4px solid #667eea !important;">
                    <div style="font-weight: bold !important; margin-bottom: 8px !important; color: #1f2937 !important;">${pick.gameTitle} - ${pick.pickType === 'winner' ? 'Winner Pick' : 'Total Points'}</div>
                    <div style="color: #4b5563 !important; line-height: 1.5 !important;">"${pick.reasoning}"</div>
                </div>
                <div style="display: flex !important; justify-content: space-between !important; align-items: center !important;">
                    <button onclick="likePick(${pick.id})" style="display: flex !important; align-items: center !important; gap: 5px !important; background: ${isLiked ? '#f59e0b' : 'none'} !important; border: 2px solid ${isLiked ? '#f59e0b' : '#e5e7eb'} !important; color: ${isLiked ? 'white' : '#666'} !important; border-radius: 20px !important; padding: 8px 16px !important; cursor: ${isLiked ? 'not-allowed' : 'pointer'} !important; font-weight: bold !important;">üëç ${pick.likes} ${isLiked ? '(Liked)' : ''}</button>
                    <div style="font-size: 12px !important; color: #666 !important;">üí∞ +5 coins for sharing insights</div>
                </div>
            </div>`;
        }

        function likePick(pickId) {
            if (likedPicks.has(pickId)) {
                showNotification('You already liked this pick!', 'warning', 2000);
                return;
            }
            
            const pick = communityPicks.find(p => p.id === pickId);
            if (pick) {
                pick.likes++;
                likedPicks.add(pickId);
                awardCoins(1, 'Liked a community pick!');
                updateCommunityFeed();
                showNotification('Thanks for the feedback! +1 coin', 'success', 2000);
            }
        }

        function awardCoins(amount, reason) {
            userCoins += amount;
            updateCoinDisplay();
            if (reason) {
                showNotification(`+${amount} coins: ${reason}`, 'success', 3000);
            }
        }

        function updateCoinDisplay() {
            const coinDisplays = ['userCoins', 'userCoinsDisplay', 'accountCoins'];
            coinDisplays.forEach(id => {
                const element = document.getElementById(id);
                if (element) element.textContent = userCoins;
            });
        }

        function showCommunity() {
            updateCommunityFeed();
            document.getElementById('communityModal').style.display = 'flex';
        }

        function hideCommunity() {
            document.getElementById('communityModal').style.display = 'none';
        }

        function checkAchievements() {
            let newAchievements = [];
            
            for (const [key, achievement] of Object.entries(ACHIEVEMENTS)) {
                if (!userAchievements.includes(achievement.id) && achievement.condition()) {
                    userAchievements.push(achievement.id);
                    newAchievements.push(achievement);
                    
                    if (achievement.coinReward) {
                        awardCoins(achievement.coinReward, `Achievement: ${achievement.name}!`);
                    }
                }
            }
            
            newAchievements.forEach((achievement, index) => {
                setTimeout(() => {
                    showNotification(`üèÜ Achievement Unlocked: ${achievement.name}!`, 'success', 4000);
                }, 500 * (index + 1));
            });
            
            return newAchievements;
        }

       // FIXED VERSION - Replace your renderGames() function with this:

// Helper function to properly parse CSV lines (handles commas in quoted values)
function parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
            inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
            result.push(current);
            current = '';
        } else {
            current += char;
        }
    }
    
    result.push(current); // Add the last field
    return result;
}

// UPDATED: Fixed renderGames function with better debugging
function renderGames() {
    const container = document.getElementById('gamesContainer');
    container.innerHTML = '';
    
    console.log('=== RENDER GAMES DEBUG ===');
    console.log('All games:', todaysGames);
    
    // Filter games to only show upcoming games (not completed)
    const availableGames = todaysGames.filter(game => {
        console.log(`Checking game ${game.id}:`, {
            teamA: game.TeamA || game.teamA,
            teamB: game.TeamB || game.teamB,
            status: game.Status || game.status,
            startTime: game.StartTime || game.startTime
        });
        
        // Hide completed games entirely
        const gameStatus = (game.Status || game.status || '').toLowerCase();
        if (gameStatus === 'completed') {
            console.log(`‚ùå Hiding completed game: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
            return false;
        }
        
        // If no StartTime, show the game (you can still set StartTime later)
        const startTime = game.StartTime || game.startTime;
        if (!startTime || startTime === '') {
            console.log(`‚úÖ Showing game without StartTime: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
            return true;
        }
        
        // Parse StartTime
        let gameTime;
        try {
            // Handle the GMT format from your CSV
            if (startTime.includes('GMT')) {
                gameTime = new Date(startTime);
            } else {
                // Try other formats
                gameTime = new Date(startTime);
                
                // If invalid, try adding current year
                if (isNaN(gameTime.getTime())) {
                    const currentYear = new Date().getFullYear();
                    gameTime = new Date(currentYear + '-' + startTime);
                }
            }
        } catch (e) {
            console.log('Error parsing StartTime:', startTime, e);
            return true; // Show game if we can't parse time
        }
        
        if (isNaN(gameTime.getTime())) {
            console.log('Invalid StartTime format:', startTime);
            return true; // Show game if time is invalid
        }
        
        const now = new Date();
        const timeDiff = gameTime.getTime() - now.getTime();
        
        console.log(`Time check for ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}:`, {
            startTime: startTime,
            parsedTime: gameTime.toISOString(),
            currentTime: now.toISOString(),
            timeDiff: timeDiff,
            showGame: timeDiff > -900000
        });
        
        // Show games that haven't started yet, or just started (within 15 minutes)
        const shouldShow = timeDiff > -900000; // -15 minutes in milliseconds
        
        if (shouldShow) {
            console.log(`‚úÖ Showing game: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
        } else {
            console.log(`‚ùå Hiding old game: ${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}`);
        }
        
        return shouldShow;
    });
    
    console.log('Available games after filtering:', availableGames.length);
    
    if (availableGames.length === 0) {
        container.innerHTML = `
            <div style="
                text-align: center !important;
                padding: 60px 20px !important;
                background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%) !important;
                border-radius: 15px !important;
                border: 2px dashed #cbd5e1 !important;
            ">
                <div style="font-size: 48px !important; margin-bottom: 20px !important;">‚è∞</div>
                <h3 style="color: #64748b !important; margin: 0 0 10px 0 !important;">No Active Games</h3>
                <p style="color: #94a3b8 !important; margin: 0 !important;">
                    All current games have started/ended or are completed. Add new games to see them here!
                </p>
                <div style="margin-top: 20px !important; padding: 15px !important; background: #f0f9ff !important; border-radius: 8px !important; border-left: 4px solid #0ea5e9 !important;">
                    <div style="font-size: 12px !important; color: #0369a1 !important;">
                        <strong>Current time:</strong> ${new Date().toLocaleString()}<br>
                        <strong>Total games in system:</strong> ${todaysGames.length}<br>
                        <strong>Completed games:</strong> ${todaysGames.filter(g => (g.Status || g.status || '').toLowerCase() === 'completed').length}
                    </div>
                </div>
            </div>
        `;
        return;
    }
    
    // Sort games by start time (earliest first)
    availableGames.sort((a, b) => {
        const timeA = a.StartTime || a.startTime;
        const timeB = b.StartTime || b.startTime;
        
        if (!timeA && !timeB) return 0;
        if (!timeA) return 1;
        if (!timeB) return -1;
        
        return new Date(timeA) - new Date(timeB);
    });
    
    availableGames.forEach((game) => {
        const gameDiv = document.createElement('div');
        const startTimeStr = game.StartTime || game.startTime;
        const { countdown, status, isExpired } = getGameCountdownDetailed(startTimeStr);
        
        // Disable picks if game has started or is about to start (< 5 minutes)
        const isPickingDisabled = isExpired || status === 'live' || status === 'starting-soon';
        
        gameDiv.style.cssText = `
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%) !important; 
            border-radius: 15px !important; 
            padding: 25px !important; 
            box-shadow: 0 4px 15px rgba(0,0,0,0.08) !important; 
            border: 2px solid ${isPickingDisabled ? '#fbbf24' : '#e5e7eb'} !important; 
            transition: all 0.3s ease !important; 
            position: relative !important; 
            overflow: hidden !important;
            margin-bottom: 20px !important;
            ${isPickingDisabled ? 'opacity: 0.8 !important;' : ''}
        `;
        
        // Auto-generate pick options based on game data
        const totalLine = game.TotalLine || game.totalLine || '220.5';
        const spreadA = game.SpreadA || game.spreadA || '-3.5';
        const spreadB = game.SpreadB || game.spreadB || '+3.5';
        
        gameDiv.innerHTML = `
            <div style="position: absolute !important; top: 0 !important; right: 0 !important; width: 60px !important; height: 60px !important; background: linear-gradient(135deg, #667eea20 0%, transparent 100%) !important; border-radius: 0 15px 0 100% !important;"></div>
            
            ${isPickingDisabled ? `
                <div style="
                    position: absolute !important;
                    top: 15px !important;
                    left: 15px !important;
                    background: linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%) !important;
                    color: white !important;
                    padding: 6px 12px !important;
                    border-radius: 15px !important;
                    font-size: 11px !important;
                    font-weight: bold !important;
                    text-transform: uppercase !important;
                    z-index: 10 !important;
                ">
                    ${status === 'live' ? 'üî¥ LIVE' : status === 'starting-soon' ? '‚è∞ STARTING' : 'üîí CLOSED'}
                </div>
            ` : ''}
            
            <div style="display: flex !important; justify-content: space-between !important; align-items: center !important; margin-bottom: 20px !important; flex-wrap: wrap !important; gap: 15px !important;">
                <h3 style="color: #1f2937 !important; margin: 0 !important; font-size: 20px !important; font-weight: 700 !important;">${game.TeamA || game.teamA} vs ${game.TeamB || game.teamB}</h3>
                <div style="display: flex !important; gap: 12px !important; align-items: center !important;">
                    <span style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important; color: white !important; padding: 6px 12px !important; border-radius: 15px !important; font-size: 11px !important; font-weight: bold !important; text-transform: uppercase !important;">${game.League || game.league}</span>
                    <span style="
                        background: ${getCountdownColor(status)} !important; 
                        color: white !important; 
                        padding: 6px 12px !important; 
                        border-radius: 15px !important; 
                        font-size: 11px !important; 
                        font-weight: bold !important;
                        min-width: 80px !important;
                        text-align: center !important;
                    " id="countdown_${game.id}">${countdown}</span>
                </div>
            </div>
            
            ${startTimeStr ? `
                <div style="
                    background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%) !important;
                    padding: 12px 16px !important;
                    border-radius: 8px !important;
                    margin-bottom: 20px !important;
                    border-left: 4px solid #0ea5e9 !important;
                ">
                    <div style="font-size: 12px !important; color: #0369a1 !important; font-weight: bold !important;">
                        üïê Game Time: ${formatGameTime(startTimeStr)}
                    </div>
                </div>
            ` : `
                <div style="
                    background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%) !important;
                    padding: 12px 16px !important;
                    border-radius: 8px !important;
                    margin-bottom: 20px !important;
                    border-left: 4px solid #f59e0b !important;
                ">
                    <div style="font-size: 12px !important; color: #92400e !important; font-weight: bold !important;">
                        ‚è∞ Game Time: To Be Determined - Add StartTime to enable countdown
                    </div>
                </div>
            `}
            
            <!-- Winner Pick Section -->
            <div style="margin-bottom: 20px !important;">
                <div style="display: flex !important; align-items: center !important; margin-bottom: 12px !important; gap: 10px !important;">
                    <div style="width: 4px !important; height: 20px !important; background: linear-gradient(135deg, #10b981 0%, #059669 100%) !important; border-radius: 2px !important;"></div>
                    <strong style="color: #1f2937 !important; font-weight: 600 !important;">Pick the Winner</strong>
                    ${isPickingDisabled ? '<span style="color: #f59e0b !important; font-size: 12px !important; margin-left: 10px !important;">üîí Picks Closed</span>' : ''}
                </div>
                <div style="display: grid !important; grid-template-columns: 1fr 1fr !important; gap: 12px !important;">
                    <button onclick="selectPick(${game.id}, 'winner', '${game.TeamA || game.teamA}')" id="pick_${game.id}_winner_${game.TeamA || game.teamA}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamA || game.teamA}</button>
                    <button onclick="selectPick(${game.id}, 'winner', '${game.TeamB || game.teamB}')" id="pick_${game.id}_winner_${game.TeamB || game.teamB}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamB || game.teamB}</button>
                </div>
            </div>
            
            <!-- Total Points Pick Section -->
            <div style="margin-bottom: 20px !important;">
                <div style="display: flex !important; align-items: center !important; margin-bottom: 12px !important; gap: 10px !important;">
                    <div style="width: 4px !important; height: 20px !important; background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%) !important; border-radius: 2px !important;"></div>
                    <strong style="color: #1f2937 !important; font-weight: 600 !important;">Total Points (${totalLine})</strong>
                    ${isPickingDisabled ? '<span style="color: #f59e0b !important; font-size: 12px !important; margin-left: 10px !important;">üîí Picks Closed</span>' : ''}
                </div>
                <div style="display: grid !important; grid-template-columns: 1fr 1fr !important; gap: 12px !important;">
                    <button onclick="selectPick(${game.id}, 'total', 'Over')" id="pick_${game.id}_total_Over" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">Over ${totalLine}</button>
                    <button onclick="selectPick(${game.id}, 'total', 'Under')" id="pick_${game.id}_total_Under" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">Under ${totalLine}</button>
                </div>
            </div>
            
            <!-- Spread Pick Section -->
            ${(spreadA && spreadA !== '' && spreadA !== '-3.5') || (game.SpreadA || game.spreadA) ? `
            <div>
                <div style="display: flex !important; align-items: center !important; margin-bottom: 12px !important; gap: 10px !important;">
                    <div style="width: 4px !important; height: 20px !important; background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%) !important; border-radius: 2px !important;"></div>
                    <strong style="color: #1f2937 !important; font-weight: 600 !important;">Point Spread</strong>
                    ${isPickingDisabled ? '<span style="color: #f59e0b !important; font-size: 12px !important; margin-left: 10px !important;">üîí Picks Closed</span>' : ''}
                </div>
                <div style="display: grid !important; grid-template-columns: 1fr 1fr !important; gap: 12px !important;">
                    <button onclick="selectPick(${game.id}, 'spread', '${game.TeamA || game.teamA} ${spreadA}')" id="pick_${game.id}_spread_${game.TeamA || game.teamA}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamA || game.teamA} ${spreadA}</button>
                    <button onclick="selectPick(${game.id}, 'spread', '${game.TeamB || game.teamB} ${spreadB}')" id="pick_${game.id}_spread_${game.TeamB || game.teamB}" 
                        ${isPickingDisabled ? 'disabled' : ''} 
                        style="
                            padding: 14px !important; 
                            background: ${isPickingDisabled ? '#f3f4f6' : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'} !important; 
                            border: 2px solid ${isPickingDisabled ? '#d1d5db' : '#e2e8f0'} !important; 
                            border-radius: 10px !important; 
                            cursor: ${isPickingDisabled ? 'not-allowed' : 'pointer'} !important; 
                            font-weight: 600 !important; 
                            transition: all 0.3s ease !important; 
                            color: ${isPickingDisabled ? '#9ca3af' : '#334155'} !important;
                        ">${game.TeamB || game.teamB} ${spreadB}</button>
                </div>
            </div>
            ` : ''}
        `;
        
        container.appendChild(gameDiv);
    });
    
    // Start countdown updates
    startCountdownUpdates();
}
        function updatePickStatus() {
            const totalPossiblePicks = todaysGames.length * 2;
            const totalMadePicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            
            const pickStatus = document.getElementById('pickStatus');
            pickStatus.textContent = `${totalMadePicks}/${totalPossiblePicks} picks made`;
            
            const percentage = totalMadePicks / totalPossiblePicks;
            if (percentage === 0) {
                pickStatus.style.background = 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)';
                pickStatus.style.color = '#4a5568';
                pickStatus.style.borderColor = '#e2e8f0';
            } else if (percentage < 0.5) {
                pickStatus.style.background = 'linear-gradient(135deg, #fef3c7 0%, #fde68a 100%)';
                pickStatus.style.color = '#92400e';
                pickStatus.style.borderColor = '#f59e0b';
            } else if (percentage < 1) {
                pickStatus.style.background = 'linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%)';
                pickStatus.style.color = '#1e40af';
                pickStatus.style.borderColor = '#3b82f6';
            } else {
                pickStatus.style.background = 'linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%)';
                pickStatus.style.color = '#065f46';
                pickStatus.style.borderColor = '#10b981';
            }
        }

        function updateSubmitButton() {
            const totalMadePicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            const submitBtn = document.getElementById('submitPicksBtn');
            
            submitBtn.disabled = totalMadePicks === 0;
            submitBtn.textContent = `Submit ${totalMadePicks > 0 ? totalMadePicks : 'All'} Pick${totalMadePicks !== 1 ? 's' : ''}`;
            
            if (totalMadePicks > 0) {
                submitBtn.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
                submitBtn.style.cursor = 'pointer';
            } else {
                submitBtn.style.background = 'linear-gradient(135deg, #9ca3af 0%, #6b7280 100%)';
                submitBtn.style.cursor = 'not-allowed';
            }
        }

        function showLogin() {
            document.getElementById('loginModal').style.display = 'flex';
        }

        function hideLogin() {
            document.getElementById('loginModal').style.display = 'none';
            clearMessage();
        }

        function showAchievements() {
            updateAchievementsModal();
            document.getElementById('achievementsModal').style.display = 'flex';
        }

        function hideAchievements() {
            document.getElementById('achievementsModal').style.display = 'none';
        }

        function switchToLogin() {
            document.getElementById('loginTab').style.background = '#667eea';
            document.getElementById('loginTab').style.color = 'white';
            document.getElementById('registerTab').style.background = 'transparent';
            document.getElementById('registerTab').style.color = '#666';
            document.getElementById('loginForm').style.display = 'block';
            document.getElementById('registerForm').style.display = 'none';
            clearMessage();
        }

        function switchToRegister() {
            document.getElementById('registerTab').style.background = '#667eea';
            document.getElementById('registerTab').style.color = 'white';
            document.getElementById('loginTab').style.background = 'transparent';
            document.getElementById('loginTab').style.color = '#666';
            document.getElementById('registerForm').style.display = 'block';
            document.getElementById('loginForm').style.display = 'none';
            clearMessage();
        }

        async function loadUsers() {
            try {
                console.log('Loading users from Google Sheets...');
                const response = await fetch(`${APPS_SCRIPT_URL}?action=getUsers`);
                
                if (response.ok) {
                    const csvData = await response.text();
                    console.log('CSV Response:', csvData);
                    const lines = csvData.trim().split('\n');
                    const headers = lines[0].split(',');
                    
                    allUsers = [];
                    for (let i = 1; i < lines.length; i++) {
                        if (lines[i].trim()) {
                            const values = lines[i].split(',');
                            const user = {};
                            headers.forEach((header, index) => {
                                user[header.trim()] = values[index] ? values[index].trim().replace(/"/g, '') : '';
                            });
                            allUsers.push(user);
                        }
                    }
                    console.log('Users loaded from Google Sheets:', allUsers.length);
                } else {
                    throw new Error('Failed to fetch from Google Sheets');
                }
                
            } catch (error) {
                console.error('Error loading users from Google Sheets, using demo data:', error);
                allUsers = [
                    { ID: '1', Username: 'demo', Email: 'demo@test.com', Password: 'demo123', Score: '150', Streak: '5', Accuracy: '75', JoinDate: '2024-01-01' },
                    { ID: '2', Username: 'test', Email: 'test@test.com', Password: 'test123', Score: '0', Streak: '0', Accuracy: '0', JoinDate: '2024-01-01' },
                    { ID: '3', Username: 'ProBettor', Email: 'pro@test.com', Password: 'pro123', Score: '320', Streak: '8', Accuracy: '85', JoinDate: '2024-01-01' },
                    { ID: '4', Username: 'SportsAnalyst', Email: 'analyst@test.com', Password: 'analyst123', Score: '275', Streak: '3', Accuracy: '80', JoinDate: '2024-01-01' }
                ];
                console.log('Using demo users as fallback');
            }
        }

        async function attemptLogin() {
            const username = document.getElementById('loginUsername').value.trim();
            const password = document.getElementById('loginPassword').value.trim();
            
            if (!username || !password) {
                showMessage('Please enter both username and password', 'error');
                return;
            }
            
            const loginButton = document.getElementById('loginButton');
            loginButton.innerHTML = 'Logging in...';
            loginButton.disabled = true;
            
            try {
                const user = allUsers.find(u => 
                    u.Username === username && u.Password === password
                );
                
                if (user) {
                    currentUser = {
                        id: user.ID,
                        username: user.Username,
                        email: user.Email,
                        score: parseInt(user.Score || 0),
                        streak: parseInt(user.Streak || 0),
                        accuracy: parseFloat(user.Accuracy || 0)
                    };
                    
                    userCoins = Math.floor(currentUser.score / 10) + 25;
                    
                    showUserInterface();
                    hideLogin();
                    showNotification(`Welcome back, ${username}! Connected to Google Sheets.`, 'success', 3000);
                    updateCommunityFeed();
                    
                    setTimeout(() => {
                        loadExistingPicks();
                    }, 500);
                } else {
                    showMessage('Invalid username or password. Try one of the test accounts below.', 'error');
                }
                
            } catch (error) {
                console.error('Login error:', error);
                showMessage('Login failed. Please try again.', 'error');
            } finally {
                loginButton.innerHTML = 'Login';
                loginButton.disabled = false;
            }
        }

        async function attemptRegister() {
            const username = document.getElementById('registerUsername').value.trim();
            const email = document.getElementById('registerEmail').value.trim();
            const password = document.getElementById('registerPassword').value.trim();
            
            if (!username || !email || !password) {
                showMessage('Please fill in all fields', 'error');
                return;
            }
            
            if (allUsers.find(u => u.Username === username)) {
                showMessage('Username already exists', 'error');
                return;
            }
            
            const registerButton = document.getElementById('registerButton');
            registerButton.innerHTML = 'Registering...';
            registerButton.disabled = true;
            
            try {
                const userData = new URLSearchParams({
                    action: 'addUser',
                    username: username,
                    email: email,
                    password: password,
                    score: '0',
                    streak: '0',
                    accuracy: '0',
                    joinDate: new Date().toISOString().split('T')[0]
                });
                
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: userData
                });
                
                if (response.ok) {
                    const result = await response.text();
                    console.log('Registration result:', result);
                    
                    const newUser = {
                        ID: (allUsers.length + 1).toString(),
                        Username: username,
                        Email: email,
                        Password: password,
                        Score: '0',
                        Streak: '0',
                        Accuracy: '0',
                        JoinDate: new Date().toISOString().split('T')[0]
                    };
                    allUsers.push(newUser);
                    
                    showMessage('Registration successful! You can now login.', 'success');
                    showNotification(`Account created successfully! Welcome ${username}! +25 starter coins!`, 'success', 5000);
                    
                    switchToLogin();
                    
                    document.getElementById('registerUsername').value = '';
                    document.getElementById('registerEmail').value = '';
                    document.getElementById('registerPassword').value = '';
                } else {
                    throw new Error('Registration failed on server');
                }
                
            } catch (error) {
                console.error('Registration error:', error);
                showMessage('Registration failed. Please try again.', 'error');
            } finally {
                registerButton.innerHTML = 'Register';
                registerButton.disabled = false;
            }
        }

        function showUserInterface() {
            document.getElementById('headerSubtext').textContent = `Welcome back, ${currentUser.username}!`;
            document.getElementById('loginBtn').style.display = 'none';
            document.getElementById('accountDropdown').style.display = 'block';
            document.getElementById('achievementsBtn').style.display = 'block';
            document.getElementById('userStatsSection').style.display = 'block';
            
            document.getElementById('welcomeUsername').textContent = currentUser.username;
            document.getElementById('userScore').textContent = currentUser.score;
            document.getElementById('userAccuracy').textContent = currentUser.accuracy + '%';
            document.getElementById('userStreak').textContent = currentUser.streak;
            
            document.getElementById('accountUsername').textContent = currentUser.username;
            updateCoinDisplay();
            
            userAchievements = [];
            totalPicksMade = 0;
            setTimeout(() => checkAchievements(), 1000);
        }

        function toggleAccountMenu() {
            const menu = document.getElementById('accountMenu');
            const isVisible = menu.style.display === 'block';
            
            if (isVisible) {
                hideAccountMenu();
            } else {
                showAccountMenu();
            }
        }

        function showAccountMenu() {
            document.getElementById('accountMenu').style.display = 'block';
            
            setTimeout(() => {
                document.addEventListener('click', handleOutsideClick);
            }, 100);
        }

        function hideAccountMenu() {
            document.getElementById('accountMenu').style.display = 'none';
            document.removeEventListener('click', handleOutsideClick);
        }

        function handleOutsideClick(event) {
            const dropdown = document.getElementById('accountDropdown');
            if (!dropdown.contains(event.target)) {
                hideAccountMenu();
            }
        }

        function showProfile() {
            hideAccountMenu();
            showNotification('Profile feature coming soon!', 'info', 2000);
        }

        function showSettings() {
            hideAccountMenu();
            showNotification('Settings feature coming soon!', 'info', 2000);
        }

        // REPLACE your loadTodaysGames() function with this fixed version:

async function loadTodaysGames() {
    try {
        showNotification('Loading games from Google Sheets...', 'info');
        
        const response = await fetch(`${APPS_SCRIPT_URL}?action=getGames&cacheBust=${Date.now()}`);
        const csvData = await response.text();
        
        console.log('Games CSV Response:', csvData);
        
        if (!csvData || csvData.includes('Error')) {
            throw new Error('Failed to load games data');
        }
        
        // Parse CSV data properly
        const lines = csvData.trim().split('\n');
        const headers = lines[0].split(',').map(h => h.trim());
        
        console.log('CSV Headers:', headers);
        
        todaysGames = [];
        
        for (let i = 1; i < lines.length; i++) {
            const values = parseCSVLine(lines[i]);
            
            if (values.length >= headers.length) {
                const game = {};
                
                // Map CSV values to game object with proper field names
                headers.forEach((header, index) => {
                    let value = values[index] ? values[index].trim() : '';
                    
                    // Handle specific fields
                    if (header === 'ID') {
                        game.id = value;
                    } else if (header === 'TeamA') {
                        game.TeamA = value;
                        game.teamA = value; // Backward compatibility
                    } else if (header === 'TeamB') {
                        game.TeamB = value;
                        game.teamB = value; // Backward compatibility
                    } else if (header === 'League') {
                        game.League = value;
                        game.league = value; // Backward compatibility
                    } else if (header === 'StartTime') {
                        // Keep original StartTime string, don't convert to Date object yet
                        game.StartTime = value;
                        game.startTime = value; // Backward compatibility
                    } else if (header === 'Status') {
                        game.Status = value;
                        game.status = value; // Backward compatibility
                    } else if (header === 'ScoreA') {
                        game.ScoreA = value;
                    } else if (header === 'ScoreB') {
                        game.ScoreB = value;
                    } else if (header === 'SpreadA') {
                        game.SpreadA = value;
                        game.spreadA = value; // Backward compatibility
                    } else if (header === 'SpreadB') {
                        game.SpreadB = value;
                        game.spreadB = value; // Backward compatibility
                    } else if (header === 'TotalLine') {
                        game.TotalLine = value;
                        game.totalLine = value; // Backward compatibility
                    }
                });
                
                // Only add games that have at least team names
                if (game.TeamA && game.TeamB) {
                    todaysGames.push(game);
                }
            }
        }
        
        console.log('Games loaded from Google Sheets:', todaysGames.length);
        console.log('All games with details:', todaysGames);
        
        renderGames();
        hideNotification();
        
    } catch (error) {
        console.error('Error loading games:', error);
        showNotification('Error loading games: ' + error.message, 'error');
    }
}

    // UPDATED: Better countdown function that handles GMT format
function getGameCountdownDetailed(startTimeStr) {
    if (!startTimeStr || startTimeStr === '') {
        return { countdown: 'TBD', status: 'scheduled', isExpired: false };
    }
    
    let gameTime;
    try {
        // Handle GMT format from CSV (like "Wed Jun 25 2025 15:30:00 GMT+0300")
        gameTime = new Date(startTimeStr);
        
        // If parsing failed, try other formats
        if (isNaN(gameTime.getTime())) {
            // Try simple format like "2025-06-25 15:30:00"
            const cleanedTime = startTimeStr.replace(' GMT+0300', '').replace(' GMT+0200', '');
            gameTime = new Date(cleanedTime);
        }
    } catch (e) {
        console.log('Error parsing time:', startTimeStr, e);
        return { countdown: 'Invalid Time', status: 'scheduled', isExpired: false };
    }
    
    if (isNaN(gameTime.getTime())) {
        console.log('Could not parse time:', startTimeStr);
        return { countdown: 'Invalid Time', status: 'scheduled', isExpired: false };
    }
    
    const now = new Date();
    const timeDiff = gameTime.getTime() - now.getTime();
    
    console.log('Countdown calculation:', {
        startTime: startTimeStr,
        gameTime: gameTime.toISOString(),
        now: now.toISOString(),
        timeDiff: timeDiff
    });
    
    // Game has started (more than 5 minutes ago)
    if (timeDiff < -300000) {
        return { countdown: 'Started', status: 'live', isExpired: true };
    }
    
    // Game starting soon (less than 5 minutes)
    if (timeDiff < 300000 && timeDiff > 0) {
        const minutes = Math.floor(timeDiff / 60000);
        return { countdown: `${minutes}m`, status: 'starting-soon', isExpired: true };
    }
    
    // Game has just started (within last 5 minutes)
    if (timeDiff < 0) {
        return { countdown: 'LIVE', status: 'live', isExpired: true };
    }
    
    // Game is upcoming
    const hours = Math.floor(timeDiff / (1000 * 60 * 60));
    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
    const days = Math.floor(hours / 24);
    
    if (days > 0) {
        return { countdown: `${days}d ${hours % 24}h`, status: 'scheduled', isExpired: false };
    } else if (hours > 0) {
        return { countdown: `${hours}h ${minutes}m`, status: 'scheduled', isExpired: false };
    } else {
        return { countdown: `${minutes}m`, status: 'upcoming', isExpired: false };
    }
}

// Get color for countdown based on status
function getCountdownColor(status) {
    const colors = {
        'live': 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)',
        'starting-soon': 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
        'upcoming': 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
        'scheduled': 'linear-gradient(135deg, #6366f1 0%, #4f46e5 100%)'
    };
    return colors[status] || colors['scheduled'];
}

// UPDATED: Better time formatting for GMT format
function formatGameTime(startTimeStr) {
    if (!startTimeStr || startTimeStr === '') return 'TBD';
    
    let gameTime;
    try {
        gameTime = new Date(startTimeStr);
        
        if (isNaN(gameTime.getTime())) {
            const cleanedTime = startTimeStr.replace(' GMT+0300', '').replace(' GMT+0200', '');
            gameTime = new Date(cleanedTime);
        }
    } catch (e) {
        return startTimeStr; // Return original if can't parse
    }
    
    if (isNaN(gameTime.getTime())) {
        return startTimeStr; // Return original if can't parse
    }
    
    const options = { 
        weekday: 'short',
        month: 'short', 
        day: 'numeric', 
        hour: 'numeric', 
        minute: '2-digit',
        hour12: true 
    };
    return gameTime.toLocaleDateString('en-US', options);
}

// Helper function to properly parse CSV lines (handles commas in quoted values)
function parseCSVLine(line) {
    const result = [];
    let current = '';
    let inQuotes = false;
    
    for (let i = 0; i < line.length; i++) {
        const char = line[i];
        
        if (char === '"') {
            inQuotes = !inQuotes;
        } else if (char === ',' && !inQuotes) {
            result.push(current);
            current = '';
        } else {
            current += char;
        }
    }
    
    result.push(current); // Add the last field
    return result;
}

// Start real-time countdown updates
function startCountdownUpdates() {
    // Clear any existing interval
    if (window.countdownInterval) {
        clearInterval(window.countdownInterval);
    }
    
    // Update countdowns every 30 seconds
    window.countdownInterval = setInterval(() => {
        todaysGames.forEach(game => {
            const countdownElement = document.getElementById(`countdown_${game.id}`);
            if (countdownElement && game.StartTime) {
                const { countdown, status } = getGameCountdownDetailed(game.StartTime);
                countdownElement.textContent = countdown;
                countdownElement.style.background = getCountdownColor(status);
                
                // If game status changed to live/expired, refresh the entire games display
                if (status === 'live' || status === 'starting-soon') {
                    setTimeout(() => {
                        renderGames(); // Re-render to show disabled state
                    }, 1000);
                }
            }
        });
    }, 30000); // Update every 30 seconds
}

        function quickFillRandom() {
            if (!currentUser) {
                showLogin();
                showNotification('Please login to use Quick Fill', 'warning');
                return;
            }
            
            showNotification('Quick filling all picks randomly...', 'info', 2000);
            
            todaysGames.forEach(game => {
                const teams = [game.teamA, game.teamB];
                const randomWinner = teams[Math.floor(Math.random() * teams.length)];
                
                const totals = ['Over', 'Under'];
                const randomTotal = totals[Math.floor(Math.random() * totals.length)];
                
                if (!userPicks[game.id]) {
                    userPicks[game.id] = {};
                }
                userPicks[game.id]['winner'] = randomWinner;
                userPicks[game.id]['total'] = randomTotal;
                
                updatePickVisual(game.id, 'winner', randomWinner);
                updatePickVisual(game.id, 'total', randomTotal);
            });
            
            totalPicksMade = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
            updatePickStatus();
            updateSubmitButton();
            
            setTimeout(() => {
                showNotification('All picks filled! Review and submit when ready.', 'success', 3000);
            }, 1000);
        }

        function clearAllPicks() {
            if (Object.keys(userPicks).length === 0) {
                showNotification('No picks to clear!', 'info');
                return;
            }
            
            userPicks = {};
            totalPicksMade = 0;
            
            document.querySelectorAll('[id^="pick_"]').forEach(btn => {
                btn.style.background = 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)';
                btn.style.borderColor = '#e2e8f0';
                btn.style.color = '#334155';
                btn.style.boxShadow = 'none';
            });
            
            updatePickStatus();
            updateSubmitButton();
            
            showNotification('All picks cleared!', 'info', 2000);
        }

        function resetSubmittedGames() {
            submittedGames.clear();
            
            const submitBtn = document.getElementById('submitPicksBtn');
            submitBtn.innerHTML = 'Submit All Picks';
            submitBtn.disabled = Object.keys(userPicks).length === 0;
            updateSubmitButton();
            
            showNotification('Submitted games reset! You can now submit picks again.', 'success', 3000);
        }

        async function submitAllPicks() {
            if (Object.keys(userPicks).length === 0) {
                showNotification('Please make some picks first!', 'warning');
                return;
            }
            
            const gamesToSubmit = Object.keys(userPicks);
            const alreadySubmitted = gamesToSubmit.filter(gameId => submittedGames.has(parseInt(gameId)));
            
            if (alreadySubmitted.length > 0) {
                showNotification(`You have already submitted picks for game(s): ${alreadySubmitted.join(', ')}`, 'warning');
                return;
            }
            
            const submitBtn = document.getElementById('submitPicksBtn');
            submitBtn.innerHTML = 'Submitting...';
            submitBtn.disabled = true;
            
            showNotification('Submitting your picks to Google Sheets...', 'info', 2000);
            
            try {
                const picksArray = [];
                
                Object.keys(userPicks).forEach(gameId => {
                    Object.keys(userPicks[gameId]).forEach(pickType => {
                        const selection = userPicks[gameId][pickType];
                        
                        picksArray.push({
                            UserID: currentUser.id || 1,
                            Username: currentUser.username,
                            GameID: gameId,
                            PickType: pickType,
                            Selection: selection,
                            IsCorrect: '',
                            SubmittedAt: new Date().toISOString(),
                            Points: 0
                        });
                    });
                });
                
                console.log('Submitting picks:', picksArray);
                
                const formData = new URLSearchParams({
                    action: 'submitPicks',
                    picks: JSON.stringify(picksArray)
                });
                
                const response = await fetch(APPS_SCRIPT_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: formData
                });
                
                if (response.ok) {
                    const result = await response.text();
                    console.log('Picks submission result:', result);
                    
                    const totalPicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
                    
                    gamesToSubmit.forEach(gameId => {
                        submittedGames.add(parseInt(gameId));
                    });
                    
                    awardCoins(totalPicks * 2, `Submitted ${totalPicks} picks!`);
                    
                    showNotification(`All ${totalPicks} picks submitted successfully to Google Sheets!`, 'success', 5000);
                    
                    userPicks = {};
                    totalPicksMade = 0;
                    submitBtn.innerHTML = 'All Picks Submitted ‚úì';
                    submitBtn.style.background = 'linear-gradient(135deg, #6b7280 0%, #4b5563 100%)';
                    submitBtn.disabled = true;
                    
                    updateSubmitButton();
                    updatePickStatus();
                    checkAchievements();
                } else {
                    throw new Error('Failed to submit picks to Google Sheets');
                }
                
            } catch (error) {
                console.error('Error submitting picks:', error);
                showNotification('Error submitting picks to Google Sheets. Please try again.', 'error');
                
                setTimeout(() => {
                    const totalPicks = Object.values(userPicks).reduce((sum, gamePicks) => sum + Object.keys(gamePicks).length, 0);
                    
                    gamesToSubmit.forEach(gameId => {
                        submittedGames.add(parseInt(gameId));
                    });
                    
                    awardCoins(totalPicks * 2, `Submitted ${totalPicks} picks (local backup)!`);
                    
                    showNotification(`${totalPicks} picks saved locally (Google Sheets unavailable)`, 'warning', 5000);
                    
                    userPicks = {};
                    totalPicksMade = 0;
                    submitBtn.innerHTML = 'Picks Submitted (Local) ‚úì';
                    submitBtn.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
                    submitBtn.disabled = true;
                    
                    updateSubmitButton();
                    updatePickStatus();
                    checkAchievements();
                }, 1000);
                
                submitBtn.innerHTML = 'Submit All Picks';
                updateSubmitButton();
            }
        }
// ADD THIS COMPREHENSIVE TEST AND DEBUG FUNCTION TO YOUR HTML:

function debugScoringSystem() {
    console.log('=== COMPREHENSIVE SCORING DEBUG ===');
    
    // Step 1: Check completed games
    fetch(`${APPS_SCRIPT_URL}?action=getGames&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            console.log('üìã GAMES DATA:', csvData);
            
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            console.log('üìã GAMES HEADERS:', headers);
            
            let completedGames = [];
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const game = {};
                
                headers.forEach((header, index) => {
                    game[header.trim()] = values[index] ? values[index].trim() : '';
                });
                
                if (game.Status && game.Status.toLowerCase() === 'completed') {
                    completedGames.push(game);
                    console.log(`‚úÖ Found completed game:`, {
                        ID: game.ID,
                        TeamA: game.TeamA,
                        TeamB: game.TeamB,
                        ScoreA: game.ScoreA,
                        ScoreB: game.ScoreB,
                        Status: game.Status
                    });
                }
            }
            
            if (completedGames.length === 0) {
                console.log('‚ùå NO COMPLETED GAMES FOUND');
                return;
            }
            
            // Step 2: Check picks for completed games
            return fetch(`${APPS_SCRIPT_URL}?action=getPicks&cacheBust=${Date.now()}`);
        })
        .then(response => response.text())
        .then(csvData => {
            console.log('üéØ PICKS DATA:', csvData);
            
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            console.log('üéØ PICKS HEADERS:', headers);
            
            let unscoredPicks = [];
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const pick = {};
                
                headers.forEach((header, index) => {
                    pick[header.trim()] = values[index] ? values[index].trim() : '';
                });
                
                // Check if pick is for a completed game but not scored
                if (pick.IsCorrect === '' || pick.IsCorrect === null || pick.IsCorrect === undefined) {
                    unscoredPicks.push(pick);
                    console.log(`‚ö†Ô∏è Unscored pick found:`, {
                        Username: pick.Username,
                        GameID: pick.GameID,
                        PickType: pick.PickType,
                        Selection: pick.Selection,
                        IsCorrect: pick.IsCorrect,
                        Points: pick.Points
                    });
                }
            }
            
            console.log(`üìä SUMMARY: ${unscoredPicks.length} unscored picks found`);
            
            if (unscoredPicks.length > 0) {
                console.log('üîÑ TRIGGERING MANUAL PROCESSING...');
                return fetch(`${APPS_SCRIPT_URL}?action=processResults&cacheBust=${Date.now()}`);
            } else {
                console.log('‚úÖ All picks appear to be scored');
            }
        })
        .then(response => {
            if (response) {
                return response.text();
            }
        })
        .then(result => {
            if (result) {
                console.log('üéØ MANUAL PROCESSING RESULT:', result);
                
                // Wait a moment then check results again
                setTimeout(() => {
                    console.log('üîÑ Re-checking picks after processing...');
                    checkPicksAfterProcessing();
                }, 3000);
            }
        })
        .catch(error => {
            console.error('‚ùå DEBUG ERROR:', error);
        });
}

function checkPicksAfterProcessing() {
    fetch(`${APPS_SCRIPT_URL}?action=getPicks&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            let scoredCount = 0;
            let totalPicks = lines.length - 1;
            
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const isCorrect = values[headers.indexOf('IsCorrect')];
                
                if (isCorrect === 'TRUE' || isCorrect === 'FALSE') {
                    scoredCount++;
                }
            }
            
            console.log(`üìä AFTER PROCESSING: ${scoredCount}/${totalPicks} picks scored`);
            
            if (scoredCount > 0) {
                console.log('‚úÖ SUCCESS! Picks have been scored');
                // Check user stats update
                checkUserStatsUpdate();
            } else {
                console.log('‚ùå STILL NO SCORING - There may be a deeper issue');
            }
        });
}

function checkUserStatsUpdate() {
    fetch(`${APPS_SCRIPT_URL}?action=getUsers&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            console.log('üë• CHECKING USER STATS AFTER PROCESSING...');
            
            const lines = csvData.trim().split('\n');
            const headers = lines[0].split(',');
            
            for (let i = 1; i < lines.length; i++) {
                const values = parseCSVLine(lines[i]);
                const username = values[headers.indexOf('Username')];
                const score = values[headers.indexOf('Score')];
                const streak = values[headers.indexOf('Streak')];
                const accuracy = values[headers.indexOf('Accuracy')];
                
                if (parseInt(score) > 0 || parseInt(streak) > 0) {
                    console.log(`‚úÖ ${username}: Score=${score}, Streak=${streak}, Accuracy=${accuracy}%`);
                }
            }
        });
}

// MANUAL PROCESSING FUNCTION - USE THIS TO FORCE SCORING
function forceProcessing() {
    console.log('üöÄ FORCING GAME RESULTS PROCESSING...');
    
    fetch(`${APPS_SCRIPT_URL}?action=processResults&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(result => {
            console.log('üìã PROCESSING RESULT:', result);
            
            // Wait and check results
            setTimeout(() => {
                console.log('üîç Checking results after forced processing...');
                checkPicksAfterProcessing();
            }, 2000);
        })
        .catch(error => {
            console.error('‚ùå FORCE PROCESSING ERROR:', error);
        });
}

// STEP-BY-STEP TESTING FUNCTION
function stepByStepTest() {
    console.log('=== STEP BY STEP SCORING TEST ===');
    console.log('Step 1: Checking your login status...');
    
    if (!currentUser) {
        console.log('‚ùå You need to login first!');
        return;
    }
    
    console.log(`‚úÖ Logged in as: ${currentUser.username}`);
    console.log('Step 2: Running comprehensive debug...');
    
    debugScoringSystem();
}

// QUICK FIX: Manual update function for immediate testing
function manuallyUpdateMyStats() {
    if (!currentUser) {
        console.log('‚ùå Please login first');
        return;
    }
    
    // This is a temporary manual update for testing
    const newScore = prompt('Enter your test score:');
    const newStreak = prompt('Enter your test streak:');
    
    if (newScore && newStreak) {
        const updateData = new FormData();
        updateData.append('action', 'updateUserStats');
        updateData.append('userID', currentUser.id);
        updateData.append('score', newScore);
        updateData.append('streak', newStreak);
        updateData.append('accuracy', '75'); // Test accuracy
        
        fetch(APPS_SCRIPT_URL, {
            method: 'POST',
            body: updateData
        })
        .then(response => response.text())
        .then(result => {
            console.log('Manual stats update result:', result);
            
            // Refresh leaderboard
            if (typeof loadUsers === 'function') {
                loadUsers();
            }
        });
    }
}


        function updateLeaderboard() {
            const container = document.getElementById('leaderboardContainer');
            
            const sortedUsers = [...allUsers]
                .sort((a, b) => (parseInt(b.Score) || 0) - (parseInt(a.Score) || 0))
                .slice(0, 10);
            
            container.innerHTML = sortedUsers.map((user, index) => `
                <div style="
                    display: flex !important;
                    justify-content: space-between !important;
                    align-items: center !important;
                    padding: 15px !important;
                    background: white !important;
                    border-radius: 8px !important;
                    margin-bottom: 10px !important;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
                    ${user.Username === currentUser?.username ? 'border: 2px solid #667eea !important;' : ''}
                ">
                    <div style="display: flex !important; align-items: center !important; gap: 15px !important;">
                        <div style="
                            width: 30px !important;
                            height: 30px !important;
                            background: ${index < 3 ? ['#f59e0b', '#9ca3af', '#cd7f32'][index] : '#667eea'} !important;
                            color: white !important;
                            border-radius: 50% !important;
                            display: flex !important;
                            align-items: center !important;
                            justify-content: center !important;
                            font-weight: bold !important;
                        ">${index + 1}</div>
                        <div>
                            <div style="font-weight: bold !important; color: #333 !important;">
                                ${user.Username}${user.Username === currentUser?.username ? ' (You)' : ''}
                            </div>
                            <div style="font-size: 12px !important; color: #666 !important;">
                                ${user.Accuracy || 0}% accuracy ‚Ä¢ ${user.Streak || 0} streak
                            </div>
                        </div>
                    </div>
                    <div style="font-weight: bold !important; color: #10b981 !important; font-size: 18px !important;">
                        ${user.Score || 0}
                    </div>
                </div>
            `).join('');
            
            if (sortedUsers.length === 0) {
                container.innerHTML = '<p style="text-align: center !important; color: #666 !important;">No players yet!</p>';
            }
        }

        function logout() {
            currentUser = null;
            userPicks = {};
            userAchievements = [];
            totalPicksMade = 0;
            userCoins = 0;
            likedPicks.clear();
            submittedGames.clear();
            
            document.getElementById('headerSubtext').textContent = 'Make your predictions and share your insights';
            document.getElementById('loginBtn').style.display = 'block';
            document.getElementById('accountDropdown').style.display = 'none';
            document.getElementById('achievementsBtn').style.display = 'none';
            document.getElementById('userStatsSection').style.display = 'none';
            
            hideAccountMenu();
            
            const submitBtn = document.getElementById('submitPicksBtn');
            submitBtn.innerHTML = 'Submit All Picks';
            submitBtn.style.background = 'linear-gradient(135deg, #9ca3af 0%, #6b7280 100%)';
            submitBtn.disabled = true;
            
            document.querySelectorAll('[id^="pick_"]').forEach(btn => {
                btn.style.background = 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)';
                btn.style.borderColor = '#e2e8f0';
                btn.style.color = '#334155';
                btn.style.boxShadow = 'none';
            });
            
            updateCommunityFeed();
            showNotification('Successfully logged out. See you next time!', 'info', 3000);
        }

        function showNotification(message, type = 'info', duration = 4000) {
            const container = document.getElementById('notificationContainer');
            
            const notification = document.createElement('div');
            notification.style.cssText = `
                background: ${getNotificationColor(type)} !important;
                color: white !important;
                padding: 15px 20px !important;
                border-radius: 10px !important;
                box-shadow: 0 4px 15px rgba(0,0,0,0.2) !important;
                font-weight: bold !important;
                font-size: 14px !important;
                transform: translateY(-100%) !important;
                transition: all 0.3s ease !important;
                cursor: pointer !important;
                word-wrap: break-word !important;
                max-width: 300px !important;
            `;
            
            notification.innerHTML = message;
            container.appendChild(notification);
            
            setTimeout(() => {
                notification.style.transform = 'translateY(0)';
            }, 100);
            
            const timeoutId = setTimeout(() => {
                removeNotification(notification);
            }, duration);
            
            notification.onclick = () => {
                clearTimeout(timeoutId);
                removeNotification(notification);
            };
        }

// ADD THIS FUNCTION TO YOUR HTML JavaScript SECTION:

function checkMyResults() {
    if (!currentUser) {
        console.log('‚ùå Please login first');
        return;
    }
    
    console.log(`=== CHECKING RESULTS FOR: ${currentUser.username} ===`);
    
    fetch(`${APPS_SCRIPT_URL}?action=getUserPickResults&username=${currentUser.username}&cacheBust=${Date.now()}`)
        .then(response => response.text())
        .then(csvData => {
            console.log('MY PICK RESULTS:', csvData);
            
            if (csvData.trim() === '' || csvData.includes('Error')) {
                console.log('‚ùå No scored picks found for this user');
            } else {
                const lines = csvData.trim().split('\n');
                console.log(`‚úÖ Found ${lines.length - 1} scored picks`);
                
                // Show summary
                let correctPicks = 0;
                let totalPoints = 0;
                let totalScoredPicks = 0;
                
                for (let i = 1; i < lines.length; i++) {
                    const values = parseCSVLine(lines[i]);
                    const isCorrect = values[5]; // IsCorrect column
                    const points = parseInt(values[7]) || 0; // Points column
                    
                    totalScoredPicks++;
                    if (isCorrect === 'TRUE' || isCorrect === true) {
                        correctPicks++;
                    }
                    totalPoints += points;
                }
                
                const accuracy = totalScoredPicks > 0 ? Math.round((correctPicks / totalScoredPicks) * 100) : 0;
                
                console.log(`üìä SUMMARY: ${correctPicks}/${totalScoredPicks} correct picks (${accuracy}%), ${totalPoints} total points`);
                
                // Update debug status
                const debugStatus = document.getElementById('debugStatus');
                if (debugStatus) {
                    debugStatus.textContent = `${correctPicks}/${totalScoredPicks} picks scored`;
                    debugStatus.style.background = totalScoredPicks > 0 ? 'linear-gradient(135deg, #d1fae5 0%, #a7f3d0 100%)' : 'linear-gradient(135deg, #fef3c7 0%, #fde68a 100%)';
                }
            }
        })
        .catch(error => {
            console.error('Error checking my results:', error);
        });
}

// ALSO ADD THIS FIXED hideNotification function:
function hideNotification() {
    const notification = document.querySelector('.notification');
    if (notification) {
        notification.style.display = 'none';
    }
    
    // Also try other common notification selectors
    const notifications = document.querySelectorAll('[class*="notification"], [id*="notification"], .alert, .toast');
    notifications.forEach(notif => {
        notif.style.display = 'none';
    });
}

        function removeNotification(notification) {
            notification.style.transform = 'translateY(-100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }

        function getNotificationColor(type) {
            const colors = {
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b',
                info: '#667eea',
                pick: '#6366f1'
            };
            return colors[type] || colors.info;
        }

        function showMessage(text, type) {
            const messageArea = document.getElementById('messageArea');
            messageArea.textContent = text;
            messageArea.style.display = 'block';
            
            if (type === 'error') {
                messageArea.style.background = '#fee2e2';
                messageArea.style.color = '#dc2626';
            } else if (type === 'success') {
                messageArea.style.background = '#d1fae5';
                messageArea.style.color = '#065f46';
            } else {
                messageArea.style.background = '#dbeafe';
                messageArea.style.color = '#1e40af';
            }
        }

        function clearMessage() {
            document.getElementById('messageArea').style.display = 'none';
        }

        // Initialize the app on load
        initializeApp();

        console.log('FinalScore Pick\'em Platform - Fixed and Ready!');
        console.log('Google Apps Script URL:', APPS_SCRIPT_URL);
        console.log('Features: Google Sheets Integration, Real-time Pick Submission, Community Features');
// Start countdown updates when page loads
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        if (todaysGames.length > 0) {
            startCountdownUpdates();
        }
    }, 2000);
});

// Clear countdown interval when page unloads
window.addEventListener('beforeunload', function() {
    if (window.countdownInterval) {
        clearInterval(window.countdownInterval);
    }
});

// Start countdown updates when page loads
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
        if (todaysGames.length > 0) {
            startCountdownUpdates();
        }
    }, 2000);
});

// Clear countdown interval when page unloads
window.addEventListener('beforeunload', function() {
    if (window.countdownInterval) {
        clearInterval(window.countdownInterval);
    }
});

console.log('FinalScore Pick\'em Platform - Enhanced with Countdown & Filtering!');
console.log('Google Apps Script URL:', APPS_SCRIPT_URL);
console.log('Features: Google Sheets Integration, Real-time Pick Submission, Community Features, Live Countdowns');

    </script>
</body>
</html>